/* automatically generated by rust-bindgen 0.59.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _TIME_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 33;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const TCL_ALPHA_RELEASE: u32 = 0;
pub const TCL_BETA_RELEASE: u32 = 1;
pub const TCL_FINAL_RELEASE: u32 = 2;
pub const TCL_MAJOR_VERSION: u32 = 8;
pub const TCL_MINOR_VERSION: u32 = 6;
pub const TCL_RELEASE_LEVEL: u32 = 2;
pub const TCL_RELEASE_SERIAL: u32 = 12;
pub const TCL_VERSION: &'static [u8; 4usize] = b"8.6\0";
pub const TCL_PATCH_LEVEL: &'static [u8; 7usize] = b"8.6.12\0";
pub const _STDIO_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const TCL_LL_MODIFIER: &'static [u8; 3usize] = b"ll\0";
pub const TCL_THREAD_STACK_DEFAULT: u32 = 0;
pub const TCL_THREAD_NOFLAGS: u32 = 0;
pub const TCL_THREAD_JOINABLE: u32 = 1;
pub const TCL_MATCH_NOCASE: u32 = 1;
pub const TCL_REG_BASIC: u32 = 0;
pub const TCL_REG_EXTENDED: u32 = 1;
pub const TCL_REG_ADVF: u32 = 2;
pub const TCL_REG_ADVANCED: u32 = 3;
pub const TCL_REG_QUOTE: u32 = 4;
pub const TCL_REG_NOCASE: u32 = 8;
pub const TCL_REG_NOSUB: u32 = 16;
pub const TCL_REG_EXPANDED: u32 = 32;
pub const TCL_REG_NLSTOP: u32 = 64;
pub const TCL_REG_NLANCH: u32 = 128;
pub const TCL_REG_NEWLINE: u32 = 192;
pub const TCL_REG_CANMATCH: u32 = 512;
pub const TCL_REG_NOTBOL: u32 = 1;
pub const TCL_REG_NOTEOL: u32 = 2;
pub const TCL_OK: u32 = 0;
pub const TCL_ERROR: u32 = 1;
pub const TCL_RETURN: u32 = 2;
pub const TCL_BREAK: u32 = 3;
pub const TCL_CONTINUE: u32 = 4;
pub const TCL_RESULT_SIZE: u32 = 200;
pub const TCL_SUBST_COMMANDS: u32 = 1;
pub const TCL_SUBST_VARIABLES: u32 = 2;
pub const TCL_SUBST_BACKSLASHES: u32 = 4;
pub const TCL_SUBST_ALL: u32 = 7;
pub const TCL_DSTRING_STATIC_SIZE: u32 = 200;
pub const TCL_MAX_PREC: u32 = 17;
pub const TCL_DOUBLE_SPACE: u32 = 27;
pub const TCL_INTEGER_SPACE: u32 = 24;
pub const TCL_DONT_USE_BRACES: u32 = 1;
pub const TCL_DONT_QUOTE_HASH: u32 = 8;
pub const TCL_EXACT: u32 = 1;
pub const TCL_NO_EVAL: u32 = 65536;
pub const TCL_EVAL_GLOBAL: u32 = 131072;
pub const TCL_EVAL_DIRECT: u32 = 262144;
pub const TCL_EVAL_INVOKE: u32 = 524288;
pub const TCL_CANCEL_UNWIND: u32 = 1048576;
pub const TCL_EVAL_NOERR: u32 = 2097152;
pub const TCL_GLOBAL_ONLY: u32 = 1;
pub const TCL_NAMESPACE_ONLY: u32 = 2;
pub const TCL_APPEND_VALUE: u32 = 4;
pub const TCL_LIST_ELEMENT: u32 = 8;
pub const TCL_TRACE_READS: u32 = 16;
pub const TCL_TRACE_WRITES: u32 = 32;
pub const TCL_TRACE_UNSETS: u32 = 64;
pub const TCL_TRACE_DESTROYED: u32 = 128;
pub const TCL_INTERP_DESTROYED: u32 = 256;
pub const TCL_LEAVE_ERR_MSG: u32 = 512;
pub const TCL_TRACE_ARRAY: u32 = 2048;
pub const TCL_TRACE_OLD_STYLE: u32 = 4096;
pub const TCL_TRACE_RESULT_DYNAMIC: u32 = 32768;
pub const TCL_TRACE_RESULT_OBJECT: u32 = 65536;
pub const TCL_ENSEMBLE_PREFIX: u32 = 2;
pub const TCL_TRACE_RENAME: u32 = 8192;
pub const TCL_TRACE_DELETE: u32 = 16384;
pub const TCL_ALLOW_INLINE_COMPILATION: u32 = 131072;
pub const TCL_PARSE_PART1: u32 = 1024;
pub const TCL_LINK_INT: u32 = 1;
pub const TCL_LINK_DOUBLE: u32 = 2;
pub const TCL_LINK_BOOLEAN: u32 = 3;
pub const TCL_LINK_STRING: u32 = 4;
pub const TCL_LINK_WIDE_INT: u32 = 5;
pub const TCL_LINK_CHAR: u32 = 6;
pub const TCL_LINK_UCHAR: u32 = 7;
pub const TCL_LINK_SHORT: u32 = 8;
pub const TCL_LINK_USHORT: u32 = 9;
pub const TCL_LINK_UINT: u32 = 10;
pub const TCL_LINK_LONG: u32 = 11;
pub const TCL_LINK_ULONG: u32 = 12;
pub const TCL_LINK_FLOAT: u32 = 13;
pub const TCL_LINK_WIDE_UINT: u32 = 14;
pub const TCL_LINK_READ_ONLY: u32 = 128;
pub const TCL_HASH_KEY_STORE_HASH: u32 = 1;
pub const TCL_HASH_KEY_RANDOMIZE_HASH: u32 = 1;
pub const TCL_HASH_KEY_SYSTEM_HASH: u32 = 2;
pub const TCL_HASH_KEY_TYPE_VERSION: u32 = 1;
pub const TCL_SMALL_HASH_TABLE: u32 = 4;
pub const TCL_STRING_KEYS: u32 = 0;
pub const TCL_ONE_WORD_KEYS: u32 = 1;
pub const TCL_CUSTOM_TYPE_KEYS: i32 = -2;
pub const TCL_CUSTOM_PTR_KEYS: i32 = -1;
pub const TCL_DONT_WAIT: u32 = 2;
pub const TCL_WINDOW_EVENTS: u32 = 4;
pub const TCL_FILE_EVENTS: u32 = 8;
pub const TCL_TIMER_EVENTS: u32 = 16;
pub const TCL_IDLE_EVENTS: u32 = 32;
pub const TCL_ALL_EVENTS: i32 = -3;
pub const TCL_SERVICE_NONE: u32 = 0;
pub const TCL_SERVICE_ALL: u32 = 1;
pub const TCL_READABLE: u32 = 2;
pub const TCL_WRITABLE: u32 = 4;
pub const TCL_EXCEPTION: u32 = 8;
pub const TCL_STDIN: u32 = 2;
pub const TCL_STDOUT: u32 = 4;
pub const TCL_STDERR: u32 = 8;
pub const TCL_ENFORCE_MODE: u32 = 16;
pub const TCL_CLOSE_READ: u32 = 2;
pub const TCL_CLOSE_WRITE: u32 = 4;
pub const TCL_CHANNEL_THREAD_INSERT: u32 = 0;
pub const TCL_CHANNEL_THREAD_REMOVE: u32 = 1;
pub const TCL_MODE_BLOCKING: u32 = 0;
pub const TCL_MODE_NONBLOCKING: u32 = 1;
pub const TCL_GLOB_TYPE_BLOCK: u32 = 1;
pub const TCL_GLOB_TYPE_CHAR: u32 = 2;
pub const TCL_GLOB_TYPE_DIR: u32 = 4;
pub const TCL_GLOB_TYPE_PIPE: u32 = 8;
pub const TCL_GLOB_TYPE_FILE: u32 = 16;
pub const TCL_GLOB_TYPE_LINK: u32 = 32;
pub const TCL_GLOB_TYPE_SOCK: u32 = 64;
pub const TCL_GLOB_TYPE_MOUNT: u32 = 128;
pub const TCL_GLOB_PERM_RONLY: u32 = 1;
pub const TCL_GLOB_PERM_HIDDEN: u32 = 2;
pub const TCL_GLOB_PERM_R: u32 = 4;
pub const TCL_GLOB_PERM_W: u32 = 8;
pub const TCL_GLOB_PERM_X: u32 = 16;
pub const TCL_UNLOAD_DETACH_FROM_INTERPRETER: u32 = 1;
pub const TCL_UNLOAD_DETACH_FROM_PROCESS: u32 = 2;
pub const TCL_CREATE_SYMBOLIC_LINK: u32 = 1;
pub const TCL_CREATE_HARD_LINK: u32 = 2;
pub const TCL_TOKEN_WORD: u32 = 1;
pub const TCL_TOKEN_SIMPLE_WORD: u32 = 2;
pub const TCL_TOKEN_TEXT: u32 = 4;
pub const TCL_TOKEN_BS: u32 = 8;
pub const TCL_TOKEN_COMMAND: u32 = 16;
pub const TCL_TOKEN_VARIABLE: u32 = 32;
pub const TCL_TOKEN_SUB_EXPR: u32 = 64;
pub const TCL_TOKEN_OPERATOR: u32 = 128;
pub const TCL_TOKEN_EXPAND_WORD: u32 = 256;
pub const TCL_PARSE_SUCCESS: u32 = 0;
pub const TCL_PARSE_QUOTE_EXTRA: u32 = 1;
pub const TCL_PARSE_BRACE_EXTRA: u32 = 2;
pub const TCL_PARSE_MISSING_BRACE: u32 = 3;
pub const TCL_PARSE_MISSING_BRACKET: u32 = 4;
pub const TCL_PARSE_MISSING_PAREN: u32 = 5;
pub const TCL_PARSE_MISSING_QUOTE: u32 = 6;
pub const TCL_PARSE_MISSING_VAR_BRACE: u32 = 7;
pub const TCL_PARSE_SYNTAX: u32 = 8;
pub const TCL_PARSE_BAD_NUMBER: u32 = 9;
pub const NUM_STATIC_TOKENS: u32 = 20;
pub const TCL_ENCODING_START: u32 = 1;
pub const TCL_ENCODING_END: u32 = 2;
pub const TCL_ENCODING_STOPONERROR: u32 = 4;
pub const TCL_ENCODING_NO_TERMINATE: u32 = 8;
pub const TCL_ENCODING_CHAR_LIMIT: u32 = 16;
pub const TCL_CONVERT_MULTIBYTE: i32 = -1;
pub const TCL_CONVERT_SYNTAX: i32 = -2;
pub const TCL_CONVERT_UNKNOWN: i32 = -3;
pub const TCL_CONVERT_NOSPACE: i32 = -4;
pub const TCL_UTF_MAX: u32 = 3;
pub const TCL_LIMIT_COMMANDS: u32 = 1;
pub const TCL_LIMIT_TIME: u32 = 2;
pub const TCL_ARGV_CONSTANT: u32 = 15;
pub const TCL_ARGV_INT: u32 = 16;
pub const TCL_ARGV_STRING: u32 = 17;
pub const TCL_ARGV_REST: u32 = 18;
pub const TCL_ARGV_FLOAT: u32 = 19;
pub const TCL_ARGV_FUNC: u32 = 20;
pub const TCL_ARGV_GENFUNC: u32 = 21;
pub const TCL_ARGV_HELP: u32 = 22;
pub const TCL_ARGV_END: u32 = 23;
pub const TCL_ZLIB_FORMAT_RAW: u32 = 1;
pub const TCL_ZLIB_FORMAT_ZLIB: u32 = 2;
pub const TCL_ZLIB_FORMAT_GZIP: u32 = 4;
pub const TCL_ZLIB_FORMAT_AUTO: u32 = 8;
pub const TCL_ZLIB_STREAM_DEFLATE: u32 = 16;
pub const TCL_ZLIB_STREAM_INFLATE: u32 = 32;
pub const TCL_ZLIB_COMPRESS_NONE: u32 = 0;
pub const TCL_ZLIB_COMPRESS_FAST: u32 = 1;
pub const TCL_ZLIB_COMPRESS_BEST: u32 = 9;
pub const TCL_ZLIB_COMPRESS_DEFAULT: i32 = -1;
pub const TCL_ZLIB_NO_FLUSH: u32 = 0;
pub const TCL_ZLIB_FLUSH: u32 = 2;
pub const TCL_ZLIB_FULLFLUSH: u32 = 3;
pub const TCL_ZLIB_FINALIZE: u32 = 4;
pub const TCL_LOAD_GLOBAL: u32 = 1;
pub const TCL_LOAD_LAZY: u32 = 2;
pub const _CTYPE_H: u32 = 1;
pub const CHANNELLEN: u32 = 80;
pub const HANDLEN: u32 = 32;
pub const NICKMAX: u32 = 32;
pub const USERLEN: u32 = 10;
pub const HOSTMAX: u32 = 63;
pub const UHOSTMAX: u32 = 323;
pub const DIRMAX: u32 = 512;
pub const LOGLINEMAX: u32 = 9000;
pub const BADHANDCHARS: &'static [u8; 15usize] = b"-,+*=:!.@#;$%&\0";
pub const CHARSET_LOWER_ALPHA: &'static [u8; 27usize] = b"abcdefghijklmnopqrstuvwxyz\0";
pub const CHARSET_LOWER_ALPHA_NUM: &'static [u8; 37usize] =
    b"0123456789abcdefghijklmnopqrstuvwxyz\0";
pub const CHARSET_PASSWORD: &'static [u8; 65usize] =
    b"0123456789?ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz\0";
pub const LANGDIR: &'static [u8; 11usize] = b"./language\0";
pub const BASELANG: &'static [u8; 8usize] = b"english\0";
pub const NICKLEN: u32 = 33;
pub const UHOSTLEN: u32 = 324;
pub const DIRLEN: u32 = 513;
pub const LOGLINELEN: u32 = 9001;
pub const NOTENAMELEN: u32 = 65;
pub const PASSWORDMAX: u32 = 30;
pub const PASSWORDLEN: u32 = 31;
pub const NAME_MAX: u32 = 255;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MAX: u32 = 45;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MAX: u32 = 45;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOMAXCONN: u32 = 4096;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const __BITS_PER_LONG: u32 = 64;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP_OLD: u32 = 35078;
pub const SIOCGSTAMPNS_OLD: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO_OLD: u32 = 20;
pub const SO_SNDTIMEO_OLD: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_MARK: u32 = 36;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_TIMESTAMP_OLD: u32 = 29;
pub const SO_TIMESTAMPNS_OLD: u32 = 35;
pub const SO_TIMESTAMPING_OLD: u32 = 37;
pub const SO_TIMESTAMP_NEW: u32 = 63;
pub const SO_TIMESTAMPNS_NEW: u32 = 64;
pub const SO_TIMESTAMPING_NEW: u32 = 65;
pub const SO_RCVTIMEO_NEW: u32 = 66;
pub const SO_SNDTIMEO_NEW: u32 = 67;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_PREFER_BUSY_POLL: u32 = 69;
pub const SO_BUSY_POLL_BUDGET: u32 = 70;
pub const SO_TIMESTAMP: u32 = 29;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const __osockaddr_defined: u32 = 1;
pub const _NETINET_IN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
pub const IP_OPTIONS: u32 = 4;
pub const IP_HDRINCL: u32 = 3;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_RECVOPTS: u32 = 6;
pub const IP_RETOPTS: u32 = 7;
pub const IP_MULTICAST_IF: u32 = 32;
pub const IP_MULTICAST_TTL: u32 = 33;
pub const IP_MULTICAST_LOOP: u32 = 34;
pub const IP_ADD_MEMBERSHIP: u32 = 35;
pub const IP_DROP_MEMBERSHIP: u32 = 36;
pub const IP_UNBLOCK_SOURCE: u32 = 37;
pub const IP_BLOCK_SOURCE: u32 = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const IP_MSFILTER: u32 = 41;
pub const MCAST_JOIN_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_LEAVE_GROUP: u32 = 45;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const MCAST_MSFILTER: u32 = 48;
pub const IP_MULTICAST_ALL: u32 = 49;
pub const IP_UNICAST_IF: u32 = 50;
pub const MCAST_EXCLUDE: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const IP_ROUTER_ALERT: u32 = 5;
pub const IP_PKTINFO: u32 = 8;
pub const IP_PKTOPTIONS: u32 = 9;
pub const IP_PMTUDISC: u32 = 10;
pub const IP_MTU_DISCOVER: u32 = 10;
pub const IP_RECVERR: u32 = 11;
pub const IP_RECVTTL: u32 = 12;
pub const IP_RECVTOS: u32 = 13;
pub const IP_MTU: u32 = 14;
pub const IP_FREEBIND: u32 = 15;
pub const IP_IPSEC_POLICY: u32 = 16;
pub const IP_XFRM_POLICY: u32 = 17;
pub const IP_PASSSEC: u32 = 18;
pub const IP_TRANSPARENT: u32 = 19;
pub const IP_ORIGDSTADDR: u32 = 20;
pub const IP_RECVORIGDSTADDR: u32 = 20;
pub const IP_MINTTL: u32 = 21;
pub const IP_NODEFRAG: u32 = 22;
pub const IP_CHECKSUM: u32 = 23;
pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const IP_RECVFRAGSIZE: u32 = 25;
pub const IP_RECVERR_RFC4884: u32 = 26;
pub const IP_PMTUDISC_DONT: u32 = 0;
pub const IP_PMTUDISC_WANT: u32 = 1;
pub const IP_PMTUDISC_DO: u32 = 2;
pub const IP_PMTUDISC_PROBE: u32 = 3;
pub const IP_PMTUDISC_INTERFACE: u32 = 4;
pub const IP_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IP: u32 = 0;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_JOIN_GROUP: u32 = 20;
pub const IPV6_LEAVE_GROUP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_MULTICAST_ALL: u32 = 29;
pub const IPV6_ROUTER_ALERT_ISOLATE: u32 = 30;
pub const IPV6_RECVERR_RFC4884: u32 = 31;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_HDRINCL: u32 = 36;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_AUTOFLOWLABEL: u32 = 70;
pub const IPV6_ADDR_PREFERENCES: u32 = 72;
pub const IPV6_MINHOPCOUNT: u32 = 73;
pub const IPV6_ORIGDSTADDR: u32 = 74;
pub const IPV6_RECVORIGDSTADDR: u32 = 74;
pub const IPV6_TRANSPARENT: u32 = 75;
pub const IPV6_UNICAST_IF: u32 = 76;
pub const IPV6_RECVFRAGSIZE: u32 = 77;
pub const IPV6_FREEBIND: u32 = 78;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_RXHOPOPTS: u32 = 54;
pub const IPV6_RXDSTOPTS: u32 = 59;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const RES_HOSTBYIP: u32 = 1;
pub const RES_IPBYHOST: u32 = 2;
pub const DCT_CHAT: u32 = 1;
pub const DCT_MASTER: u32 = 2;
pub const DCT_SHOWWHO: u32 = 4;
pub const DCT_REMOTEWHO: u32 = 8;
pub const DCT_VALIDIDX: u32 = 16;
pub const DCT_SIMUL: u32 = 32;
pub const DCT_CANBOOT: u32 = 64;
pub const DCT_GETNOTES: u32 = 1;
pub const DCT_FILES: u32 = 128;
pub const DCT_FORKTYPE: u32 = 256;
pub const DCT_BOT: u32 = 512;
pub const DCT_FILETRAN: u32 = 1024;
pub const DCT_FILESEND: u32 = 2048;
pub const DCT_LISTEN: u32 = 4096;
pub const STAT_ECHO: u32 = 1;
pub const STAT_FPRINT: u32 = 2;
pub const STAT_CHAT: u32 = 4;
pub const STAT_TELNET: u32 = 8;
pub const STAT_PARTY: u32 = 16;
pub const STAT_BOTONLY: u32 = 32;
pub const STAT_USRONLY: u32 = 64;
pub const STAT_PAGE: u32 = 128;
pub const STAT_SERV: u32 = 256;
pub const STRIP_COLOR: u32 = 1;
pub const STRIP_BOLD: u32 = 2;
pub const STRIP_REVERSE: u32 = 4;
pub const STRIP_UNDERLINE: u32 = 8;
pub const STRIP_ANSI: u32 = 16;
pub const STRIP_BELLS: u32 = 32;
pub const STRIP_ORDINARY: u32 = 64;
pub const STRIP_ITALICS: u32 = 128;
pub const STRIP_ALL: u32 = 255;
pub const STAT_PINGED: u32 = 1;
pub const STAT_SHARE: u32 = 2;
pub const STAT_CALLED: u32 = 4;
pub const STAT_OFFERED: u32 = 8;
pub const STAT_SENDING: u32 = 16;
pub const STAT_GETTING: u32 = 32;
pub const STAT_WARNED: u32 = 64;
pub const STAT_LEAF: u32 = 128;
pub const STAT_LINKING: u32 = 256;
pub const STAT_AGGRESSIVE: u32 = 512;
pub const LSTN_PUBLIC: u32 = 1;
pub const FLOOD_PRIVMSG: u32 = 0;
pub const FLOOD_NOTICE: u32 = 1;
pub const FLOOD_CTCP: u32 = 2;
pub const FLOOD_NICK: u32 = 3;
pub const FLOOD_JOIN: u32 = 4;
pub const FLOOD_KICK: u32 = 5;
pub const FLOOD_DEOP: u32 = 6;
pub const FLOOD_CHAN_MAX: u32 = 7;
pub const FLOOD_GLOBAL_MAX: u32 = 3;
pub const STDIN: u32 = 0;
pub const STDOUT: u32 = 1;
pub const STDERR: u32 = 2;
pub const LOG_MSGS: u32 = 1;
pub const LOG_PUBLIC: u32 = 2;
pub const LOG_JOIN: u32 = 4;
pub const LOG_MODES: u32 = 8;
pub const LOG_CMDS: u32 = 16;
pub const LOG_MISC: u32 = 32;
pub const LOG_BOTS: u32 = 64;
pub const LOG_RAW: u32 = 128;
pub const LOG_FILES: u32 = 256;
pub const LOG_LEV1: u32 = 512;
pub const LOG_LEV2: u32 = 1024;
pub const LOG_LEV3: u32 = 2048;
pub const LOG_LEV4: u32 = 4096;
pub const LOG_LEV5: u32 = 8192;
pub const LOG_LEV6: u32 = 16384;
pub const LOG_LEV7: u32 = 32768;
pub const LOG_LEV8: u32 = 65536;
pub const LOG_SERV: u32 = 131072;
pub const LOG_DEBUG: u32 = 262144;
pub const LOG_WALL: u32 = 524288;
pub const LOG_SRVOUT: u32 = 1048576;
pub const LOG_BOTNETIN: u32 = 2097152;
pub const LOG_BOTSHRIN: u32 = 4194304;
pub const LOG_BOTNETOUT: u32 = 8388608;
pub const LOG_BOTSHROUT: u32 = 16777216;
pub const LOG_BOTMSG: u32 = 33554432;
pub const LOG_ALL: u32 = 67108863;
pub const LF_EXPIRING: u32 = 1;
pub const FILEDB_HIDE: u32 = 1;
pub const FILEDB_UNHIDE: u32 = 2;
pub const FILEDB_SHARE: u32 = 3;
pub const FILEDB_UNSHARE: u32 = 4;
pub const SOCK_UNUSED: u32 = 1;
pub const SOCK_BINARY: u32 = 2;
pub const SOCK_LISTEN: u32 = 4;
pub const SOCK_CONNECT: u32 = 8;
pub const SOCK_NONSOCK: u32 = 16;
pub const SOCK_STRONGCONN: u32 = 32;
pub const SOCK_EOFD: u32 = 64;
pub const SOCK_PROXYWAIT: u32 = 128;
pub const SOCK_PASS: u32 = 256;
pub const SOCK_VIRTUAL: u32 = 512;
pub const SOCK_BUFFER: u32 = 1024;
pub const SOCK_TCL: u32 = 2048;
pub const DP_STDOUT: u32 = 32753;
pub const DP_LOG: u32 = 32754;
pub const DP_SERVER: u32 = 32755;
pub const DP_HELP: u32 = 32756;
pub const DP_STDERR: u32 = 32757;
pub const DP_MODE: u32 = 32758;
pub const DP_MODE_NEXT: u32 = 32759;
pub const DP_SERVER_NEXT: u32 = 32760;
pub const DP_HELP_NEXT: u32 = 32761;
pub const NORMAL: u32 = 0;
pub const QUICK: u32 = 1;
pub const NOTE_ERROR: u32 = 0;
pub const NOTE_OK: u32 = 1;
pub const NOTE_STORED: u32 = 2;
pub const NOTE_FULL: u32 = 3;
pub const NOTE_TCL: u32 = 4;
pub const NOTE_AWAY: u32 = 5;
pub const NOTE_FWD: u32 = 6;
pub const NOTE_REJECT: u32 = 7;
pub const STR_PROTECT: u32 = 2;
pub const STR_DIR: u32 = 1;
pub const HELP_DCC: u32 = 1;
pub const HELP_TEXT: u32 = 2;
pub const HELP_IRC: u32 = 16;
pub const ESC: u32 = 27;
pub const TLN_AYT: u32 = 246;
pub const TLN_WILL: u32 = 251;
pub const TLN_WILL_C: [u8; 2usize] = [251u8, 0u8];
pub const TLN_WONT: u32 = 252;
pub const TLN_WONT_C: [u8; 2usize] = [252u8, 0u8];
pub const TLN_DO: u32 = 253;
pub const TLN_DO_C: [u8; 2usize] = [253u8, 0u8];
pub const TLN_DONT: u32 = 254;
pub const TLN_DONT_C: [u8; 2usize] = [254u8, 0u8];
pub const TLN_IAC: u32 = 255;
pub const TLN_IAC_C: [u8; 2usize] = [255u8, 0u8];
pub const TLN_ECHO: u32 = 1;
pub const TLN_ECHO_C: &'static [u8; 2usize] = b"\x01\0";
pub const TLN_STATUS: u32 = 5;
pub const TLN_STATUS_C: &'static [u8; 2usize] = b"\x05\0";
pub type size_t = ::std::os::raw::c_ulong;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
pub type pid_t = __pid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: size_t,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type off_t = __off_t;
pub type ssize_t = __ssize_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type ClientData = *mut ::std::os::raw::c_void;
pub type Tcl_WideInt = ::std::os::raw::c_longlong;
pub type Tcl_WideUInt = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    _unused: [u8; 0],
}
pub type Tcl_StatBuf = stat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_Interp {
    pub resultDontUse: *mut ::std::os::raw::c_char,
    pub freeProcDontUse:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_char)>,
    pub errorLineDontUse: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Tcl_Interp() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_Interp>(),
        24usize,
        concat!("Size of: ", stringify!(Tcl_Interp))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_Interp>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_Interp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Interp>())).resultDontUse as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Interp),
            "::",
            stringify!(resultDontUse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Interp>())).freeProcDontUse as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Interp),
            "::",
            stringify!(freeProcDontUse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Interp>())).errorLineDontUse as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Interp),
            "::",
            stringify!(errorLineDontUse)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_AsyncHandler_ {
    _unused: [u8; 0],
}
pub type Tcl_AsyncHandler = *mut Tcl_AsyncHandler_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_Channel_ {
    _unused: [u8; 0],
}
pub type Tcl_Channel = *mut Tcl_Channel_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_ChannelTypeVersion_ {
    _unused: [u8; 0],
}
pub type Tcl_ChannelTypeVersion = *mut Tcl_ChannelTypeVersion_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_Command_ {
    _unused: [u8; 0],
}
pub type Tcl_Command = *mut Tcl_Command_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_Condition_ {
    _unused: [u8; 0],
}
pub type Tcl_Condition = *mut Tcl_Condition_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_Dict_ {
    _unused: [u8; 0],
}
pub type Tcl_Dict = *mut Tcl_Dict_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_EncodingState_ {
    _unused: [u8; 0],
}
pub type Tcl_EncodingState = *mut Tcl_EncodingState_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_Encoding_ {
    _unused: [u8; 0],
}
pub type Tcl_Encoding = *mut Tcl_Encoding_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_InterpState_ {
    _unused: [u8; 0],
}
pub type Tcl_InterpState = *mut Tcl_InterpState_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_LoadHandle_ {
    _unused: [u8; 0],
}
pub type Tcl_LoadHandle = *mut Tcl_LoadHandle_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_Mutex_ {
    _unused: [u8; 0],
}
pub type Tcl_Mutex = *mut Tcl_Mutex_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_Pid_ {
    _unused: [u8; 0],
}
pub type Tcl_Pid = *mut Tcl_Pid_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_RegExp_ {
    _unused: [u8; 0],
}
pub type Tcl_RegExp = *mut Tcl_RegExp_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_ThreadDataKey_ {
    _unused: [u8; 0],
}
pub type Tcl_ThreadDataKey = *mut Tcl_ThreadDataKey_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_ThreadId_ {
    _unused: [u8; 0],
}
pub type Tcl_ThreadId = *mut Tcl_ThreadId_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_TimerToken_ {
    _unused: [u8; 0],
}
pub type Tcl_TimerToken = *mut Tcl_TimerToken_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_Trace_ {
    _unused: [u8; 0],
}
pub type Tcl_Trace = *mut Tcl_Trace_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_Var_ {
    _unused: [u8; 0],
}
pub type Tcl_Var = *mut Tcl_Var_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_ZLibStream_ {
    _unused: [u8; 0],
}
pub type Tcl_ZlibStream = *mut Tcl_ZLibStream_;
pub type Tcl_ThreadCreateProc = ::std::option::Option<unsafe extern "C" fn(clientData: ClientData)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_RegExpIndices {
    pub start: ::std::os::raw::c_long,
    pub end: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_Tcl_RegExpIndices() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_RegExpIndices>(),
        16usize,
        concat!("Size of: ", stringify!(Tcl_RegExpIndices))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_RegExpIndices>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_RegExpIndices))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_RegExpIndices>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_RegExpIndices),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_RegExpIndices>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_RegExpIndices),
            "::",
            stringify!(end)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_RegExpInfo {
    pub nsubs: ::std::os::raw::c_int,
    pub matches: *mut Tcl_RegExpIndices,
    pub extendStart: ::std::os::raw::c_long,
    pub reserved: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_Tcl_RegExpInfo() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_RegExpInfo>(),
        32usize,
        concat!("Size of: ", stringify!(Tcl_RegExpInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_RegExpInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_RegExpInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_RegExpInfo>())).nsubs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_RegExpInfo),
            "::",
            stringify!(nsubs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_RegExpInfo>())).matches as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_RegExpInfo),
            "::",
            stringify!(matches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_RegExpInfo>())).extendStart as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_RegExpInfo),
            "::",
            stringify!(extendStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_RegExpInfo>())).reserved as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_RegExpInfo),
            "::",
            stringify!(reserved)
        )
    );
}
pub type Tcl_Stat_ = *mut Tcl_StatBuf;
pub type Tcl_OldStat_ = *mut stat;
pub const Tcl_ValueType_TCL_INT: Tcl_ValueType = 0;
pub const Tcl_ValueType_TCL_DOUBLE: Tcl_ValueType = 1;
pub const Tcl_ValueType_TCL_EITHER: Tcl_ValueType = 2;
pub const Tcl_ValueType_TCL_WIDE_INT: Tcl_ValueType = 3;
pub type Tcl_ValueType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_Value {
    pub type_: Tcl_ValueType,
    pub intValue: ::std::os::raw::c_long,
    pub doubleValue: f64,
    pub wideValue: Tcl_WideInt,
}
#[test]
fn bindgen_test_layout_Tcl_Value() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_Value>(),
        32usize,
        concat!("Size of: ", stringify!(Tcl_Value))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_Value>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_Value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Value>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Value),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Value>())).intValue as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Value),
            "::",
            stringify!(intValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Value>())).doubleValue as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Value),
            "::",
            stringify!(doubleValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Value>())).wideValue as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Value),
            "::",
            stringify!(wideValue)
        )
    );
}
pub type Tcl_AppInitProc =
    ::std::option::Option<unsafe extern "C" fn(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int>;
pub type Tcl_AsyncProc = ::std::option::Option<
    unsafe extern "C" fn(
        clientData: ClientData,
        interp: *mut Tcl_Interp,
        code: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_ChannelProc = ::std::option::Option<
    unsafe extern "C" fn(clientData: ClientData, mask: ::std::os::raw::c_int),
>;
pub type Tcl_CloseProc = ::std::option::Option<unsafe extern "C" fn(data: ClientData)>;
pub type Tcl_CmdDeleteProc = ::std::option::Option<unsafe extern "C" fn(clientData: ClientData)>;
pub type Tcl_CmdProc = ::std::option::Option<
    unsafe extern "C" fn(
        clientData: ClientData,
        interp: *mut Tcl_Interp,
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_CmdTraceProc = ::std::option::Option<
    unsafe extern "C" fn(
        clientData: ClientData,
        interp: *mut Tcl_Interp,
        level: ::std::os::raw::c_int,
        command: *mut ::std::os::raw::c_char,
        proc_: Tcl_CmdProc,
        cmdClientData: ClientData,
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
    ),
>;
pub type Tcl_CmdObjTraceProc = ::std::option::Option<
    unsafe extern "C" fn(
        clientData: ClientData,
        interp: *mut Tcl_Interp,
        level: ::std::os::raw::c_int,
        command: *const ::std::os::raw::c_char,
        commandInfo: Tcl_Command,
        objc: ::std::os::raw::c_int,
        objv: *const *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_CmdObjTraceDeleteProc =
    ::std::option::Option<unsafe extern "C" fn(clientData: ClientData)>;
pub type Tcl_DupInternalRepProc =
    ::std::option::Option<unsafe extern "C" fn(srcPtr: *mut Tcl_Obj, dupPtr: *mut Tcl_Obj)>;
pub type Tcl_EncodingConvertProc = ::std::option::Option<
    unsafe extern "C" fn(
        clientData: ClientData,
        src: *const ::std::os::raw::c_char,
        srcLen: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        statePtr: *mut Tcl_EncodingState,
        dst: *mut ::std::os::raw::c_char,
        dstLen: ::std::os::raw::c_int,
        srcReadPtr: *mut ::std::os::raw::c_int,
        dstWrotePtr: *mut ::std::os::raw::c_int,
        dstCharsPtr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_EncodingFreeProc = ::std::option::Option<unsafe extern "C" fn(clientData: ClientData)>;
pub type Tcl_EventProc = ::std::option::Option<
    unsafe extern "C" fn(
        evPtr: *mut Tcl_Event,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_EventCheckProc = ::std::option::Option<
    unsafe extern "C" fn(clientData: ClientData, flags: ::std::os::raw::c_int),
>;
pub type Tcl_EventDeleteProc = ::std::option::Option<
    unsafe extern "C" fn(evPtr: *mut Tcl_Event, clientData: ClientData) -> ::std::os::raw::c_int,
>;
pub type Tcl_EventSetupProc = ::std::option::Option<
    unsafe extern "C" fn(clientData: ClientData, flags: ::std::os::raw::c_int),
>;
pub type Tcl_ExitProc = ::std::option::Option<unsafe extern "C" fn(clientData: ClientData)>;
pub type Tcl_FileProc = ::std::option::Option<
    unsafe extern "C" fn(clientData: ClientData, mask: ::std::os::raw::c_int),
>;
pub type Tcl_FileFreeProc = ::std::option::Option<unsafe extern "C" fn(clientData: ClientData)>;
pub type Tcl_FreeInternalRepProc =
    ::std::option::Option<unsafe extern "C" fn(objPtr: *mut Tcl_Obj)>;
pub type Tcl_FreeProc =
    ::std::option::Option<unsafe extern "C" fn(blockPtr: *mut ::std::os::raw::c_char)>;
pub type Tcl_IdleProc = ::std::option::Option<unsafe extern "C" fn(clientData: ClientData)>;
pub type Tcl_InterpDeleteProc =
    ::std::option::Option<unsafe extern "C" fn(clientData: ClientData, interp: *mut Tcl_Interp)>;
pub type Tcl_MathProc = ::std::option::Option<
    unsafe extern "C" fn(
        clientData: ClientData,
        interp: *mut Tcl_Interp,
        args: *mut Tcl_Value,
        resultPtr: *mut Tcl_Value,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_NamespaceDeleteProc =
    ::std::option::Option<unsafe extern "C" fn(clientData: ClientData)>;
pub type Tcl_ObjCmdProc = ::std::option::Option<
    unsafe extern "C" fn(
        clientData: ClientData,
        interp: *mut Tcl_Interp,
        objc: ::std::os::raw::c_int,
        objv: *const *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_PackageInitProc =
    ::std::option::Option<unsafe extern "C" fn(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int>;
pub type Tcl_PackageUnloadProc = ::std::option::Option<
    unsafe extern "C" fn(
        interp: *mut Tcl_Interp,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_PanicProc =
    ::std::option::Option<unsafe extern "C" fn(format: *const ::std::os::raw::c_char, ...)>;
pub type Tcl_TcpAcceptProc = ::std::option::Option<
    unsafe extern "C" fn(
        callbackData: ClientData,
        chan: Tcl_Channel,
        address: *mut ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
    ),
>;
pub type Tcl_TimerProc = ::std::option::Option<unsafe extern "C" fn(clientData: ClientData)>;
pub type Tcl_SetFromAnyProc = ::std::option::Option<
    unsafe extern "C" fn(interp: *mut Tcl_Interp, objPtr: *mut Tcl_Obj) -> ::std::os::raw::c_int,
>;
pub type Tcl_UpdateStringProc = ::std::option::Option<unsafe extern "C" fn(objPtr: *mut Tcl_Obj)>;
pub type Tcl_VarTraceProc = ::std::option::Option<
    unsafe extern "C" fn(
        clientData: ClientData,
        interp: *mut Tcl_Interp,
        part1: *const ::std::os::raw::c_char,
        part2: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char,
>;
pub type Tcl_CommandTraceProc = ::std::option::Option<
    unsafe extern "C" fn(
        clientData: ClientData,
        interp: *mut Tcl_Interp,
        oldName: *const ::std::os::raw::c_char,
        newName: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ),
>;
pub type Tcl_CreateFileHandlerProc = ::std::option::Option<
    unsafe extern "C" fn(
        fd: ::std::os::raw::c_int,
        mask: ::std::os::raw::c_int,
        proc_: Tcl_FileProc,
        clientData: ClientData,
    ),
>;
pub type Tcl_DeleteFileHandlerProc =
    ::std::option::Option<unsafe extern "C" fn(fd: ::std::os::raw::c_int)>;
pub type Tcl_AlertNotifierProc =
    ::std::option::Option<unsafe extern "C" fn(clientData: ClientData)>;
pub type Tcl_ServiceModeHookProc =
    ::std::option::Option<unsafe extern "C" fn(mode: ::std::os::raw::c_int)>;
pub type Tcl_InitNotifierProc = ::std::option::Option<unsafe extern "C" fn() -> ClientData>;
pub type Tcl_FinalizeNotifierProc =
    ::std::option::Option<unsafe extern "C" fn(clientData: ClientData)>;
pub type Tcl_MainLoopProc = ::std::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_ObjType {
    pub name: *const ::std::os::raw::c_char,
    pub freeIntRepProc: Tcl_FreeInternalRepProc,
    pub dupIntRepProc: Tcl_DupInternalRepProc,
    pub updateStringProc: Tcl_UpdateStringProc,
    pub setFromAnyProc: Tcl_SetFromAnyProc,
}
#[test]
fn bindgen_test_layout_Tcl_ObjType() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_ObjType>(),
        40usize,
        concat!("Size of: ", stringify!(Tcl_ObjType))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_ObjType>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_ObjType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ObjType>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ObjType),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ObjType>())).freeIntRepProc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ObjType),
            "::",
            stringify!(freeIntRepProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ObjType>())).dupIntRepProc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ObjType),
            "::",
            stringify!(dupIntRepProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ObjType>())).updateStringProc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ObjType),
            "::",
            stringify!(updateStringProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ObjType>())).setFromAnyProc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ObjType),
            "::",
            stringify!(setFromAnyProc)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Tcl_Obj {
    pub refCount: ::std::os::raw::c_int,
    pub bytes: *mut ::std::os::raw::c_char,
    pub length: ::std::os::raw::c_int,
    pub typePtr: *const Tcl_ObjType,
    pub internalRep: Tcl_Obj__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Tcl_Obj__bindgen_ty_1 {
    pub longValue: ::std::os::raw::c_long,
    pub doubleValue: f64,
    pub otherValuePtr: *mut ::std::os::raw::c_void,
    pub wideValue: Tcl_WideInt,
    pub twoPtrValue: Tcl_Obj__bindgen_ty_1__bindgen_ty_1,
    pub ptrAndLongRep: Tcl_Obj__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_Obj__bindgen_ty_1__bindgen_ty_1 {
    pub ptr1: *mut ::std::os::raw::c_void,
    pub ptr2: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_Tcl_Obj__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_Obj__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(Tcl_Obj__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_Obj__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(Tcl_Obj__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_Obj__bindgen_ty_1__bindgen_ty_1>())).ptr1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Obj__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ptr1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_Obj__bindgen_ty_1__bindgen_ty_1>())).ptr2 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Obj__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ptr2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_Obj__bindgen_ty_1__bindgen_ty_2 {
    pub ptr: *mut ::std::os::raw::c_void,
    pub value: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_Tcl_Obj__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_Obj__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(Tcl_Obj__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_Obj__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(Tcl_Obj__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_Obj__bindgen_ty_1__bindgen_ty_2>())).ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Obj__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_Obj__bindgen_ty_1__bindgen_ty_2>())).value as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Obj__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(value)
        )
    );
}
#[test]
fn bindgen_test_layout_Tcl_Obj__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_Obj__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(Tcl_Obj__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_Obj__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_Obj__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Obj__bindgen_ty_1>())).longValue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Obj__bindgen_ty_1),
            "::",
            stringify!(longValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_Obj__bindgen_ty_1>())).doubleValue as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Obj__bindgen_ty_1),
            "::",
            stringify!(doubleValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_Obj__bindgen_ty_1>())).otherValuePtr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Obj__bindgen_ty_1),
            "::",
            stringify!(otherValuePtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Obj__bindgen_ty_1>())).wideValue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Obj__bindgen_ty_1),
            "::",
            stringify!(wideValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_Obj__bindgen_ty_1>())).twoPtrValue as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Obj__bindgen_ty_1),
            "::",
            stringify!(twoPtrValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_Obj__bindgen_ty_1>())).ptrAndLongRep as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Obj__bindgen_ty_1),
            "::",
            stringify!(ptrAndLongRep)
        )
    );
}
#[test]
fn bindgen_test_layout_Tcl_Obj() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_Obj>(),
        48usize,
        concat!("Size of: ", stringify!(Tcl_Obj))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_Obj>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_Obj))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Obj>())).refCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Obj),
            "::",
            stringify!(refCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Obj>())).bytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Obj),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Obj>())).length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Obj),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Obj>())).typePtr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Obj),
            "::",
            stringify!(typePtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Obj>())).internalRep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Obj),
            "::",
            stringify!(internalRep)
        )
    );
}
extern "C" {
    pub fn Tcl_IncrRefCount(objPtr: *mut Tcl_Obj);
}
extern "C" {
    pub fn Tcl_DecrRefCount(objPtr: *mut Tcl_Obj);
}
extern "C" {
    pub fn Tcl_IsShared(objPtr: *mut Tcl_Obj) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_SavedResult {
    pub result: *mut ::std::os::raw::c_char,
    pub freeProc: Tcl_FreeProc,
    pub objResultPtr: *mut Tcl_Obj,
    pub appendResult: *mut ::std::os::raw::c_char,
    pub appendAvl: ::std::os::raw::c_int,
    pub appendUsed: ::std::os::raw::c_int,
    pub resultSpace: [::std::os::raw::c_char; 201usize],
}
#[test]
fn bindgen_test_layout_Tcl_SavedResult() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_SavedResult>(),
        248usize,
        concat!("Size of: ", stringify!(Tcl_SavedResult))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_SavedResult>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_SavedResult))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_SavedResult>())).result as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_SavedResult),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_SavedResult>())).freeProc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_SavedResult),
            "::",
            stringify!(freeProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_SavedResult>())).objResultPtr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_SavedResult),
            "::",
            stringify!(objResultPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_SavedResult>())).appendResult as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_SavedResult),
            "::",
            stringify!(appendResult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_SavedResult>())).appendAvl as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_SavedResult),
            "::",
            stringify!(appendAvl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_SavedResult>())).appendUsed as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_SavedResult),
            "::",
            stringify!(appendUsed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_SavedResult>())).resultSpace as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_SavedResult),
            "::",
            stringify!(resultSpace)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_Namespace {
    pub name: *mut ::std::os::raw::c_char,
    pub fullName: *mut ::std::os::raw::c_char,
    pub clientData: ClientData,
    pub deleteProc: Tcl_NamespaceDeleteProc,
    pub parentPtr: *mut Tcl_Namespace,
}
#[test]
fn bindgen_test_layout_Tcl_Namespace() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_Namespace>(),
        40usize,
        concat!("Size of: ", stringify!(Tcl_Namespace))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_Namespace>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_Namespace))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Namespace>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Namespace),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Namespace>())).fullName as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Namespace),
            "::",
            stringify!(fullName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Namespace>())).clientData as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Namespace),
            "::",
            stringify!(clientData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Namespace>())).deleteProc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Namespace),
            "::",
            stringify!(deleteProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Namespace>())).parentPtr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Namespace),
            "::",
            stringify!(parentPtr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_CallFrame {
    pub nsPtr: *mut Tcl_Namespace,
    pub dummy1: ::std::os::raw::c_int,
    pub dummy2: ::std::os::raw::c_int,
    pub dummy3: *mut ::std::os::raw::c_void,
    pub dummy4: *mut ::std::os::raw::c_void,
    pub dummy5: *mut ::std::os::raw::c_void,
    pub dummy6: ::std::os::raw::c_int,
    pub dummy7: *mut ::std::os::raw::c_void,
    pub dummy8: *mut ::std::os::raw::c_void,
    pub dummy9: ::std::os::raw::c_int,
    pub dummy10: *mut ::std::os::raw::c_void,
    pub dummy11: *mut ::std::os::raw::c_void,
    pub dummy12: *mut ::std::os::raw::c_void,
    pub dummy13: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_Tcl_CallFrame() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_CallFrame>(),
        104usize,
        concat!("Size of: ", stringify!(Tcl_CallFrame))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_CallFrame>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_CallFrame))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_CallFrame>())).nsPtr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_CallFrame),
            "::",
            stringify!(nsPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_CallFrame>())).dummy1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_CallFrame),
            "::",
            stringify!(dummy1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_CallFrame>())).dummy2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_CallFrame),
            "::",
            stringify!(dummy2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_CallFrame>())).dummy3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_CallFrame),
            "::",
            stringify!(dummy3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_CallFrame>())).dummy4 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_CallFrame),
            "::",
            stringify!(dummy4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_CallFrame>())).dummy5 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_CallFrame),
            "::",
            stringify!(dummy5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_CallFrame>())).dummy6 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_CallFrame),
            "::",
            stringify!(dummy6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_CallFrame>())).dummy7 as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_CallFrame),
            "::",
            stringify!(dummy7)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_CallFrame>())).dummy8 as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_CallFrame),
            "::",
            stringify!(dummy8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_CallFrame>())).dummy9 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_CallFrame),
            "::",
            stringify!(dummy9)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_CallFrame>())).dummy10 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_CallFrame),
            "::",
            stringify!(dummy10)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_CallFrame>())).dummy11 as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_CallFrame),
            "::",
            stringify!(dummy11)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_CallFrame>())).dummy12 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_CallFrame),
            "::",
            stringify!(dummy12)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_CallFrame>())).dummy13 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_CallFrame),
            "::",
            stringify!(dummy13)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_CmdInfo {
    pub isNativeObjectProc: ::std::os::raw::c_int,
    pub objProc: Tcl_ObjCmdProc,
    pub objClientData: ClientData,
    pub proc_: Tcl_CmdProc,
    pub clientData: ClientData,
    pub deleteProc: Tcl_CmdDeleteProc,
    pub deleteData: ClientData,
    pub namespacePtr: *mut Tcl_Namespace,
}
#[test]
fn bindgen_test_layout_Tcl_CmdInfo() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_CmdInfo>(),
        64usize,
        concat!("Size of: ", stringify!(Tcl_CmdInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_CmdInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_CmdInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_CmdInfo>())).isNativeObjectProc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_CmdInfo),
            "::",
            stringify!(isNativeObjectProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_CmdInfo>())).objProc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_CmdInfo),
            "::",
            stringify!(objProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_CmdInfo>())).objClientData as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_CmdInfo),
            "::",
            stringify!(objClientData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_CmdInfo>())).proc_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_CmdInfo),
            "::",
            stringify!(proc_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_CmdInfo>())).clientData as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_CmdInfo),
            "::",
            stringify!(clientData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_CmdInfo>())).deleteProc as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_CmdInfo),
            "::",
            stringify!(deleteProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_CmdInfo>())).deleteData as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_CmdInfo),
            "::",
            stringify!(deleteData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_CmdInfo>())).namespacePtr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_CmdInfo),
            "::",
            stringify!(namespacePtr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_DString {
    pub string: *mut ::std::os::raw::c_char,
    pub length: ::std::os::raw::c_int,
    pub spaceAvl: ::std::os::raw::c_int,
    pub staticSpace: [::std::os::raw::c_char; 200usize],
}
#[test]
fn bindgen_test_layout_Tcl_DString() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_DString>(),
        216usize,
        concat!("Size of: ", stringify!(Tcl_DString))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_DString>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_DString))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_DString>())).string as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_DString),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_DString>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_DString),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_DString>())).spaceAvl as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_DString),
            "::",
            stringify!(spaceAvl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_DString>())).staticSpace as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_DString),
            "::",
            stringify!(staticSpace)
        )
    );
}
pub type Tcl_HashKeyProc = ::std::option::Option<
    unsafe extern "C" fn(
        tablePtr: *mut Tcl_HashTable,
        keyPtr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint,
>;
pub type Tcl_CompareHashKeysProc = ::std::option::Option<
    unsafe extern "C" fn(
        keyPtr: *mut ::std::os::raw::c_void,
        hPtr: *mut Tcl_HashEntry,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_AllocHashEntryProc = ::std::option::Option<
    unsafe extern "C" fn(
        tablePtr: *mut Tcl_HashTable,
        keyPtr: *mut ::std::os::raw::c_void,
    ) -> *mut Tcl_HashEntry,
>;
pub type Tcl_FreeHashEntryProc =
    ::std::option::Option<unsafe extern "C" fn(hPtr: *mut Tcl_HashEntry)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Tcl_HashEntry {
    pub nextPtr: *mut Tcl_HashEntry,
    pub tablePtr: *mut Tcl_HashTable,
    pub hash: *mut ::std::os::raw::c_void,
    pub clientData: ClientData,
    pub key: Tcl_HashEntry__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Tcl_HashEntry__bindgen_ty_1 {
    pub oneWordValue: *mut ::std::os::raw::c_char,
    pub objPtr: *mut Tcl_Obj,
    pub words: [::std::os::raw::c_int; 1usize],
    pub string: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout_Tcl_HashEntry__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_HashEntry__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(Tcl_HashEntry__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_HashEntry__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_HashEntry__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_HashEntry__bindgen_ty_1>())).oneWordValue as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashEntry__bindgen_ty_1),
            "::",
            stringify!(oneWordValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_HashEntry__bindgen_ty_1>())).objPtr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashEntry__bindgen_ty_1),
            "::",
            stringify!(objPtr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_HashEntry__bindgen_ty_1>())).words as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashEntry__bindgen_ty_1),
            "::",
            stringify!(words)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_HashEntry__bindgen_ty_1>())).string as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashEntry__bindgen_ty_1),
            "::",
            stringify!(string)
        )
    );
}
#[test]
fn bindgen_test_layout_Tcl_HashEntry() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_HashEntry>(),
        40usize,
        concat!("Size of: ", stringify!(Tcl_HashEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_HashEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_HashEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashEntry>())).nextPtr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashEntry),
            "::",
            stringify!(nextPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashEntry>())).tablePtr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashEntry),
            "::",
            stringify!(tablePtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashEntry>())).hash as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashEntry),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashEntry>())).clientData as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashEntry),
            "::",
            stringify!(clientData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashEntry>())).key as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashEntry),
            "::",
            stringify!(key)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_HashKeyType {
    pub version: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub hashKeyProc: Tcl_HashKeyProc,
    pub compareKeysProc: Tcl_CompareHashKeysProc,
    pub allocEntryProc: Tcl_AllocHashEntryProc,
    pub freeEntryProc: Tcl_FreeHashEntryProc,
}
#[test]
fn bindgen_test_layout_Tcl_HashKeyType() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_HashKeyType>(),
        40usize,
        concat!("Size of: ", stringify!(Tcl_HashKeyType))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_HashKeyType>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_HashKeyType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashKeyType>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashKeyType),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashKeyType>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashKeyType),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashKeyType>())).hashKeyProc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashKeyType),
            "::",
            stringify!(hashKeyProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashKeyType>())).compareKeysProc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashKeyType),
            "::",
            stringify!(compareKeysProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashKeyType>())).allocEntryProc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashKeyType),
            "::",
            stringify!(allocEntryProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashKeyType>())).freeEntryProc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashKeyType),
            "::",
            stringify!(freeEntryProc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_HashTable {
    pub buckets: *mut *mut Tcl_HashEntry,
    pub staticBuckets: [*mut Tcl_HashEntry; 4usize],
    pub numBuckets: ::std::os::raw::c_int,
    pub numEntries: ::std::os::raw::c_int,
    pub rebuildSize: ::std::os::raw::c_int,
    pub downShift: ::std::os::raw::c_int,
    pub mask: ::std::os::raw::c_int,
    pub keyType: ::std::os::raw::c_int,
    pub findProc: ::std::option::Option<
        unsafe extern "C" fn(
            tablePtr: *mut Tcl_HashTable,
            key: *const ::std::os::raw::c_char,
        ) -> *mut Tcl_HashEntry,
    >,
    pub createProc: ::std::option::Option<
        unsafe extern "C" fn(
            tablePtr: *mut Tcl_HashTable,
            key: *const ::std::os::raw::c_char,
            newPtr: *mut ::std::os::raw::c_int,
        ) -> *mut Tcl_HashEntry,
    >,
    pub typePtr: *const Tcl_HashKeyType,
}
#[test]
fn bindgen_test_layout_Tcl_HashTable() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_HashTable>(),
        88usize,
        concat!("Size of: ", stringify!(Tcl_HashTable))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_HashTable>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_HashTable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashTable>())).buckets as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashTable),
            "::",
            stringify!(buckets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashTable>())).staticBuckets as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashTable),
            "::",
            stringify!(staticBuckets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashTable>())).numBuckets as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashTable),
            "::",
            stringify!(numBuckets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashTable>())).numEntries as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashTable),
            "::",
            stringify!(numEntries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashTable>())).rebuildSize as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashTable),
            "::",
            stringify!(rebuildSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashTable>())).downShift as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashTable),
            "::",
            stringify!(downShift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashTable>())).mask as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashTable),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashTable>())).keyType as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashTable),
            "::",
            stringify!(keyType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashTable>())).findProc as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashTable),
            "::",
            stringify!(findProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashTable>())).createProc as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashTable),
            "::",
            stringify!(createProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashTable>())).typePtr as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashTable),
            "::",
            stringify!(typePtr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_HashSearch {
    pub tablePtr: *mut Tcl_HashTable,
    pub nextIndex: ::std::os::raw::c_int,
    pub nextEntryPtr: *mut Tcl_HashEntry,
}
#[test]
fn bindgen_test_layout_Tcl_HashSearch() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_HashSearch>(),
        24usize,
        concat!("Size of: ", stringify!(Tcl_HashSearch))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_HashSearch>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_HashSearch))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashSearch>())).tablePtr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashSearch),
            "::",
            stringify!(tablePtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashSearch>())).nextIndex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashSearch),
            "::",
            stringify!(nextIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_HashSearch>())).nextEntryPtr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_HashSearch),
            "::",
            stringify!(nextEntryPtr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_DictSearch {
    pub next: *mut ::std::os::raw::c_void,
    pub epoch: ::std::os::raw::c_int,
    pub dictionaryPtr: Tcl_Dict,
}
#[test]
fn bindgen_test_layout_Tcl_DictSearch() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_DictSearch>(),
        24usize,
        concat!("Size of: ", stringify!(Tcl_DictSearch))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_DictSearch>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_DictSearch))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_DictSearch>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_DictSearch),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_DictSearch>())).epoch as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_DictSearch),
            "::",
            stringify!(epoch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_DictSearch>())).dictionaryPtr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_DictSearch),
            "::",
            stringify!(dictionaryPtr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_Event {
    pub proc_: Tcl_EventProc,
    pub nextPtr: *mut Tcl_Event,
}
#[test]
fn bindgen_test_layout_Tcl_Event() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_Event>(),
        16usize,
        concat!("Size of: ", stringify!(Tcl_Event))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_Event>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_Event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Event>())).proc_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Event),
            "::",
            stringify!(proc_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Event>())).nextPtr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Event),
            "::",
            stringify!(nextPtr)
        )
    );
}
pub const Tcl_QueuePosition_TCL_QUEUE_TAIL: Tcl_QueuePosition = 0;
pub const Tcl_QueuePosition_TCL_QUEUE_HEAD: Tcl_QueuePosition = 1;
pub const Tcl_QueuePosition_TCL_QUEUE_MARK: Tcl_QueuePosition = 2;
pub type Tcl_QueuePosition = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_Time {
    pub sec: ::std::os::raw::c_long,
    pub usec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_Tcl_Time() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_Time>(),
        16usize,
        concat!("Size of: ", stringify!(Tcl_Time))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_Time>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_Time))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Time>())).sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Time),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Time>())).usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Time),
            "::",
            stringify!(usec)
        )
    );
}
pub type Tcl_SetTimerProc = ::std::option::Option<unsafe extern "C" fn(timePtr: *const Tcl_Time)>;
pub type Tcl_WaitForEventProc =
    ::std::option::Option<unsafe extern "C" fn(timePtr: *const Tcl_Time) -> ::std::os::raw::c_int>;
pub type Tcl_GetTimeProc =
    ::std::option::Option<unsafe extern "C" fn(timebuf: *mut Tcl_Time, clientData: ClientData)>;
pub type Tcl_ScaleTimeProc =
    ::std::option::Option<unsafe extern "C" fn(timebuf: *mut Tcl_Time, clientData: ClientData)>;
pub type Tcl_DriverBlockModeProc = ::std::option::Option<
    unsafe extern "C" fn(
        instanceData: ClientData,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_DriverCloseProc = ::std::option::Option<
    unsafe extern "C" fn(
        instanceData: ClientData,
        interp: *mut Tcl_Interp,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_DriverClose2Proc = ::std::option::Option<
    unsafe extern "C" fn(
        instanceData: ClientData,
        interp: *mut Tcl_Interp,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_DriverInputProc = ::std::option::Option<
    unsafe extern "C" fn(
        instanceData: ClientData,
        buf: *mut ::std::os::raw::c_char,
        toRead: ::std::os::raw::c_int,
        errorCodePtr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_DriverOutputProc = ::std::option::Option<
    unsafe extern "C" fn(
        instanceData: ClientData,
        buf: *const ::std::os::raw::c_char,
        toWrite: ::std::os::raw::c_int,
        errorCodePtr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_DriverSeekProc = ::std::option::Option<
    unsafe extern "C" fn(
        instanceData: ClientData,
        offset: ::std::os::raw::c_long,
        mode: ::std::os::raw::c_int,
        errorCodePtr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_DriverSetOptionProc = ::std::option::Option<
    unsafe extern "C" fn(
        instanceData: ClientData,
        interp: *mut Tcl_Interp,
        optionName: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_DriverGetOptionProc = ::std::option::Option<
    unsafe extern "C" fn(
        instanceData: ClientData,
        interp: *mut Tcl_Interp,
        optionName: *const ::std::os::raw::c_char,
        dsPtr: *mut Tcl_DString,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_DriverWatchProc = ::std::option::Option<
    unsafe extern "C" fn(instanceData: ClientData, mask: ::std::os::raw::c_int),
>;
pub type Tcl_DriverGetHandleProc = ::std::option::Option<
    unsafe extern "C" fn(
        instanceData: ClientData,
        direction: ::std::os::raw::c_int,
        handlePtr: *mut ClientData,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_DriverFlushProc =
    ::std::option::Option<unsafe extern "C" fn(instanceData: ClientData) -> ::std::os::raw::c_int>;
pub type Tcl_DriverHandlerProc = ::std::option::Option<
    unsafe extern "C" fn(
        instanceData: ClientData,
        interestMask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_DriverWideSeekProc = ::std::option::Option<
    unsafe extern "C" fn(
        instanceData: ClientData,
        offset: Tcl_WideInt,
        mode: ::std::os::raw::c_int,
        errorCodePtr: *mut ::std::os::raw::c_int,
    ) -> Tcl_WideInt,
>;
pub type Tcl_DriverThreadActionProc = ::std::option::Option<
    unsafe extern "C" fn(instanceData: ClientData, action: ::std::os::raw::c_int),
>;
pub type Tcl_DriverTruncateProc = ::std::option::Option<
    unsafe extern "C" fn(instanceData: ClientData, length: Tcl_WideInt) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_ChannelType {
    pub typeName: *const ::std::os::raw::c_char,
    pub version: Tcl_ChannelTypeVersion,
    pub closeProc: Tcl_DriverCloseProc,
    pub inputProc: Tcl_DriverInputProc,
    pub outputProc: Tcl_DriverOutputProc,
    pub seekProc: Tcl_DriverSeekProc,
    pub setOptionProc: Tcl_DriverSetOptionProc,
    pub getOptionProc: Tcl_DriverGetOptionProc,
    pub watchProc: Tcl_DriverWatchProc,
    pub getHandleProc: Tcl_DriverGetHandleProc,
    pub close2Proc: Tcl_DriverClose2Proc,
    pub blockModeProc: Tcl_DriverBlockModeProc,
    pub flushProc: Tcl_DriverFlushProc,
    pub handlerProc: Tcl_DriverHandlerProc,
    pub wideSeekProc: Tcl_DriverWideSeekProc,
    pub threadActionProc: Tcl_DriverThreadActionProc,
    pub truncateProc: Tcl_DriverTruncateProc,
}
#[test]
fn bindgen_test_layout_Tcl_ChannelType() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_ChannelType>(),
        136usize,
        concat!("Size of: ", stringify!(Tcl_ChannelType))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_ChannelType>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_ChannelType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ChannelType>())).typeName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ChannelType),
            "::",
            stringify!(typeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ChannelType>())).version as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ChannelType),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ChannelType>())).closeProc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ChannelType),
            "::",
            stringify!(closeProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ChannelType>())).inputProc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ChannelType),
            "::",
            stringify!(inputProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ChannelType>())).outputProc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ChannelType),
            "::",
            stringify!(outputProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ChannelType>())).seekProc as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ChannelType),
            "::",
            stringify!(seekProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ChannelType>())).setOptionProc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ChannelType),
            "::",
            stringify!(setOptionProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ChannelType>())).getOptionProc as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ChannelType),
            "::",
            stringify!(getOptionProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ChannelType>())).watchProc as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ChannelType),
            "::",
            stringify!(watchProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ChannelType>())).getHandleProc as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ChannelType),
            "::",
            stringify!(getHandleProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ChannelType>())).close2Proc as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ChannelType),
            "::",
            stringify!(close2Proc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ChannelType>())).blockModeProc as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ChannelType),
            "::",
            stringify!(blockModeProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ChannelType>())).flushProc as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ChannelType),
            "::",
            stringify!(flushProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ChannelType>())).handlerProc as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ChannelType),
            "::",
            stringify!(handlerProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ChannelType>())).wideSeekProc as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ChannelType),
            "::",
            stringify!(wideSeekProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_ChannelType>())).threadActionProc as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ChannelType),
            "::",
            stringify!(threadActionProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ChannelType>())).truncateProc as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ChannelType),
            "::",
            stringify!(truncateProc)
        )
    );
}
pub const Tcl_PathType_TCL_PATH_ABSOLUTE: Tcl_PathType = 0;
pub const Tcl_PathType_TCL_PATH_RELATIVE: Tcl_PathType = 1;
pub const Tcl_PathType_TCL_PATH_VOLUME_RELATIVE: Tcl_PathType = 2;
pub type Tcl_PathType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_GlobTypeData {
    pub type_: ::std::os::raw::c_int,
    pub perm: ::std::os::raw::c_int,
    pub macType: *mut Tcl_Obj,
    pub macCreator: *mut Tcl_Obj,
}
#[test]
fn bindgen_test_layout_Tcl_GlobTypeData() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_GlobTypeData>(),
        24usize,
        concat!("Size of: ", stringify!(Tcl_GlobTypeData))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_GlobTypeData>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_GlobTypeData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_GlobTypeData>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_GlobTypeData),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_GlobTypeData>())).perm as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_GlobTypeData),
            "::",
            stringify!(perm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_GlobTypeData>())).macType as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_GlobTypeData),
            "::",
            stringify!(macType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_GlobTypeData>())).macCreator as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_GlobTypeData),
            "::",
            stringify!(macCreator)
        )
    );
}
pub type Tcl_FSStatProc = ::std::option::Option<
    unsafe extern "C" fn(pathPtr: *mut Tcl_Obj, buf: *mut Tcl_StatBuf) -> ::std::os::raw::c_int,
>;
pub type Tcl_FSAccessProc = ::std::option::Option<
    unsafe extern "C" fn(
        pathPtr: *mut Tcl_Obj,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_FSOpenFileChannelProc = ::std::option::Option<
    unsafe extern "C" fn(
        interp: *mut Tcl_Interp,
        pathPtr: *mut Tcl_Obj,
        mode: ::std::os::raw::c_int,
        permissions: ::std::os::raw::c_int,
    ) -> Tcl_Channel,
>;
pub type Tcl_FSMatchInDirectoryProc = ::std::option::Option<
    unsafe extern "C" fn(
        interp: *mut Tcl_Interp,
        result: *mut Tcl_Obj,
        pathPtr: *mut Tcl_Obj,
        pattern: *const ::std::os::raw::c_char,
        types: *mut Tcl_GlobTypeData,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_FSGetCwdProc =
    ::std::option::Option<unsafe extern "C" fn(interp: *mut Tcl_Interp) -> *mut Tcl_Obj>;
pub type Tcl_FSChdirProc =
    ::std::option::Option<unsafe extern "C" fn(pathPtr: *mut Tcl_Obj) -> ::std::os::raw::c_int>;
pub type Tcl_FSLstatProc = ::std::option::Option<
    unsafe extern "C" fn(pathPtr: *mut Tcl_Obj, buf: *mut Tcl_StatBuf) -> ::std::os::raw::c_int,
>;
pub type Tcl_FSCreateDirectoryProc =
    ::std::option::Option<unsafe extern "C" fn(pathPtr: *mut Tcl_Obj) -> ::std::os::raw::c_int>;
pub type Tcl_FSDeleteFileProc =
    ::std::option::Option<unsafe extern "C" fn(pathPtr: *mut Tcl_Obj) -> ::std::os::raw::c_int>;
pub type Tcl_FSCopyDirectoryProc = ::std::option::Option<
    unsafe extern "C" fn(
        srcPathPtr: *mut Tcl_Obj,
        destPathPtr: *mut Tcl_Obj,
        errorPtr: *mut *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_FSCopyFileProc = ::std::option::Option<
    unsafe extern "C" fn(
        srcPathPtr: *mut Tcl_Obj,
        destPathPtr: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_FSRemoveDirectoryProc = ::std::option::Option<
    unsafe extern "C" fn(
        pathPtr: *mut Tcl_Obj,
        recursive: ::std::os::raw::c_int,
        errorPtr: *mut *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_FSRenameFileProc = ::std::option::Option<
    unsafe extern "C" fn(
        srcPathPtr: *mut Tcl_Obj,
        destPathPtr: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_FSUnloadFileProc =
    ::std::option::Option<unsafe extern "C" fn(loadHandle: Tcl_LoadHandle)>;
pub type Tcl_FSListVolumesProc = ::std::option::Option<unsafe extern "C" fn() -> *mut Tcl_Obj>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utimbuf {
    _unused: [u8; 0],
}
pub type Tcl_FSUtimeProc = ::std::option::Option<
    unsafe extern "C" fn(pathPtr: *mut Tcl_Obj, tval: *mut utimbuf) -> ::std::os::raw::c_int,
>;
pub type Tcl_FSNormalizePathProc = ::std::option::Option<
    unsafe extern "C" fn(
        interp: *mut Tcl_Interp,
        pathPtr: *mut Tcl_Obj,
        nextCheckpoint: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_FSFileAttrsGetProc = ::std::option::Option<
    unsafe extern "C" fn(
        interp: *mut Tcl_Interp,
        index: ::std::os::raw::c_int,
        pathPtr: *mut Tcl_Obj,
        objPtrRef: *mut *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_FSFileAttrStringsProc = ::std::option::Option<
    unsafe extern "C" fn(
        pathPtr: *mut Tcl_Obj,
        objPtrRef: *mut *mut Tcl_Obj,
    ) -> *const *const ::std::os::raw::c_char,
>;
pub type Tcl_FSFileAttrsSetProc = ::std::option::Option<
    unsafe extern "C" fn(
        interp: *mut Tcl_Interp,
        index: ::std::os::raw::c_int,
        pathPtr: *mut Tcl_Obj,
        objPtr: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_FSLinkProc = ::std::option::Option<
    unsafe extern "C" fn(
        pathPtr: *mut Tcl_Obj,
        toPtr: *mut Tcl_Obj,
        linkType: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj,
>;
pub type Tcl_FSLoadFileProc = ::std::option::Option<
    unsafe extern "C" fn(
        interp: *mut Tcl_Interp,
        pathPtr: *mut Tcl_Obj,
        handlePtr: *mut Tcl_LoadHandle,
        unloadProcPtr: *mut Tcl_FSUnloadFileProc,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_FSPathInFilesystemProc = ::std::option::Option<
    unsafe extern "C" fn(
        pathPtr: *mut Tcl_Obj,
        clientDataPtr: *mut ClientData,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_FSFilesystemPathTypeProc =
    ::std::option::Option<unsafe extern "C" fn(pathPtr: *mut Tcl_Obj) -> *mut Tcl_Obj>;
pub type Tcl_FSFilesystemSeparatorProc =
    ::std::option::Option<unsafe extern "C" fn(pathPtr: *mut Tcl_Obj) -> *mut Tcl_Obj>;
pub type Tcl_FSFreeInternalRepProc =
    ::std::option::Option<unsafe extern "C" fn(clientData: ClientData)>;
pub type Tcl_FSDupInternalRepProc =
    ::std::option::Option<unsafe extern "C" fn(clientData: ClientData) -> ClientData>;
pub type Tcl_FSInternalToNormalizedProc =
    ::std::option::Option<unsafe extern "C" fn(clientData: ClientData) -> *mut Tcl_Obj>;
pub type Tcl_FSCreateInternalRepProc =
    ::std::option::Option<unsafe extern "C" fn(pathPtr: *mut Tcl_Obj) -> ClientData>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_FSVersion_ {
    _unused: [u8; 0],
}
pub type Tcl_FSVersion = *mut Tcl_FSVersion_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_Filesystem {
    pub typeName: *const ::std::os::raw::c_char,
    pub structureLength: ::std::os::raw::c_int,
    pub version: Tcl_FSVersion,
    pub pathInFilesystemProc: Tcl_FSPathInFilesystemProc,
    pub dupInternalRepProc: Tcl_FSDupInternalRepProc,
    pub freeInternalRepProc: Tcl_FSFreeInternalRepProc,
    pub internalToNormalizedProc: Tcl_FSInternalToNormalizedProc,
    pub createInternalRepProc: Tcl_FSCreateInternalRepProc,
    pub normalizePathProc: Tcl_FSNormalizePathProc,
    pub filesystemPathTypeProc: Tcl_FSFilesystemPathTypeProc,
    pub filesystemSeparatorProc: Tcl_FSFilesystemSeparatorProc,
    pub statProc: Tcl_FSStatProc,
    pub accessProc: Tcl_FSAccessProc,
    pub openFileChannelProc: Tcl_FSOpenFileChannelProc,
    pub matchInDirectoryProc: Tcl_FSMatchInDirectoryProc,
    pub utimeProc: Tcl_FSUtimeProc,
    pub linkProc: Tcl_FSLinkProc,
    pub listVolumesProc: Tcl_FSListVolumesProc,
    pub fileAttrStringsProc: Tcl_FSFileAttrStringsProc,
    pub fileAttrsGetProc: Tcl_FSFileAttrsGetProc,
    pub fileAttrsSetProc: Tcl_FSFileAttrsSetProc,
    pub createDirectoryProc: Tcl_FSCreateDirectoryProc,
    pub removeDirectoryProc: Tcl_FSRemoveDirectoryProc,
    pub deleteFileProc: Tcl_FSDeleteFileProc,
    pub copyFileProc: Tcl_FSCopyFileProc,
    pub renameFileProc: Tcl_FSRenameFileProc,
    pub copyDirectoryProc: Tcl_FSCopyDirectoryProc,
    pub lstatProc: Tcl_FSLstatProc,
    pub loadFileProc: Tcl_FSLoadFileProc,
    pub getCwdProc: Tcl_FSGetCwdProc,
    pub chdirProc: Tcl_FSChdirProc,
}
#[test]
fn bindgen_test_layout_Tcl_Filesystem() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_Filesystem>(),
        248usize,
        concat!("Size of: ", stringify!(Tcl_Filesystem))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_Filesystem>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_Filesystem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Filesystem>())).typeName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(typeName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Filesystem>())).structureLength as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(structureLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Filesystem>())).version as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_Filesystem>())).pathInFilesystemProc as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(pathInFilesystemProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_Filesystem>())).dupInternalRepProc as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(dupInternalRepProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_Filesystem>())).freeInternalRepProc as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(freeInternalRepProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_Filesystem>())).internalToNormalizedProc as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(internalToNormalizedProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_Filesystem>())).createInternalRepProc as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(createInternalRepProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_Filesystem>())).normalizePathProc as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(normalizePathProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_Filesystem>())).filesystemPathTypeProc as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(filesystemPathTypeProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_Filesystem>())).filesystemSeparatorProc as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(filesystemSeparatorProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Filesystem>())).statProc as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(statProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Filesystem>())).accessProc as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(accessProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_Filesystem>())).openFileChannelProc as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(openFileChannelProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_Filesystem>())).matchInDirectoryProc as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(matchInDirectoryProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Filesystem>())).utimeProc as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(utimeProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Filesystem>())).linkProc as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(linkProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Filesystem>())).listVolumesProc as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(listVolumesProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_Filesystem>())).fileAttrStringsProc as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(fileAttrStringsProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Filesystem>())).fileAttrsGetProc as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(fileAttrsGetProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Filesystem>())).fileAttrsSetProc as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(fileAttrsSetProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_Filesystem>())).createDirectoryProc as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(createDirectoryProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_Filesystem>())).removeDirectoryProc as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(removeDirectoryProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Filesystem>())).deleteFileProc as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(deleteFileProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Filesystem>())).copyFileProc as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(copyFileProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Filesystem>())).renameFileProc as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(renameFileProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_Filesystem>())).copyDirectoryProc as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(copyDirectoryProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Filesystem>())).lstatProc as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(lstatProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Filesystem>())).loadFileProc as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(loadFileProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Filesystem>())).getCwdProc as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(getCwdProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Filesystem>())).chdirProc as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Filesystem),
            "::",
            stringify!(chdirProc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_NotifierProcs {
    pub setTimerProc: Tcl_SetTimerProc,
    pub waitForEventProc: Tcl_WaitForEventProc,
    pub createFileHandlerProc: Tcl_CreateFileHandlerProc,
    pub deleteFileHandlerProc: Tcl_DeleteFileHandlerProc,
    pub initNotifierProc: Tcl_InitNotifierProc,
    pub finalizeNotifierProc: Tcl_FinalizeNotifierProc,
    pub alertNotifierProc: Tcl_AlertNotifierProc,
    pub serviceModeHookProc: Tcl_ServiceModeHookProc,
}
#[test]
fn bindgen_test_layout_Tcl_NotifierProcs() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_NotifierProcs>(),
        64usize,
        concat!("Size of: ", stringify!(Tcl_NotifierProcs))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_NotifierProcs>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_NotifierProcs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_NotifierProcs>())).setTimerProc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_NotifierProcs),
            "::",
            stringify!(setTimerProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_NotifierProcs>())).waitForEventProc as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_NotifierProcs),
            "::",
            stringify!(waitForEventProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_NotifierProcs>())).createFileHandlerProc as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_NotifierProcs),
            "::",
            stringify!(createFileHandlerProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_NotifierProcs>())).deleteFileHandlerProc as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_NotifierProcs),
            "::",
            stringify!(deleteFileHandlerProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_NotifierProcs>())).initNotifierProc as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_NotifierProcs),
            "::",
            stringify!(initNotifierProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_NotifierProcs>())).finalizeNotifierProc as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_NotifierProcs),
            "::",
            stringify!(finalizeNotifierProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_NotifierProcs>())).alertNotifierProc as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_NotifierProcs),
            "::",
            stringify!(alertNotifierProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Tcl_NotifierProcs>())).serviceModeHookProc as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_NotifierProcs),
            "::",
            stringify!(serviceModeHookProc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_Token {
    pub type_: ::std::os::raw::c_int,
    pub start: *const ::std::os::raw::c_char,
    pub size: ::std::os::raw::c_int,
    pub numComponents: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Tcl_Token() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_Token>(),
        24usize,
        concat!("Size of: ", stringify!(Tcl_Token))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_Token>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_Token))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Token>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Token),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Token>())).start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Token),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Token>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Token),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Token>())).numComponents as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Token),
            "::",
            stringify!(numComponents)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_Parse {
    pub commentStart: *const ::std::os::raw::c_char,
    pub commentSize: ::std::os::raw::c_int,
    pub commandStart: *const ::std::os::raw::c_char,
    pub commandSize: ::std::os::raw::c_int,
    pub numWords: ::std::os::raw::c_int,
    pub tokenPtr: *mut Tcl_Token,
    pub numTokens: ::std::os::raw::c_int,
    pub tokensAvailable: ::std::os::raw::c_int,
    pub errorType: ::std::os::raw::c_int,
    pub string: *const ::std::os::raw::c_char,
    pub end: *const ::std::os::raw::c_char,
    pub interp: *mut Tcl_Interp,
    pub term: *const ::std::os::raw::c_char,
    pub incomplete: ::std::os::raw::c_int,
    pub staticTokens: [Tcl_Token; 20usize],
}
#[test]
fn bindgen_test_layout_Tcl_Parse() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_Parse>(),
        576usize,
        concat!("Size of: ", stringify!(Tcl_Parse))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_Parse>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_Parse))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Parse>())).commentStart as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Parse),
            "::",
            stringify!(commentStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Parse>())).commentSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Parse),
            "::",
            stringify!(commentSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Parse>())).commandStart as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Parse),
            "::",
            stringify!(commandStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Parse>())).commandSize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Parse),
            "::",
            stringify!(commandSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Parse>())).numWords as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Parse),
            "::",
            stringify!(numWords)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Parse>())).tokenPtr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Parse),
            "::",
            stringify!(tokenPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Parse>())).numTokens as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Parse),
            "::",
            stringify!(numTokens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Parse>())).tokensAvailable as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Parse),
            "::",
            stringify!(tokensAvailable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Parse>())).errorType as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Parse),
            "::",
            stringify!(errorType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Parse>())).string as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Parse),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Parse>())).end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Parse),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Parse>())).interp as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Parse),
            "::",
            stringify!(interp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Parse>())).term as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Parse),
            "::",
            stringify!(term)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Parse>())).incomplete as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Parse),
            "::",
            stringify!(incomplete)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Parse>())).staticTokens as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Parse),
            "::",
            stringify!(staticTokens)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_EncodingType {
    pub encodingName: *const ::std::os::raw::c_char,
    pub toUtfProc: Tcl_EncodingConvertProc,
    pub fromUtfProc: Tcl_EncodingConvertProc,
    pub freeProc: Tcl_EncodingFreeProc,
    pub clientData: ClientData,
    pub nullSize: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Tcl_EncodingType() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_EncodingType>(),
        48usize,
        concat!("Size of: ", stringify!(Tcl_EncodingType))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_EncodingType>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_EncodingType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_EncodingType>())).encodingName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_EncodingType),
            "::",
            stringify!(encodingName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_EncodingType>())).toUtfProc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_EncodingType),
            "::",
            stringify!(toUtfProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_EncodingType>())).fromUtfProc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_EncodingType),
            "::",
            stringify!(fromUtfProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_EncodingType>())).freeProc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_EncodingType),
            "::",
            stringify!(freeProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_EncodingType>())).clientData as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_EncodingType),
            "::",
            stringify!(clientData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_EncodingType>())).nullSize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_EncodingType),
            "::",
            stringify!(nullSize)
        )
    );
}
pub type Tcl_UniChar = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_Config {
    pub key: *const ::std::os::raw::c_char,
    pub value: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_Tcl_Config() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_Config>(),
        16usize,
        concat!("Size of: ", stringify!(Tcl_Config))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_Config>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_Config))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Config>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Config),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_Config>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_Config),
            "::",
            stringify!(value)
        )
    );
}
pub type Tcl_LimitHandlerProc =
    ::std::option::Option<unsafe extern "C" fn(clientData: ClientData, interp: *mut Tcl_Interp)>;
pub type Tcl_LimitHandlerDeleteProc =
    ::std::option::Option<unsafe extern "C" fn(clientData: ClientData)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mp_int {
    _unused: [u8; 0],
}
pub type mp_digit = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tcl_ArgvInfo {
    pub type_: ::std::os::raw::c_int,
    pub keyStr: *const ::std::os::raw::c_char,
    pub srcPtr: *mut ::std::os::raw::c_void,
    pub dstPtr: *mut ::std::os::raw::c_void,
    pub helpStr: *const ::std::os::raw::c_char,
    pub clientData: ClientData,
}
#[test]
fn bindgen_test_layout_Tcl_ArgvInfo() {
    assert_eq!(
        ::std::mem::size_of::<Tcl_ArgvInfo>(),
        48usize,
        concat!("Size of: ", stringify!(Tcl_ArgvInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<Tcl_ArgvInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(Tcl_ArgvInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ArgvInfo>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ArgvInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ArgvInfo>())).keyStr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ArgvInfo),
            "::",
            stringify!(keyStr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ArgvInfo>())).srcPtr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ArgvInfo),
            "::",
            stringify!(srcPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ArgvInfo>())).dstPtr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ArgvInfo),
            "::",
            stringify!(dstPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ArgvInfo>())).helpStr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ArgvInfo),
            "::",
            stringify!(helpStr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Tcl_ArgvInfo>())).clientData as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Tcl_ArgvInfo),
            "::",
            stringify!(clientData)
        )
    );
}
pub type Tcl_ArgvFuncProc = ::std::option::Option<
    unsafe extern "C" fn(
        clientData: ClientData,
        objPtr: *mut Tcl_Obj,
        dstPtr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_ArgvGenFuncProc = ::std::option::Option<
    unsafe extern "C" fn(
        clientData: ClientData,
        interp: *mut Tcl_Interp,
        objc: ::std::os::raw::c_int,
        objv: *const *mut Tcl_Obj,
        dstPtr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type Tcl_NRPostProc = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ClientData,
        interp: *mut Tcl_Interp,
        result: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn Tcl_InitStubs(
        interp: *mut Tcl_Interp,
        version: *const ::std::os::raw::c_char,
        exact: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TclTomMathInitializeStubs(
        interp: *mut Tcl_Interp,
        version: *const ::std::os::raw::c_char,
        epoch: ::std::os::raw::c_int,
        revision: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_MainEx(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        appInitProc: Tcl_AppInitProc,
        interp: *mut Tcl_Interp,
    );
}
extern "C" {
    pub fn Tcl_PkgInitStubsCheck(
        interp: *mut Tcl_Interp,
        version: *const ::std::os::raw::c_char,
        exact: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_GetMemoryInfo(dsPtr: *mut Tcl_DString);
}
extern "C" {
    pub fn Tcl_PkgProvideEx(
        interp: *mut Tcl_Interp,
        name: *const ::std::os::raw::c_char,
        version: *const ::std::os::raw::c_char,
        clientData: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_PkgRequireEx(
        interp: *mut Tcl_Interp,
        name: *const ::std::os::raw::c_char,
        version: *const ::std::os::raw::c_char,
        exact: ::std::os::raw::c_int,
        clientDataPtr: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_Panic(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn Tcl_Alloc(size: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_Free(ptr: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Tcl_Realloc(
        ptr: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_DbCkalloc(
        size: ::std::os::raw::c_uint,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_DbCkfree(
        ptr: *mut ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Tcl_DbCkrealloc(
        ptr: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_uint,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_CreateFileHandler(
        fd: ::std::os::raw::c_int,
        mask: ::std::os::raw::c_int,
        proc_: Tcl_FileProc,
        clientData: ClientData,
    );
}
extern "C" {
    pub fn Tcl_DeleteFileHandler(fd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Tcl_SetTimer(timePtr: *const Tcl_Time);
}
extern "C" {
    pub fn Tcl_Sleep(ms: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Tcl_WaitForEvent(timePtr: *const Tcl_Time) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_AppendAllObjTypes(
        interp: *mut Tcl_Interp,
        objPtr: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_AppendStringsToObj(objPtr: *mut Tcl_Obj, ...);
}
extern "C" {
    pub fn Tcl_AppendToObj(
        objPtr: *mut Tcl_Obj,
        bytes: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Tcl_ConcatObj(objc: ::std::os::raw::c_int, objv: *const *mut Tcl_Obj) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_ConvertToType(
        interp: *mut Tcl_Interp,
        objPtr: *mut Tcl_Obj,
        typePtr: *const Tcl_ObjType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_DbDecrRefCount(
        objPtr: *mut Tcl_Obj,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Tcl_DbIncrRefCount(
        objPtr: *mut Tcl_Obj,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Tcl_DbIsShared(
        objPtr: *mut Tcl_Obj,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_DbNewBooleanObj(
        boolValue: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_DbNewByteArrayObj(
        bytes: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_DbNewDoubleObj(
        doubleValue: f64,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_DbNewListObj(
        objc: ::std::os::raw::c_int,
        objv: *const *mut Tcl_Obj,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_DbNewLongObj(
        longValue: ::std::os::raw::c_long,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_DbNewObj(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_DbNewStringObj(
        bytes: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_DuplicateObj(objPtr: *mut Tcl_Obj) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn TclFreeObj(objPtr: *mut Tcl_Obj);
}
extern "C" {
    pub fn Tcl_GetBoolean(
        interp: *mut Tcl_Interp,
        src: *const ::std::os::raw::c_char,
        boolPtr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetBooleanFromObj(
        interp: *mut Tcl_Interp,
        objPtr: *mut Tcl_Obj,
        boolPtr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetByteArrayFromObj(
        objPtr: *mut Tcl_Obj,
        lengthPtr: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Tcl_GetDouble(
        interp: *mut Tcl_Interp,
        src: *const ::std::os::raw::c_char,
        doublePtr: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetDoubleFromObj(
        interp: *mut Tcl_Interp,
        objPtr: *mut Tcl_Obj,
        doublePtr: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetIndexFromObj(
        interp: *mut Tcl_Interp,
        objPtr: *mut Tcl_Obj,
        tablePtr: *const *const ::std::os::raw::c_char,
        msg: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        indexPtr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetInt(
        interp: *mut Tcl_Interp,
        src: *const ::std::os::raw::c_char,
        intPtr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetIntFromObj(
        interp: *mut Tcl_Interp,
        objPtr: *mut Tcl_Obj,
        intPtr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetLongFromObj(
        interp: *mut Tcl_Interp,
        objPtr: *mut Tcl_Obj,
        longPtr: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetObjType(typeName: *const ::std::os::raw::c_char) -> *const Tcl_ObjType;
}
extern "C" {
    pub fn Tcl_GetStringFromObj(
        objPtr: *mut Tcl_Obj,
        lengthPtr: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_InvalidateStringRep(objPtr: *mut Tcl_Obj);
}
extern "C" {
    pub fn Tcl_ListObjAppendList(
        interp: *mut Tcl_Interp,
        listPtr: *mut Tcl_Obj,
        elemListPtr: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ListObjAppendElement(
        interp: *mut Tcl_Interp,
        listPtr: *mut Tcl_Obj,
        objPtr: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ListObjGetElements(
        interp: *mut Tcl_Interp,
        listPtr: *mut Tcl_Obj,
        objcPtr: *mut ::std::os::raw::c_int,
        objvPtr: *mut *mut *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ListObjIndex(
        interp: *mut Tcl_Interp,
        listPtr: *mut Tcl_Obj,
        index: ::std::os::raw::c_int,
        objPtrPtr: *mut *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ListObjLength(
        interp: *mut Tcl_Interp,
        listPtr: *mut Tcl_Obj,
        lengthPtr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ListObjReplace(
        interp: *mut Tcl_Interp,
        listPtr: *mut Tcl_Obj,
        first: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
        objc: ::std::os::raw::c_int,
        objv: *const *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_NewBooleanObj(boolValue: ::std::os::raw::c_int) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_NewByteArrayObj(
        bytes: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_NewDoubleObj(doubleValue: f64) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_NewIntObj(intValue: ::std::os::raw::c_int) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_NewListObj(objc: ::std::os::raw::c_int, objv: *const *mut Tcl_Obj) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_NewLongObj(longValue: ::std::os::raw::c_long) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_NewObj() -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_NewStringObj(
        bytes: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_SetBooleanObj(objPtr: *mut Tcl_Obj, boolValue: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Tcl_SetByteArrayLength(
        objPtr: *mut Tcl_Obj,
        length: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn Tcl_SetByteArrayObj(
        objPtr: *mut Tcl_Obj,
        bytes: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Tcl_SetDoubleObj(objPtr: *mut Tcl_Obj, doubleValue: f64);
}
extern "C" {
    pub fn Tcl_SetIntObj(objPtr: *mut Tcl_Obj, intValue: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Tcl_SetListObj(
        objPtr: *mut Tcl_Obj,
        objc: ::std::os::raw::c_int,
        objv: *const *mut Tcl_Obj,
    );
}
extern "C" {
    pub fn Tcl_SetLongObj(objPtr: *mut Tcl_Obj, longValue: ::std::os::raw::c_long);
}
extern "C" {
    pub fn Tcl_SetObjLength(objPtr: *mut Tcl_Obj, length: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Tcl_SetStringObj(
        objPtr: *mut Tcl_Obj,
        bytes: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Tcl_AddErrorInfo(interp: *mut Tcl_Interp, message: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Tcl_AddObjErrorInfo(
        interp: *mut Tcl_Interp,
        message: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Tcl_AllowExceptions(interp: *mut Tcl_Interp);
}
extern "C" {
    pub fn Tcl_AppendElement(interp: *mut Tcl_Interp, element: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Tcl_AppendResult(interp: *mut Tcl_Interp, ...);
}
extern "C" {
    pub fn Tcl_AsyncCreate(proc_: Tcl_AsyncProc, clientData: ClientData) -> Tcl_AsyncHandler;
}
extern "C" {
    pub fn Tcl_AsyncDelete(async_: Tcl_AsyncHandler);
}
extern "C" {
    pub fn Tcl_AsyncInvoke(
        interp: *mut Tcl_Interp,
        code: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_AsyncMark(async_: Tcl_AsyncHandler);
}
extern "C" {
    pub fn Tcl_AsyncReady() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_BackgroundError(interp: *mut Tcl_Interp);
}
extern "C" {
    pub fn Tcl_Backslash(
        src: *const ::std::os::raw::c_char,
        readPtr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_BadChannelOption(
        interp: *mut Tcl_Interp,
        optionName: *const ::std::os::raw::c_char,
        optionList: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_CallWhenDeleted(
        interp: *mut Tcl_Interp,
        proc_: Tcl_InterpDeleteProc,
        clientData: ClientData,
    );
}
extern "C" {
    pub fn Tcl_CancelIdleCall(idleProc: Tcl_IdleProc, clientData: ClientData);
}
extern "C" {
    pub fn Tcl_Close(interp: *mut Tcl_Interp, chan: Tcl_Channel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_CommandComplete(cmd: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_Concat(
        argc: ::std::os::raw::c_int,
        argv: *const *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_ConvertElement(
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ConvertCountedElement(
        src: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_CreateAlias(
        childInterp: *mut Tcl_Interp,
        childCmd: *const ::std::os::raw::c_char,
        target: *mut Tcl_Interp,
        targetCmd: *const ::std::os::raw::c_char,
        argc: ::std::os::raw::c_int,
        argv: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_CreateAliasObj(
        childInterp: *mut Tcl_Interp,
        childCmd: *const ::std::os::raw::c_char,
        target: *mut Tcl_Interp,
        targetCmd: *const ::std::os::raw::c_char,
        objc: ::std::os::raw::c_int,
        objv: *const *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_CreateChannel(
        typePtr: *const Tcl_ChannelType,
        chanName: *const ::std::os::raw::c_char,
        instanceData: ClientData,
        mask: ::std::os::raw::c_int,
    ) -> Tcl_Channel;
}
extern "C" {
    pub fn Tcl_CreateChannelHandler(
        chan: Tcl_Channel,
        mask: ::std::os::raw::c_int,
        proc_: Tcl_ChannelProc,
        clientData: ClientData,
    );
}
extern "C" {
    pub fn Tcl_CreateCloseHandler(chan: Tcl_Channel, proc_: Tcl_CloseProc, clientData: ClientData);
}
extern "C" {
    pub fn Tcl_CreateCommand(
        interp: *mut Tcl_Interp,
        cmdName: *const ::std::os::raw::c_char,
        proc_: Tcl_CmdProc,
        clientData: ClientData,
        deleteProc: Tcl_CmdDeleteProc,
    ) -> Tcl_Command;
}
extern "C" {
    pub fn Tcl_CreateEventSource(
        setupProc: Tcl_EventSetupProc,
        checkProc: Tcl_EventCheckProc,
        clientData: ClientData,
    );
}
extern "C" {
    pub fn Tcl_CreateExitHandler(proc_: Tcl_ExitProc, clientData: ClientData);
}
extern "C" {
    pub fn Tcl_CreateInterp() -> *mut Tcl_Interp;
}
extern "C" {
    pub fn Tcl_CreateMathFunc(
        interp: *mut Tcl_Interp,
        name: *const ::std::os::raw::c_char,
        numArgs: ::std::os::raw::c_int,
        argTypes: *mut Tcl_ValueType,
        proc_: Tcl_MathProc,
        clientData: ClientData,
    );
}
extern "C" {
    pub fn Tcl_CreateObjCommand(
        interp: *mut Tcl_Interp,
        cmdName: *const ::std::os::raw::c_char,
        proc_: Tcl_ObjCmdProc,
        clientData: ClientData,
        deleteProc: Tcl_CmdDeleteProc,
    ) -> Tcl_Command;
}
extern "C" {
    pub fn Tcl_CreateSlave(
        interp: *mut Tcl_Interp,
        name: *const ::std::os::raw::c_char,
        isSafe: ::std::os::raw::c_int,
    ) -> *mut Tcl_Interp;
}
extern "C" {
    pub fn Tcl_CreateTimerHandler(
        milliseconds: ::std::os::raw::c_int,
        proc_: Tcl_TimerProc,
        clientData: ClientData,
    ) -> Tcl_TimerToken;
}
extern "C" {
    pub fn Tcl_CreateTrace(
        interp: *mut Tcl_Interp,
        level: ::std::os::raw::c_int,
        proc_: Tcl_CmdTraceProc,
        clientData: ClientData,
    ) -> Tcl_Trace;
}
extern "C" {
    pub fn Tcl_DeleteAssocData(interp: *mut Tcl_Interp, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Tcl_DeleteChannelHandler(
        chan: Tcl_Channel,
        proc_: Tcl_ChannelProc,
        clientData: ClientData,
    );
}
extern "C" {
    pub fn Tcl_DeleteCloseHandler(chan: Tcl_Channel, proc_: Tcl_CloseProc, clientData: ClientData);
}
extern "C" {
    pub fn Tcl_DeleteCommand(
        interp: *mut Tcl_Interp,
        cmdName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_DeleteCommandFromToken(
        interp: *mut Tcl_Interp,
        command: Tcl_Command,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_DeleteEvents(proc_: Tcl_EventDeleteProc, clientData: ClientData);
}
extern "C" {
    pub fn Tcl_DeleteEventSource(
        setupProc: Tcl_EventSetupProc,
        checkProc: Tcl_EventCheckProc,
        clientData: ClientData,
    );
}
extern "C" {
    pub fn Tcl_DeleteExitHandler(proc_: Tcl_ExitProc, clientData: ClientData);
}
extern "C" {
    pub fn Tcl_DeleteHashEntry(entryPtr: *mut Tcl_HashEntry);
}
extern "C" {
    pub fn Tcl_DeleteHashTable(tablePtr: *mut Tcl_HashTable);
}
extern "C" {
    pub fn Tcl_DeleteInterp(interp: *mut Tcl_Interp);
}
extern "C" {
    pub fn Tcl_DetachPids(numPids: ::std::os::raw::c_int, pidPtr: *mut Tcl_Pid);
}
extern "C" {
    pub fn Tcl_DeleteTimerHandler(token: Tcl_TimerToken);
}
extern "C" {
    pub fn Tcl_DeleteTrace(interp: *mut Tcl_Interp, trace: Tcl_Trace);
}
extern "C" {
    pub fn Tcl_DontCallWhenDeleted(
        interp: *mut Tcl_Interp,
        proc_: Tcl_InterpDeleteProc,
        clientData: ClientData,
    );
}
extern "C" {
    pub fn Tcl_DoOneEvent(flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_DoWhenIdle(proc_: Tcl_IdleProc, clientData: ClientData);
}
extern "C" {
    pub fn Tcl_DStringAppend(
        dsPtr: *mut Tcl_DString,
        bytes: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_DStringAppendElement(
        dsPtr: *mut Tcl_DString,
        element: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_DStringEndSublist(dsPtr: *mut Tcl_DString);
}
extern "C" {
    pub fn Tcl_DStringFree(dsPtr: *mut Tcl_DString);
}
extern "C" {
    pub fn Tcl_DStringGetResult(interp: *mut Tcl_Interp, dsPtr: *mut Tcl_DString);
}
extern "C" {
    pub fn Tcl_DStringInit(dsPtr: *mut Tcl_DString);
}
extern "C" {
    pub fn Tcl_DStringResult(interp: *mut Tcl_Interp, dsPtr: *mut Tcl_DString);
}
extern "C" {
    pub fn Tcl_DStringSetLength(dsPtr: *mut Tcl_DString, length: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Tcl_DStringStartSublist(dsPtr: *mut Tcl_DString);
}
extern "C" {
    pub fn Tcl_Eof(chan: Tcl_Channel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ErrnoId() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_ErrnoMsg(err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_Eval(
        interp: *mut Tcl_Interp,
        script: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_EvalFile(
        interp: *mut Tcl_Interp,
        fileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_EvalObj(interp: *mut Tcl_Interp, objPtr: *mut Tcl_Obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_EventuallyFree(clientData: ClientData, freeProc: Tcl_FreeProc);
}
extern "C" {
    pub fn Tcl_Exit(status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Tcl_ExposeCommand(
        interp: *mut Tcl_Interp,
        hiddenCmdToken: *const ::std::os::raw::c_char,
        cmdName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ExprBoolean(
        interp: *mut Tcl_Interp,
        expr: *const ::std::os::raw::c_char,
        ptr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ExprBooleanObj(
        interp: *mut Tcl_Interp,
        objPtr: *mut Tcl_Obj,
        ptr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ExprDouble(
        interp: *mut Tcl_Interp,
        expr: *const ::std::os::raw::c_char,
        ptr: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ExprDoubleObj(
        interp: *mut Tcl_Interp,
        objPtr: *mut Tcl_Obj,
        ptr: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ExprLong(
        interp: *mut Tcl_Interp,
        expr: *const ::std::os::raw::c_char,
        ptr: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ExprLongObj(
        interp: *mut Tcl_Interp,
        objPtr: *mut Tcl_Obj,
        ptr: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ExprObj(
        interp: *mut Tcl_Interp,
        objPtr: *mut Tcl_Obj,
        resultPtrPtr: *mut *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ExprString(
        interp: *mut Tcl_Interp,
        expr: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_Finalize();
}
extern "C" {
    pub fn Tcl_FindExecutable(argv0: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Tcl_FirstHashEntry(
        tablePtr: *mut Tcl_HashTable,
        searchPtr: *mut Tcl_HashSearch,
    ) -> *mut Tcl_HashEntry;
}
extern "C" {
    pub fn Tcl_Flush(chan: Tcl_Channel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FreeResult(interp: *mut Tcl_Interp);
}
extern "C" {
    pub fn Tcl_GetAlias(
        interp: *mut Tcl_Interp,
        childCmd: *const ::std::os::raw::c_char,
        targetInterpPtr: *mut *mut Tcl_Interp,
        targetCmdPtr: *mut *const ::std::os::raw::c_char,
        argcPtr: *mut ::std::os::raw::c_int,
        argvPtr: *mut *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetAliasObj(
        interp: *mut Tcl_Interp,
        childCmd: *const ::std::os::raw::c_char,
        targetInterpPtr: *mut *mut Tcl_Interp,
        targetCmdPtr: *mut *const ::std::os::raw::c_char,
        objcPtr: *mut ::std::os::raw::c_int,
        objv: *mut *mut *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetAssocData(
        interp: *mut Tcl_Interp,
        name: *const ::std::os::raw::c_char,
        procPtr: *mut Tcl_InterpDeleteProc,
    ) -> ClientData;
}
extern "C" {
    pub fn Tcl_GetChannel(
        interp: *mut Tcl_Interp,
        chanName: *const ::std::os::raw::c_char,
        modePtr: *mut ::std::os::raw::c_int,
    ) -> Tcl_Channel;
}
extern "C" {
    pub fn Tcl_GetChannelBufferSize(chan: Tcl_Channel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetChannelHandle(
        chan: Tcl_Channel,
        direction: ::std::os::raw::c_int,
        handlePtr: *mut ClientData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetChannelInstanceData(chan: Tcl_Channel) -> ClientData;
}
extern "C" {
    pub fn Tcl_GetChannelMode(chan: Tcl_Channel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetChannelName(chan: Tcl_Channel) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_GetChannelOption(
        interp: *mut Tcl_Interp,
        chan: Tcl_Channel,
        optionName: *const ::std::os::raw::c_char,
        dsPtr: *mut Tcl_DString,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetChannelType(chan: Tcl_Channel) -> *const Tcl_ChannelType;
}
extern "C" {
    pub fn Tcl_GetCommandInfo(
        interp: *mut Tcl_Interp,
        cmdName: *const ::std::os::raw::c_char,
        infoPtr: *mut Tcl_CmdInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetCommandName(
        interp: *mut Tcl_Interp,
        command: Tcl_Command,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_GetErrno() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetHostName() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_GetInterpPath(
        interp: *mut Tcl_Interp,
        childInterp: *mut Tcl_Interp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetMaster(interp: *mut Tcl_Interp) -> *mut Tcl_Interp;
}
extern "C" {
    pub fn Tcl_GetNameOfExecutable() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_GetObjResult(interp: *mut Tcl_Interp) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_GetOpenFile(
        interp: *mut Tcl_Interp,
        chanID: *const ::std::os::raw::c_char,
        forWriting: ::std::os::raw::c_int,
        checkUsage: ::std::os::raw::c_int,
        filePtr: *mut ClientData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetPathType(path: *const ::std::os::raw::c_char) -> Tcl_PathType;
}
extern "C" {
    pub fn Tcl_Gets(chan: Tcl_Channel, dsPtr: *mut Tcl_DString) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetsObj(chan: Tcl_Channel, objPtr: *mut Tcl_Obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetServiceMode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetSlave(
        interp: *mut Tcl_Interp,
        name: *const ::std::os::raw::c_char,
    ) -> *mut Tcl_Interp;
}
extern "C" {
    pub fn Tcl_GetStdChannel(type_: ::std::os::raw::c_int) -> Tcl_Channel;
}
extern "C" {
    pub fn Tcl_GetStringResult(interp: *mut Tcl_Interp) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_GetVar(
        interp: *mut Tcl_Interp,
        varName: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_GetVar2(
        interp: *mut Tcl_Interp,
        part1: *const ::std::os::raw::c_char,
        part2: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_GlobalEval(
        interp: *mut Tcl_Interp,
        command: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GlobalEvalObj(
        interp: *mut Tcl_Interp,
        objPtr: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_HideCommand(
        interp: *mut Tcl_Interp,
        cmdName: *const ::std::os::raw::c_char,
        hiddenCmdToken: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_Init(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_InitHashTable(tablePtr: *mut Tcl_HashTable, keyType: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Tcl_InputBlocked(chan: Tcl_Channel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_InputBuffered(chan: Tcl_Channel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_InterpDeleted(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_IsSafe(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_JoinPath(
        argc: ::std::os::raw::c_int,
        argv: *const *const ::std::os::raw::c_char,
        resultPtr: *mut Tcl_DString,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_LinkVar(
        interp: *mut Tcl_Interp,
        varName: *const ::std::os::raw::c_char,
        addr: *mut ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_MakeFileChannel(handle: ClientData, mode: ::std::os::raw::c_int) -> Tcl_Channel;
}
extern "C" {
    pub fn Tcl_MakeSafe(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_MakeTcpClientChannel(tcpSocket: ClientData) -> Tcl_Channel;
}
extern "C" {
    pub fn Tcl_Merge(
        argc: ::std::os::raw::c_int,
        argv: *const *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_NextHashEntry(searchPtr: *mut Tcl_HashSearch) -> *mut Tcl_HashEntry;
}
extern "C" {
    pub fn Tcl_NotifyChannel(channel: Tcl_Channel, mask: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Tcl_ObjGetVar2(
        interp: *mut Tcl_Interp,
        part1Ptr: *mut Tcl_Obj,
        part2Ptr: *mut Tcl_Obj,
        flags: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_ObjSetVar2(
        interp: *mut Tcl_Interp,
        part1Ptr: *mut Tcl_Obj,
        part2Ptr: *mut Tcl_Obj,
        newValuePtr: *mut Tcl_Obj,
        flags: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_OpenCommandChannel(
        interp: *mut Tcl_Interp,
        argc: ::std::os::raw::c_int,
        argv: *mut *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> Tcl_Channel;
}
extern "C" {
    pub fn Tcl_OpenFileChannel(
        interp: *mut Tcl_Interp,
        fileName: *const ::std::os::raw::c_char,
        modeString: *const ::std::os::raw::c_char,
        permissions: ::std::os::raw::c_int,
    ) -> Tcl_Channel;
}
extern "C" {
    pub fn Tcl_OpenTcpClient(
        interp: *mut Tcl_Interp,
        port: ::std::os::raw::c_int,
        address: *const ::std::os::raw::c_char,
        myaddr: *const ::std::os::raw::c_char,
        myport: ::std::os::raw::c_int,
        async_: ::std::os::raw::c_int,
    ) -> Tcl_Channel;
}
extern "C" {
    pub fn Tcl_OpenTcpServer(
        interp: *mut Tcl_Interp,
        port: ::std::os::raw::c_int,
        host: *const ::std::os::raw::c_char,
        acceptProc: Tcl_TcpAcceptProc,
        callbackData: ClientData,
    ) -> Tcl_Channel;
}
extern "C" {
    pub fn Tcl_Preserve(data: ClientData);
}
extern "C" {
    pub fn Tcl_PrintDouble(interp: *mut Tcl_Interp, value: f64, dst: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn Tcl_PutEnv(assignment: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_PosixError(interp: *mut Tcl_Interp) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_QueueEvent(evPtr: *mut Tcl_Event, position: Tcl_QueuePosition);
}
extern "C" {
    pub fn Tcl_Read(
        chan: Tcl_Channel,
        bufPtr: *mut ::std::os::raw::c_char,
        toRead: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ReapDetachedProcs();
}
extern "C" {
    pub fn Tcl_RecordAndEval(
        interp: *mut Tcl_Interp,
        cmd: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_RecordAndEvalObj(
        interp: *mut Tcl_Interp,
        cmdPtr: *mut Tcl_Obj,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_RegisterChannel(interp: *mut Tcl_Interp, chan: Tcl_Channel);
}
extern "C" {
    pub fn Tcl_RegisterObjType(typePtr: *const Tcl_ObjType);
}
extern "C" {
    pub fn Tcl_RegExpCompile(
        interp: *mut Tcl_Interp,
        pattern: *const ::std::os::raw::c_char,
    ) -> Tcl_RegExp;
}
extern "C" {
    pub fn Tcl_RegExpExec(
        interp: *mut Tcl_Interp,
        regexp: Tcl_RegExp,
        text: *const ::std::os::raw::c_char,
        start: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_RegExpMatch(
        interp: *mut Tcl_Interp,
        text: *const ::std::os::raw::c_char,
        pattern: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_RegExpRange(
        regexp: Tcl_RegExp,
        index: ::std::os::raw::c_int,
        startPtr: *mut *const ::std::os::raw::c_char,
        endPtr: *mut *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Tcl_Release(clientData: ClientData);
}
extern "C" {
    pub fn Tcl_ResetResult(interp: *mut Tcl_Interp);
}
extern "C" {
    pub fn Tcl_ScanElement(
        src: *const ::std::os::raw::c_char,
        flagPtr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ScanCountedElement(
        src: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
        flagPtr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_SeekOld(
        chan: Tcl_Channel,
        offset: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ServiceAll() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ServiceEvent(flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_SetAssocData(
        interp: *mut Tcl_Interp,
        name: *const ::std::os::raw::c_char,
        proc_: Tcl_InterpDeleteProc,
        clientData: ClientData,
    );
}
extern "C" {
    pub fn Tcl_SetChannelBufferSize(chan: Tcl_Channel, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Tcl_SetChannelOption(
        interp: *mut Tcl_Interp,
        chan: Tcl_Channel,
        optionName: *const ::std::os::raw::c_char,
        newValue: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_SetCommandInfo(
        interp: *mut Tcl_Interp,
        cmdName: *const ::std::os::raw::c_char,
        infoPtr: *const Tcl_CmdInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_SetErrno(err: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Tcl_SetErrorCode(interp: *mut Tcl_Interp, ...);
}
extern "C" {
    pub fn Tcl_SetMaxBlockTime(timePtr: *const Tcl_Time);
}
extern "C" {
    pub fn Tcl_SetPanicProc(panicProc: Tcl_PanicProc);
}
extern "C" {
    pub fn Tcl_SetRecursionLimit(
        interp: *mut Tcl_Interp,
        depth: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_SetResult(
        interp: *mut Tcl_Interp,
        result: *mut ::std::os::raw::c_char,
        freeProc: Tcl_FreeProc,
    );
}
extern "C" {
    pub fn Tcl_SetServiceMode(mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_SetObjErrorCode(interp: *mut Tcl_Interp, errorObjPtr: *mut Tcl_Obj);
}
extern "C" {
    pub fn Tcl_SetObjResult(interp: *mut Tcl_Interp, resultObjPtr: *mut Tcl_Obj);
}
extern "C" {
    pub fn Tcl_SetStdChannel(channel: Tcl_Channel, type_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Tcl_SetVar(
        interp: *mut Tcl_Interp,
        varName: *const ::std::os::raw::c_char,
        newValue: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_SetVar2(
        interp: *mut Tcl_Interp,
        part1: *const ::std::os::raw::c_char,
        part2: *const ::std::os::raw::c_char,
        newValue: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_SignalId(sig: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_SignalMsg(sig: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_SourceRCFile(interp: *mut Tcl_Interp);
}
extern "C" {
    pub fn Tcl_SplitList(
        interp: *mut Tcl_Interp,
        listStr: *const ::std::os::raw::c_char,
        argcPtr: *mut ::std::os::raw::c_int,
        argvPtr: *mut *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_SplitPath(
        path: *const ::std::os::raw::c_char,
        argcPtr: *mut ::std::os::raw::c_int,
        argvPtr: *mut *mut *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Tcl_StaticPackage(
        interp: *mut Tcl_Interp,
        prefix: *const ::std::os::raw::c_char,
        initProc: Tcl_PackageInitProc,
        safeInitProc: Tcl_PackageInitProc,
    );
}
extern "C" {
    pub fn Tcl_StringMatch(
        str_: *const ::std::os::raw::c_char,
        pattern: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_TellOld(chan: Tcl_Channel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_TraceVar(
        interp: *mut Tcl_Interp,
        varName: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        proc_: Tcl_VarTraceProc,
        clientData: ClientData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_TraceVar2(
        interp: *mut Tcl_Interp,
        part1: *const ::std::os::raw::c_char,
        part2: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        proc_: Tcl_VarTraceProc,
        clientData: ClientData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_TranslateFileName(
        interp: *mut Tcl_Interp,
        name: *const ::std::os::raw::c_char,
        bufferPtr: *mut Tcl_DString,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_Ungets(
        chan: Tcl_Channel,
        str_: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        atHead: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UnlinkVar(interp: *mut Tcl_Interp, varName: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Tcl_UnregisterChannel(
        interp: *mut Tcl_Interp,
        chan: Tcl_Channel,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UnsetVar(
        interp: *mut Tcl_Interp,
        varName: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UnsetVar2(
        interp: *mut Tcl_Interp,
        part1: *const ::std::os::raw::c_char,
        part2: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UntraceVar(
        interp: *mut Tcl_Interp,
        varName: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        proc_: Tcl_VarTraceProc,
        clientData: ClientData,
    );
}
extern "C" {
    pub fn Tcl_UntraceVar2(
        interp: *mut Tcl_Interp,
        part1: *const ::std::os::raw::c_char,
        part2: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        proc_: Tcl_VarTraceProc,
        clientData: ClientData,
    );
}
extern "C" {
    pub fn Tcl_UpdateLinkedVar(interp: *mut Tcl_Interp, varName: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Tcl_UpVar(
        interp: *mut Tcl_Interp,
        frameName: *const ::std::os::raw::c_char,
        varName: *const ::std::os::raw::c_char,
        localName: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UpVar2(
        interp: *mut Tcl_Interp,
        frameName: *const ::std::os::raw::c_char,
        part1: *const ::std::os::raw::c_char,
        part2: *const ::std::os::raw::c_char,
        localName: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_VarEval(interp: *mut Tcl_Interp, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_VarTraceInfo(
        interp: *mut Tcl_Interp,
        varName: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        procPtr: Tcl_VarTraceProc,
        prevClientData: ClientData,
    ) -> ClientData;
}
extern "C" {
    pub fn Tcl_VarTraceInfo2(
        interp: *mut Tcl_Interp,
        part1: *const ::std::os::raw::c_char,
        part2: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        procPtr: Tcl_VarTraceProc,
        prevClientData: ClientData,
    ) -> ClientData;
}
extern "C" {
    pub fn Tcl_Write(
        chan: Tcl_Channel,
        s: *const ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_WrongNumArgs(
        interp: *mut Tcl_Interp,
        objc: ::std::os::raw::c_int,
        objv: *const *mut Tcl_Obj,
        message: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Tcl_DumpActiveMemory(fileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ValidateAllMemory(file: *const ::std::os::raw::c_char, line: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Tcl_AppendResultVA(interp: *mut Tcl_Interp, argList: *mut __va_list_tag);
}
extern "C" {
    pub fn Tcl_AppendStringsToObjVA(objPtr: *mut Tcl_Obj, argList: *mut __va_list_tag);
}
extern "C" {
    pub fn Tcl_HashStats(tablePtr: *mut Tcl_HashTable) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_ParseVar(
        interp: *mut Tcl_Interp,
        start: *const ::std::os::raw::c_char,
        termPtr: *mut *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_PkgPresent(
        interp: *mut Tcl_Interp,
        name: *const ::std::os::raw::c_char,
        version: *const ::std::os::raw::c_char,
        exact: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_PkgPresentEx(
        interp: *mut Tcl_Interp,
        name: *const ::std::os::raw::c_char,
        version: *const ::std::os::raw::c_char,
        exact: ::std::os::raw::c_int,
        clientDataPtr: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_PkgProvide(
        interp: *mut Tcl_Interp,
        name: *const ::std::os::raw::c_char,
        version: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_PkgRequire(
        interp: *mut Tcl_Interp,
        name: *const ::std::os::raw::c_char,
        version: *const ::std::os::raw::c_char,
        exact: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_SetErrorCodeVA(interp: *mut Tcl_Interp, argList: *mut __va_list_tag);
}
extern "C" {
    pub fn Tcl_VarEvalVA(
        interp: *mut Tcl_Interp,
        argList: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_WaitPid(
        pid: Tcl_Pid,
        statPtr: *mut ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
    ) -> Tcl_Pid;
}
extern "C" {
    pub fn Tcl_PanicVA(format: *const ::std::os::raw::c_char, argList: *mut __va_list_tag);
}
extern "C" {
    pub fn Tcl_GetVersion(
        major: *mut ::std::os::raw::c_int,
        minor: *mut ::std::os::raw::c_int,
        patchLevel: *mut ::std::os::raw::c_int,
        type_: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Tcl_InitMemory(interp: *mut Tcl_Interp);
}
extern "C" {
    pub fn Tcl_StackChannel(
        interp: *mut Tcl_Interp,
        typePtr: *const Tcl_ChannelType,
        instanceData: ClientData,
        mask: ::std::os::raw::c_int,
        prevChan: Tcl_Channel,
    ) -> Tcl_Channel;
}
extern "C" {
    pub fn Tcl_UnstackChannel(interp: *mut Tcl_Interp, chan: Tcl_Channel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetStackedChannel(chan: Tcl_Channel) -> Tcl_Channel;
}
extern "C" {
    pub fn Tcl_SetMainLoop(proc_: Tcl_MainLoopProc);
}
extern "C" {
    pub fn Tcl_AppendObjToObj(objPtr: *mut Tcl_Obj, appendObjPtr: *mut Tcl_Obj);
}
extern "C" {
    pub fn Tcl_CreateEncoding(typePtr: *const Tcl_EncodingType) -> Tcl_Encoding;
}
extern "C" {
    pub fn Tcl_CreateThreadExitHandler(proc_: Tcl_ExitProc, clientData: ClientData);
}
extern "C" {
    pub fn Tcl_DeleteThreadExitHandler(proc_: Tcl_ExitProc, clientData: ClientData);
}
extern "C" {
    pub fn Tcl_DiscardResult(statePtr: *mut Tcl_SavedResult);
}
extern "C" {
    pub fn Tcl_EvalEx(
        interp: *mut Tcl_Interp,
        script: *const ::std::os::raw::c_char,
        numBytes: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_EvalObjv(
        interp: *mut Tcl_Interp,
        objc: ::std::os::raw::c_int,
        objv: *const *mut Tcl_Obj,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_EvalObjEx(
        interp: *mut Tcl_Interp,
        objPtr: *mut Tcl_Obj,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ExitThread(status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Tcl_ExternalToUtf(
        interp: *mut Tcl_Interp,
        encoding: Tcl_Encoding,
        src: *const ::std::os::raw::c_char,
        srcLen: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        statePtr: *mut Tcl_EncodingState,
        dst: *mut ::std::os::raw::c_char,
        dstLen: ::std::os::raw::c_int,
        srcReadPtr: *mut ::std::os::raw::c_int,
        dstWrotePtr: *mut ::std::os::raw::c_int,
        dstCharsPtr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ExternalToUtfDString(
        encoding: Tcl_Encoding,
        src: *const ::std::os::raw::c_char,
        srcLen: ::std::os::raw::c_int,
        dsPtr: *mut Tcl_DString,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_FinalizeThread();
}
extern "C" {
    pub fn Tcl_FinalizeNotifier(clientData: ClientData);
}
extern "C" {
    pub fn Tcl_FreeEncoding(encoding: Tcl_Encoding);
}
extern "C" {
    pub fn Tcl_GetCurrentThread() -> Tcl_ThreadId;
}
extern "C" {
    pub fn Tcl_GetEncoding(
        interp: *mut Tcl_Interp,
        name: *const ::std::os::raw::c_char,
    ) -> Tcl_Encoding;
}
extern "C" {
    pub fn Tcl_GetEncodingName(encoding: Tcl_Encoding) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_GetEncodingNames(interp: *mut Tcl_Interp);
}
extern "C" {
    pub fn Tcl_GetIndexFromObjStruct(
        interp: *mut Tcl_Interp,
        objPtr: *mut Tcl_Obj,
        tablePtr: *const ::std::os::raw::c_void,
        offset: ::std::os::raw::c_int,
        msg: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        indexPtr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetThreadData(
        keyPtr: *mut Tcl_ThreadDataKey,
        size: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Tcl_GetVar2Ex(
        interp: *mut Tcl_Interp,
        part1: *const ::std::os::raw::c_char,
        part2: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_InitNotifier() -> ClientData;
}
extern "C" {
    pub fn Tcl_MutexLock(mutexPtr: *mut Tcl_Mutex);
}
extern "C" {
    pub fn Tcl_MutexUnlock(mutexPtr: *mut Tcl_Mutex);
}
extern "C" {
    pub fn Tcl_ConditionNotify(condPtr: *mut Tcl_Condition);
}
extern "C" {
    pub fn Tcl_ConditionWait(
        condPtr: *mut Tcl_Condition,
        mutexPtr: *mut Tcl_Mutex,
        timePtr: *const Tcl_Time,
    );
}
extern "C" {
    pub fn Tcl_NumUtfChars(
        src: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ReadChars(
        channel: Tcl_Channel,
        objPtr: *mut Tcl_Obj,
        charsToRead: ::std::os::raw::c_int,
        appendFlag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_RestoreResult(interp: *mut Tcl_Interp, statePtr: *mut Tcl_SavedResult);
}
extern "C" {
    pub fn Tcl_SaveResult(interp: *mut Tcl_Interp, statePtr: *mut Tcl_SavedResult);
}
extern "C" {
    pub fn Tcl_SetSystemEncoding(
        interp: *mut Tcl_Interp,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_SetVar2Ex(
        interp: *mut Tcl_Interp,
        part1: *const ::std::os::raw::c_char,
        part2: *const ::std::os::raw::c_char,
        newValuePtr: *mut Tcl_Obj,
        flags: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_ThreadAlert(threadId: Tcl_ThreadId);
}
extern "C" {
    pub fn Tcl_ThreadQueueEvent(
        threadId: Tcl_ThreadId,
        evPtr: *mut Tcl_Event,
        position: Tcl_QueuePosition,
    );
}
extern "C" {
    pub fn Tcl_UniCharAtIndex(
        src: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
    ) -> Tcl_UniChar;
}
extern "C" {
    pub fn Tcl_UniCharToLower(ch: ::std::os::raw::c_int) -> Tcl_UniChar;
}
extern "C" {
    pub fn Tcl_UniCharToTitle(ch: ::std::os::raw::c_int) -> Tcl_UniChar;
}
extern "C" {
    pub fn Tcl_UniCharToUpper(ch: ::std::os::raw::c_int) -> Tcl_UniChar;
}
extern "C" {
    pub fn Tcl_UniCharToUtf(
        ch: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UtfAtIndex(
        src: *const ::std::os::raw::c_char,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_UtfCharComplete(
        src: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UtfBackslash(
        src: *const ::std::os::raw::c_char,
        readPtr: *mut ::std::os::raw::c_int,
        dst: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UtfFindFirst(
        src: *const ::std::os::raw::c_char,
        ch: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_UtfFindLast(
        src: *const ::std::os::raw::c_char,
        ch: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_UtfNext(src: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_UtfPrev(
        src: *const ::std::os::raw::c_char,
        start: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_UtfToExternal(
        interp: *mut Tcl_Interp,
        encoding: Tcl_Encoding,
        src: *const ::std::os::raw::c_char,
        srcLen: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        statePtr: *mut Tcl_EncodingState,
        dst: *mut ::std::os::raw::c_char,
        dstLen: ::std::os::raw::c_int,
        srcReadPtr: *mut ::std::os::raw::c_int,
        dstWrotePtr: *mut ::std::os::raw::c_int,
        dstCharsPtr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UtfToExternalDString(
        encoding: Tcl_Encoding,
        src: *const ::std::os::raw::c_char,
        srcLen: ::std::os::raw::c_int,
        dsPtr: *mut Tcl_DString,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_UtfToLower(src: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UtfToTitle(src: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UtfToUniChar(
        src: *const ::std::os::raw::c_char,
        chPtr: *mut Tcl_UniChar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UtfToUpper(src: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_WriteChars(
        chan: Tcl_Channel,
        src: *const ::std::os::raw::c_char,
        srcLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_WriteObj(chan: Tcl_Channel, objPtr: *mut Tcl_Obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetString(objPtr: *mut Tcl_Obj) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_GetDefaultEncodingDir() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_SetDefaultEncodingDir(path: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Tcl_AlertNotifier(clientData: ClientData);
}
extern "C" {
    pub fn Tcl_ServiceModeHook(mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Tcl_UniCharIsAlnum(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UniCharIsAlpha(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UniCharIsDigit(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UniCharIsLower(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UniCharIsSpace(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UniCharIsUpper(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UniCharIsWordChar(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UniCharLen(uniStr: *const Tcl_UniChar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UniCharNcmp(
        ucs: *const Tcl_UniChar,
        uct: *const Tcl_UniChar,
        numChars: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UniCharToUtfDString(
        uniStr: *const Tcl_UniChar,
        uniLength: ::std::os::raw::c_int,
        dsPtr: *mut Tcl_DString,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_UtfToUniCharDString(
        src: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
        dsPtr: *mut Tcl_DString,
    ) -> *mut Tcl_UniChar;
}
extern "C" {
    pub fn Tcl_GetRegExpFromObj(
        interp: *mut Tcl_Interp,
        patObj: *mut Tcl_Obj,
        flags: ::std::os::raw::c_int,
    ) -> Tcl_RegExp;
}
extern "C" {
    pub fn Tcl_EvalTokens(
        interp: *mut Tcl_Interp,
        tokenPtr: *mut Tcl_Token,
        count: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_FreeParse(parsePtr: *mut Tcl_Parse);
}
extern "C" {
    pub fn Tcl_LogCommandInfo(
        interp: *mut Tcl_Interp,
        script: *const ::std::os::raw::c_char,
        command: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Tcl_ParseBraces(
        interp: *mut Tcl_Interp,
        start: *const ::std::os::raw::c_char,
        numBytes: ::std::os::raw::c_int,
        parsePtr: *mut Tcl_Parse,
        append: ::std::os::raw::c_int,
        termPtr: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ParseCommand(
        interp: *mut Tcl_Interp,
        start: *const ::std::os::raw::c_char,
        numBytes: ::std::os::raw::c_int,
        nested: ::std::os::raw::c_int,
        parsePtr: *mut Tcl_Parse,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ParseExpr(
        interp: *mut Tcl_Interp,
        start: *const ::std::os::raw::c_char,
        numBytes: ::std::os::raw::c_int,
        parsePtr: *mut Tcl_Parse,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ParseQuotedString(
        interp: *mut Tcl_Interp,
        start: *const ::std::os::raw::c_char,
        numBytes: ::std::os::raw::c_int,
        parsePtr: *mut Tcl_Parse,
        append: ::std::os::raw::c_int,
        termPtr: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ParseVarName(
        interp: *mut Tcl_Interp,
        start: *const ::std::os::raw::c_char,
        numBytes: ::std::os::raw::c_int,
        parsePtr: *mut Tcl_Parse,
        append: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetCwd(
        interp: *mut Tcl_Interp,
        cwdPtr: *mut Tcl_DString,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_Chdir(dirName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_Access(
        path: *const ::std::os::raw::c_char,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_Stat(
        path: *const ::std::os::raw::c_char,
        bufPtr: *mut stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UtfNcmp(
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UtfNcasecmp(
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_StringCaseMatch(
        str_: *const ::std::os::raw::c_char,
        pattern: *const ::std::os::raw::c_char,
        nocase: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UniCharIsControl(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UniCharIsGraph(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UniCharIsPrint(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UniCharIsPunct(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_RegExpExecObj(
        interp: *mut Tcl_Interp,
        regexp: Tcl_RegExp,
        textObj: *mut Tcl_Obj,
        offset: ::std::os::raw::c_int,
        nmatches: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_RegExpGetInfo(regexp: Tcl_RegExp, infoPtr: *mut Tcl_RegExpInfo);
}
extern "C" {
    pub fn Tcl_NewUnicodeObj(
        unicode: *const Tcl_UniChar,
        numChars: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_SetUnicodeObj(
        objPtr: *mut Tcl_Obj,
        unicode: *const Tcl_UniChar,
        numChars: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Tcl_GetCharLength(objPtr: *mut Tcl_Obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetUniChar(objPtr: *mut Tcl_Obj, index: ::std::os::raw::c_int) -> Tcl_UniChar;
}
extern "C" {
    pub fn Tcl_GetUnicode(objPtr: *mut Tcl_Obj) -> *mut Tcl_UniChar;
}
extern "C" {
    pub fn Tcl_GetRange(
        objPtr: *mut Tcl_Obj,
        first: ::std::os::raw::c_int,
        last: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_AppendUnicodeToObj(
        objPtr: *mut Tcl_Obj,
        unicode: *const Tcl_UniChar,
        length: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Tcl_RegExpMatchObj(
        interp: *mut Tcl_Interp,
        textObj: *mut Tcl_Obj,
        patternObj: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_SetNotifier(notifierProcPtr: *mut Tcl_NotifierProcs);
}
extern "C" {
    pub fn Tcl_GetAllocMutex() -> *mut Tcl_Mutex;
}
extern "C" {
    pub fn Tcl_GetChannelNames(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetChannelNamesEx(
        interp: *mut Tcl_Interp,
        pattern: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ProcObjCmd(
        clientData: ClientData,
        interp: *mut Tcl_Interp,
        objc: ::std::os::raw::c_int,
        objv: *const *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ConditionFinalize(condPtr: *mut Tcl_Condition);
}
extern "C" {
    pub fn Tcl_MutexFinalize(mutex: *mut Tcl_Mutex);
}
extern "C" {
    pub fn Tcl_CreateThread(
        idPtr: *mut Tcl_ThreadId,
        proc_: Tcl_ThreadCreateProc,
        clientData: ClientData,
        stackSize: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ReadRaw(
        chan: Tcl_Channel,
        dst: *mut ::std::os::raw::c_char,
        bytesToRead: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_WriteRaw(
        chan: Tcl_Channel,
        src: *const ::std::os::raw::c_char,
        srcLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetTopChannel(chan: Tcl_Channel) -> Tcl_Channel;
}
extern "C" {
    pub fn Tcl_ChannelBuffered(chan: Tcl_Channel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ChannelName(chanTypePtr: *const Tcl_ChannelType) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_ChannelVersion(chanTypePtr: *const Tcl_ChannelType) -> Tcl_ChannelTypeVersion;
}
extern "C" {
    pub fn Tcl_ChannelBlockModeProc(chanTypePtr: *const Tcl_ChannelType)
        -> Tcl_DriverBlockModeProc;
}
extern "C" {
    pub fn Tcl_ChannelCloseProc(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverCloseProc;
}
extern "C" {
    pub fn Tcl_ChannelClose2Proc(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverClose2Proc;
}
extern "C" {
    pub fn Tcl_ChannelInputProc(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverInputProc;
}
extern "C" {
    pub fn Tcl_ChannelOutputProc(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverOutputProc;
}
extern "C" {
    pub fn Tcl_ChannelSeekProc(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverSeekProc;
}
extern "C" {
    pub fn Tcl_ChannelSetOptionProc(chanTypePtr: *const Tcl_ChannelType)
        -> Tcl_DriverSetOptionProc;
}
extern "C" {
    pub fn Tcl_ChannelGetOptionProc(chanTypePtr: *const Tcl_ChannelType)
        -> Tcl_DriverGetOptionProc;
}
extern "C" {
    pub fn Tcl_ChannelWatchProc(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverWatchProc;
}
extern "C" {
    pub fn Tcl_ChannelGetHandleProc(chanTypePtr: *const Tcl_ChannelType)
        -> Tcl_DriverGetHandleProc;
}
extern "C" {
    pub fn Tcl_ChannelFlushProc(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverFlushProc;
}
extern "C" {
    pub fn Tcl_ChannelHandlerProc(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverHandlerProc;
}
extern "C" {
    pub fn Tcl_JoinThread(
        threadId: Tcl_ThreadId,
        result: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_IsChannelShared(channel: Tcl_Channel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_IsChannelRegistered(
        interp: *mut Tcl_Interp,
        channel: Tcl_Channel,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_CutChannel(channel: Tcl_Channel);
}
extern "C" {
    pub fn Tcl_SpliceChannel(channel: Tcl_Channel);
}
extern "C" {
    pub fn Tcl_ClearChannelHandlers(channel: Tcl_Channel);
}
extern "C" {
    pub fn Tcl_IsChannelExisting(
        channelName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UniCharNcasecmp(
        ucs: *const Tcl_UniChar,
        uct: *const Tcl_UniChar,
        numChars: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UniCharCaseMatch(
        uniStr: *const Tcl_UniChar,
        uniPattern: *const Tcl_UniChar,
        nocase: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FindHashEntry(
        tablePtr: *mut Tcl_HashTable,
        key: *const ::std::os::raw::c_void,
    ) -> *mut Tcl_HashEntry;
}
extern "C" {
    pub fn Tcl_CreateHashEntry(
        tablePtr: *mut Tcl_HashTable,
        key: *const ::std::os::raw::c_void,
        newPtr: *mut ::std::os::raw::c_int,
    ) -> *mut Tcl_HashEntry;
}
extern "C" {
    pub fn Tcl_InitCustomHashTable(
        tablePtr: *mut Tcl_HashTable,
        keyType: ::std::os::raw::c_int,
        typePtr: *const Tcl_HashKeyType,
    );
}
extern "C" {
    pub fn Tcl_InitObjHashTable(tablePtr: *mut Tcl_HashTable);
}
extern "C" {
    pub fn Tcl_CommandTraceInfo(
        interp: *mut Tcl_Interp,
        varName: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        procPtr: Tcl_CommandTraceProc,
        prevClientData: ClientData,
    ) -> ClientData;
}
extern "C" {
    pub fn Tcl_TraceCommand(
        interp: *mut Tcl_Interp,
        varName: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        proc_: Tcl_CommandTraceProc,
        clientData: ClientData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_UntraceCommand(
        interp: *mut Tcl_Interp,
        varName: *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        proc_: Tcl_CommandTraceProc,
        clientData: ClientData,
    );
}
extern "C" {
    pub fn Tcl_AttemptAlloc(size: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_AttemptDbCkalloc(
        size: ::std::os::raw::c_uint,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_AttemptRealloc(
        ptr: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_AttemptDbCkrealloc(
        ptr: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_uint,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_AttemptSetObjLength(
        objPtr: *mut Tcl_Obj,
        length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetChannelThread(channel: Tcl_Channel) -> Tcl_ThreadId;
}
extern "C" {
    pub fn Tcl_GetUnicodeFromObj(
        objPtr: *mut Tcl_Obj,
        lengthPtr: *mut ::std::os::raw::c_int,
    ) -> *mut Tcl_UniChar;
}
extern "C" {
    pub fn Tcl_GetMathFuncInfo(
        interp: *mut Tcl_Interp,
        name: *const ::std::os::raw::c_char,
        numArgsPtr: *mut ::std::os::raw::c_int,
        argTypesPtr: *mut *mut Tcl_ValueType,
        procPtr: *mut Tcl_MathProc,
        clientDataPtr: *mut ClientData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ListMathFuncs(
        interp: *mut Tcl_Interp,
        pattern: *const ::std::os::raw::c_char,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_SubstObj(
        interp: *mut Tcl_Interp,
        objPtr: *mut Tcl_Obj,
        flags: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_DetachChannel(
        interp: *mut Tcl_Interp,
        channel: Tcl_Channel,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_IsStandardChannel(channel: Tcl_Channel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FSCopyFile(
        srcPathPtr: *mut Tcl_Obj,
        destPathPtr: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FSCopyDirectory(
        srcPathPtr: *mut Tcl_Obj,
        destPathPtr: *mut Tcl_Obj,
        errorPtr: *mut *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FSCreateDirectory(pathPtr: *mut Tcl_Obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FSDeleteFile(pathPtr: *mut Tcl_Obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FSLoadFile(
        interp: *mut Tcl_Interp,
        pathPtr: *mut Tcl_Obj,
        sym1: *const ::std::os::raw::c_char,
        sym2: *const ::std::os::raw::c_char,
        proc1Ptr: *mut Tcl_PackageInitProc,
        proc2Ptr: *mut Tcl_PackageInitProc,
        handlePtr: *mut Tcl_LoadHandle,
        unloadProcPtr: *mut Tcl_FSUnloadFileProc,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FSMatchInDirectory(
        interp: *mut Tcl_Interp,
        result: *mut Tcl_Obj,
        pathPtr: *mut Tcl_Obj,
        pattern: *const ::std::os::raw::c_char,
        types: *mut Tcl_GlobTypeData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FSLink(
        pathPtr: *mut Tcl_Obj,
        toPtr: *mut Tcl_Obj,
        linkAction: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_FSRemoveDirectory(
        pathPtr: *mut Tcl_Obj,
        recursive: ::std::os::raw::c_int,
        errorPtr: *mut *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FSRenameFile(
        srcPathPtr: *mut Tcl_Obj,
        destPathPtr: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FSLstat(pathPtr: *mut Tcl_Obj, buf: *mut Tcl_StatBuf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FSUtime(pathPtr: *mut Tcl_Obj, tval: *mut utimbuf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FSFileAttrsGet(
        interp: *mut Tcl_Interp,
        index: ::std::os::raw::c_int,
        pathPtr: *mut Tcl_Obj,
        objPtrRef: *mut *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FSFileAttrsSet(
        interp: *mut Tcl_Interp,
        index: ::std::os::raw::c_int,
        pathPtr: *mut Tcl_Obj,
        objPtr: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FSFileAttrStrings(
        pathPtr: *mut Tcl_Obj,
        objPtrRef: *mut *mut Tcl_Obj,
    ) -> *const *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_FSStat(pathPtr: *mut Tcl_Obj, buf: *mut Tcl_StatBuf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FSAccess(
        pathPtr: *mut Tcl_Obj,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FSOpenFileChannel(
        interp: *mut Tcl_Interp,
        pathPtr: *mut Tcl_Obj,
        modeString: *const ::std::os::raw::c_char,
        permissions: ::std::os::raw::c_int,
    ) -> Tcl_Channel;
}
extern "C" {
    pub fn Tcl_FSGetCwd(interp: *mut Tcl_Interp) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_FSChdir(pathPtr: *mut Tcl_Obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FSConvertToPathType(
        interp: *mut Tcl_Interp,
        pathPtr: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FSJoinPath(listObj: *mut Tcl_Obj, elements: ::std::os::raw::c_int) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_FSSplitPath(
        pathPtr: *mut Tcl_Obj,
        lenPtr: *mut ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_FSEqualPaths(
        firstPtr: *mut Tcl_Obj,
        secondPtr: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FSGetNormalizedPath(interp: *mut Tcl_Interp, pathPtr: *mut Tcl_Obj) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_FSJoinToPath(
        pathPtr: *mut Tcl_Obj,
        objc: ::std::os::raw::c_int,
        objv: *const *mut Tcl_Obj,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_FSGetInternalRep(pathPtr: *mut Tcl_Obj, fsPtr: *const Tcl_Filesystem) -> ClientData;
}
extern "C" {
    pub fn Tcl_FSGetTranslatedPath(interp: *mut Tcl_Interp, pathPtr: *mut Tcl_Obj) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_FSEvalFile(interp: *mut Tcl_Interp, fileName: *mut Tcl_Obj)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FSNewNativePath(
        fromFilesystem: *const Tcl_Filesystem,
        clientData: ClientData,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_FSGetNativePath(pathPtr: *mut Tcl_Obj) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn Tcl_FSFileSystemInfo(pathPtr: *mut Tcl_Obj) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_FSPathSeparator(pathPtr: *mut Tcl_Obj) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_FSListVolumes() -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_FSRegister(
        clientData: ClientData,
        fsPtr: *const Tcl_Filesystem,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FSUnregister(fsPtr: *const Tcl_Filesystem) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FSData(fsPtr: *const Tcl_Filesystem) -> ClientData;
}
extern "C" {
    pub fn Tcl_FSGetTranslatedStringPath(
        interp: *mut Tcl_Interp,
        pathPtr: *mut Tcl_Obj,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_FSGetFileSystemForPath(pathPtr: *mut Tcl_Obj) -> *const Tcl_Filesystem;
}
extern "C" {
    pub fn Tcl_FSGetPathType(pathPtr: *mut Tcl_Obj) -> Tcl_PathType;
}
extern "C" {
    pub fn Tcl_OutputBuffered(chan: Tcl_Channel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FSMountsChanged(fsPtr: *const Tcl_Filesystem);
}
extern "C" {
    pub fn Tcl_EvalTokensStandard(
        interp: *mut Tcl_Interp,
        tokenPtr: *mut Tcl_Token,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetTime(timeBuf: *mut Tcl_Time);
}
extern "C" {
    pub fn Tcl_CreateObjTrace(
        interp: *mut Tcl_Interp,
        level: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        objProc: Tcl_CmdObjTraceProc,
        clientData: ClientData,
        delProc: Tcl_CmdObjTraceDeleteProc,
    ) -> Tcl_Trace;
}
extern "C" {
    pub fn Tcl_GetCommandInfoFromToken(
        token: Tcl_Command,
        infoPtr: *mut Tcl_CmdInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_SetCommandInfoFromToken(
        token: Tcl_Command,
        infoPtr: *const Tcl_CmdInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_DbNewWideIntObj(
        wideValue: Tcl_WideInt,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_GetWideIntFromObj(
        interp: *mut Tcl_Interp,
        objPtr: *mut Tcl_Obj,
        widePtr: *mut Tcl_WideInt,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_NewWideIntObj(wideValue: Tcl_WideInt) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_SetWideIntObj(objPtr: *mut Tcl_Obj, wideValue: Tcl_WideInt);
}
extern "C" {
    pub fn Tcl_AllocStatBuf() -> *mut Tcl_StatBuf;
}
extern "C" {
    pub fn Tcl_Seek(
        chan: Tcl_Channel,
        offset: Tcl_WideInt,
        mode: ::std::os::raw::c_int,
    ) -> Tcl_WideInt;
}
extern "C" {
    pub fn Tcl_Tell(chan: Tcl_Channel) -> Tcl_WideInt;
}
extern "C" {
    pub fn Tcl_ChannelWideSeekProc(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverWideSeekProc;
}
extern "C" {
    pub fn Tcl_DictObjPut(
        interp: *mut Tcl_Interp,
        dictPtr: *mut Tcl_Obj,
        keyPtr: *mut Tcl_Obj,
        valuePtr: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_DictObjGet(
        interp: *mut Tcl_Interp,
        dictPtr: *mut Tcl_Obj,
        keyPtr: *mut Tcl_Obj,
        valuePtrPtr: *mut *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_DictObjRemove(
        interp: *mut Tcl_Interp,
        dictPtr: *mut Tcl_Obj,
        keyPtr: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_DictObjSize(
        interp: *mut Tcl_Interp,
        dictPtr: *mut Tcl_Obj,
        sizePtr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_DictObjFirst(
        interp: *mut Tcl_Interp,
        dictPtr: *mut Tcl_Obj,
        searchPtr: *mut Tcl_DictSearch,
        keyPtrPtr: *mut *mut Tcl_Obj,
        valuePtrPtr: *mut *mut Tcl_Obj,
        donePtr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_DictObjNext(
        searchPtr: *mut Tcl_DictSearch,
        keyPtrPtr: *mut *mut Tcl_Obj,
        valuePtrPtr: *mut *mut Tcl_Obj,
        donePtr: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Tcl_DictObjDone(searchPtr: *mut Tcl_DictSearch);
}
extern "C" {
    pub fn Tcl_DictObjPutKeyList(
        interp: *mut Tcl_Interp,
        dictPtr: *mut Tcl_Obj,
        keyc: ::std::os::raw::c_int,
        keyv: *const *mut Tcl_Obj,
        valuePtr: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_DictObjRemoveKeyList(
        interp: *mut Tcl_Interp,
        dictPtr: *mut Tcl_Obj,
        keyc: ::std::os::raw::c_int,
        keyv: *const *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_NewDictObj() -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_DbNewDictObj(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_RegisterConfig(
        interp: *mut Tcl_Interp,
        pkgName: *const ::std::os::raw::c_char,
        configuration: *const Tcl_Config,
        valEncoding: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Tcl_CreateNamespace(
        interp: *mut Tcl_Interp,
        name: *const ::std::os::raw::c_char,
        clientData: ClientData,
        deleteProc: Tcl_NamespaceDeleteProc,
    ) -> *mut Tcl_Namespace;
}
extern "C" {
    pub fn Tcl_DeleteNamespace(nsPtr: *mut Tcl_Namespace);
}
extern "C" {
    pub fn Tcl_AppendExportList(
        interp: *mut Tcl_Interp,
        nsPtr: *mut Tcl_Namespace,
        objPtr: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_Export(
        interp: *mut Tcl_Interp,
        nsPtr: *mut Tcl_Namespace,
        pattern: *const ::std::os::raw::c_char,
        resetListFirst: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_Import(
        interp: *mut Tcl_Interp,
        nsPtr: *mut Tcl_Namespace,
        pattern: *const ::std::os::raw::c_char,
        allowOverwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ForgetImport(
        interp: *mut Tcl_Interp,
        nsPtr: *mut Tcl_Namespace,
        pattern: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetCurrentNamespace(interp: *mut Tcl_Interp) -> *mut Tcl_Namespace;
}
extern "C" {
    pub fn Tcl_GetGlobalNamespace(interp: *mut Tcl_Interp) -> *mut Tcl_Namespace;
}
extern "C" {
    pub fn Tcl_FindNamespace(
        interp: *mut Tcl_Interp,
        name: *const ::std::os::raw::c_char,
        contextNsPtr: *mut Tcl_Namespace,
        flags: ::std::os::raw::c_int,
    ) -> *mut Tcl_Namespace;
}
extern "C" {
    pub fn Tcl_FindCommand(
        interp: *mut Tcl_Interp,
        name: *const ::std::os::raw::c_char,
        contextNsPtr: *mut Tcl_Namespace,
        flags: ::std::os::raw::c_int,
    ) -> Tcl_Command;
}
extern "C" {
    pub fn Tcl_GetCommandFromObj(interp: *mut Tcl_Interp, objPtr: *mut Tcl_Obj) -> Tcl_Command;
}
extern "C" {
    pub fn Tcl_GetCommandFullName(
        interp: *mut Tcl_Interp,
        command: Tcl_Command,
        objPtr: *mut Tcl_Obj,
    );
}
extern "C" {
    pub fn Tcl_FSEvalFileEx(
        interp: *mut Tcl_Interp,
        fileName: *mut Tcl_Obj,
        encodingName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_SetExitProc(proc_: Tcl_ExitProc) -> Tcl_ExitProc;
}
extern "C" {
    pub fn Tcl_LimitAddHandler(
        interp: *mut Tcl_Interp,
        type_: ::std::os::raw::c_int,
        handlerProc: Tcl_LimitHandlerProc,
        clientData: ClientData,
        deleteProc: Tcl_LimitHandlerDeleteProc,
    );
}
extern "C" {
    pub fn Tcl_LimitRemoveHandler(
        interp: *mut Tcl_Interp,
        type_: ::std::os::raw::c_int,
        handlerProc: Tcl_LimitHandlerProc,
        clientData: ClientData,
    );
}
extern "C" {
    pub fn Tcl_LimitReady(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_LimitCheck(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_LimitExceeded(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_LimitSetCommands(interp: *mut Tcl_Interp, commandLimit: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Tcl_LimitSetTime(interp: *mut Tcl_Interp, timeLimitPtr: *mut Tcl_Time);
}
extern "C" {
    pub fn Tcl_LimitSetGranularity(
        interp: *mut Tcl_Interp,
        type_: ::std::os::raw::c_int,
        granularity: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Tcl_LimitTypeEnabled(
        interp: *mut Tcl_Interp,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_LimitTypeExceeded(
        interp: *mut Tcl_Interp,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_LimitTypeSet(interp: *mut Tcl_Interp, type_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Tcl_LimitTypeReset(interp: *mut Tcl_Interp, type_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Tcl_LimitGetCommands(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_LimitGetTime(interp: *mut Tcl_Interp, timeLimitPtr: *mut Tcl_Time);
}
extern "C" {
    pub fn Tcl_LimitGetGranularity(
        interp: *mut Tcl_Interp,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_SaveInterpState(
        interp: *mut Tcl_Interp,
        status: ::std::os::raw::c_int,
    ) -> Tcl_InterpState;
}
extern "C" {
    pub fn Tcl_RestoreInterpState(
        interp: *mut Tcl_Interp,
        state: Tcl_InterpState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_DiscardInterpState(state: Tcl_InterpState);
}
extern "C" {
    pub fn Tcl_SetReturnOptions(
        interp: *mut Tcl_Interp,
        options: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetReturnOptions(
        interp: *mut Tcl_Interp,
        result: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_IsEnsemble(token: Tcl_Command) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_CreateEnsemble(
        interp: *mut Tcl_Interp,
        name: *const ::std::os::raw::c_char,
        namespacePtr: *mut Tcl_Namespace,
        flags: ::std::os::raw::c_int,
    ) -> Tcl_Command;
}
extern "C" {
    pub fn Tcl_FindEnsemble(
        interp: *mut Tcl_Interp,
        cmdNameObj: *mut Tcl_Obj,
        flags: ::std::os::raw::c_int,
    ) -> Tcl_Command;
}
extern "C" {
    pub fn Tcl_SetEnsembleSubcommandList(
        interp: *mut Tcl_Interp,
        token: Tcl_Command,
        subcmdList: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_SetEnsembleMappingDict(
        interp: *mut Tcl_Interp,
        token: Tcl_Command,
        mapDict: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_SetEnsembleUnknownHandler(
        interp: *mut Tcl_Interp,
        token: Tcl_Command,
        unknownList: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_SetEnsembleFlags(
        interp: *mut Tcl_Interp,
        token: Tcl_Command,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetEnsembleSubcommandList(
        interp: *mut Tcl_Interp,
        token: Tcl_Command,
        subcmdListPtr: *mut *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetEnsembleMappingDict(
        interp: *mut Tcl_Interp,
        token: Tcl_Command,
        mapDictPtr: *mut *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetEnsembleUnknownHandler(
        interp: *mut Tcl_Interp,
        token: Tcl_Command,
        unknownListPtr: *mut *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetEnsembleFlags(
        interp: *mut Tcl_Interp,
        token: Tcl_Command,
        flagsPtr: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetEnsembleNamespace(
        interp: *mut Tcl_Interp,
        token: Tcl_Command,
        namespacePtrPtr: *mut *mut Tcl_Namespace,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_SetTimeProc(
        getProc: Tcl_GetTimeProc,
        scaleProc: Tcl_ScaleTimeProc,
        clientData: ClientData,
    );
}
extern "C" {
    pub fn Tcl_QueryTimeProc(
        getProc: *mut Tcl_GetTimeProc,
        scaleProc: *mut Tcl_ScaleTimeProc,
        clientData: *mut ClientData,
    );
}
extern "C" {
    pub fn Tcl_ChannelThreadActionProc(
        chanTypePtr: *const Tcl_ChannelType,
    ) -> Tcl_DriverThreadActionProc;
}
extern "C" {
    pub fn Tcl_NewBignumObj(value: *mut mp_int) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_DbNewBignumObj(
        value: *mut mp_int,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_SetBignumObj(obj: *mut Tcl_Obj, value: *mut mp_int);
}
extern "C" {
    pub fn Tcl_GetBignumFromObj(
        interp: *mut Tcl_Interp,
        obj: *mut Tcl_Obj,
        value: *mut mp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_TakeBignumFromObj(
        interp: *mut Tcl_Interp,
        obj: *mut Tcl_Obj,
        value: *mut mp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_TruncateChannel(chan: Tcl_Channel, length: Tcl_WideInt) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ChannelTruncateProc(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverTruncateProc;
}
extern "C" {
    pub fn Tcl_SetChannelErrorInterp(interp: *mut Tcl_Interp, msg: *mut Tcl_Obj);
}
extern "C" {
    pub fn Tcl_GetChannelErrorInterp(interp: *mut Tcl_Interp, msg: *mut *mut Tcl_Obj);
}
extern "C" {
    pub fn Tcl_SetChannelError(chan: Tcl_Channel, msg: *mut Tcl_Obj);
}
extern "C" {
    pub fn Tcl_GetChannelError(chan: Tcl_Channel, msg: *mut *mut Tcl_Obj);
}
extern "C" {
    pub fn Tcl_InitBignumFromDouble(
        interp: *mut Tcl_Interp,
        initval: f64,
        toInit: *mut mp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetNamespaceUnknownHandler(
        interp: *mut Tcl_Interp,
        nsPtr: *mut Tcl_Namespace,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_SetNamespaceUnknownHandler(
        interp: *mut Tcl_Interp,
        nsPtr: *mut Tcl_Namespace,
        handlerPtr: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetEncodingFromObj(
        interp: *mut Tcl_Interp,
        objPtr: *mut Tcl_Obj,
        encodingPtr: *mut Tcl_Encoding,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetEncodingSearchPath() -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_SetEncodingSearchPath(searchPath: *mut Tcl_Obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetEncodingNameFromEnvironment(
        bufPtr: *mut Tcl_DString,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tcl_PkgRequireProc(
        interp: *mut Tcl_Interp,
        name: *const ::std::os::raw::c_char,
        objc: ::std::os::raw::c_int,
        objv: *const *mut Tcl_Obj,
        clientDataPtr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_AppendObjToErrorInfo(interp: *mut Tcl_Interp, objPtr: *mut Tcl_Obj);
}
extern "C" {
    pub fn Tcl_AppendLimitedToObj(
        objPtr: *mut Tcl_Obj,
        bytes: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_int,
        limit: ::std::os::raw::c_int,
        ellipsis: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Tcl_Format(
        interp: *mut Tcl_Interp,
        format: *const ::std::os::raw::c_char,
        objc: ::std::os::raw::c_int,
        objv: *const *mut Tcl_Obj,
    ) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_AppendFormatToObj(
        interp: *mut Tcl_Interp,
        objPtr: *mut Tcl_Obj,
        format: *const ::std::os::raw::c_char,
        objc: ::std::os::raw::c_int,
        objv: *const *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ObjPrintf(format: *const ::std::os::raw::c_char, ...) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_AppendPrintfToObj(objPtr: *mut Tcl_Obj, format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn Tcl_CancelEval(
        interp: *mut Tcl_Interp,
        resultObjPtr: *mut Tcl_Obj,
        clientData: ClientData,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_Canceled(
        interp: *mut Tcl_Interp,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_CreatePipe(
        interp: *mut Tcl_Interp,
        rchan: *mut Tcl_Channel,
        wchan: *mut Tcl_Channel,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_NRCreateCommand(
        interp: *mut Tcl_Interp,
        cmdName: *const ::std::os::raw::c_char,
        proc_: Tcl_ObjCmdProc,
        nreProc: Tcl_ObjCmdProc,
        clientData: ClientData,
        deleteProc: Tcl_CmdDeleteProc,
    ) -> Tcl_Command;
}
extern "C" {
    pub fn Tcl_NREvalObj(
        interp: *mut Tcl_Interp,
        objPtr: *mut Tcl_Obj,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_NREvalObjv(
        interp: *mut Tcl_Interp,
        objc: ::std::os::raw::c_int,
        objv: *const *mut Tcl_Obj,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_NRCmdSwap(
        interp: *mut Tcl_Interp,
        cmd: Tcl_Command,
        objc: ::std::os::raw::c_int,
        objv: *const *mut Tcl_Obj,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_NRAddCallback(
        interp: *mut Tcl_Interp,
        postProcPtr: Tcl_NRPostProc,
        data0: ClientData,
        data1: ClientData,
        data2: ClientData,
        data3: ClientData,
    );
}
extern "C" {
    pub fn Tcl_NRCallObjProc(
        interp: *mut Tcl_Interp,
        objProc: Tcl_ObjCmdProc,
        clientData: ClientData,
        objc: ::std::os::raw::c_int,
        objv: *const *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetFSDeviceFromStat(statPtr: *const Tcl_StatBuf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Tcl_GetFSInodeFromStat(statPtr: *const Tcl_StatBuf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Tcl_GetModeFromStat(statPtr: *const Tcl_StatBuf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Tcl_GetLinkCountFromStat(statPtr: *const Tcl_StatBuf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetUserIdFromStat(statPtr: *const Tcl_StatBuf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetGroupIdFromStat(statPtr: *const Tcl_StatBuf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetDeviceTypeFromStat(statPtr: *const Tcl_StatBuf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetAccessTimeFromStat(statPtr: *const Tcl_StatBuf) -> Tcl_WideInt;
}
extern "C" {
    pub fn Tcl_GetModificationTimeFromStat(statPtr: *const Tcl_StatBuf) -> Tcl_WideInt;
}
extern "C" {
    pub fn Tcl_GetChangeTimeFromStat(statPtr: *const Tcl_StatBuf) -> Tcl_WideInt;
}
extern "C" {
    pub fn Tcl_GetSizeFromStat(statPtr: *const Tcl_StatBuf) -> Tcl_WideUInt;
}
extern "C" {
    pub fn Tcl_GetBlocksFromStat(statPtr: *const Tcl_StatBuf) -> Tcl_WideUInt;
}
extern "C" {
    pub fn Tcl_GetBlockSizeFromStat(statPtr: *const Tcl_StatBuf) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Tcl_SetEnsembleParameterList(
        interp: *mut Tcl_Interp,
        token: Tcl_Command,
        paramList: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetEnsembleParameterList(
        interp: *mut Tcl_Interp,
        token: Tcl_Command,
        paramListPtr: *mut *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ParseArgsObjv(
        interp: *mut Tcl_Interp,
        argTable: *const Tcl_ArgvInfo,
        objcPtr: *mut ::std::os::raw::c_int,
        objv: *const *mut Tcl_Obj,
        remObjv: *mut *mut *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_GetErrorLine(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_SetErrorLine(interp: *mut Tcl_Interp, lineNum: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Tcl_TransferResult(
        sourceInterp: *mut Tcl_Interp,
        code: ::std::os::raw::c_int,
        targetInterp: *mut Tcl_Interp,
    );
}
extern "C" {
    pub fn Tcl_InterpActive(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_BackgroundException(interp: *mut Tcl_Interp, code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Tcl_ZlibDeflate(
        interp: *mut Tcl_Interp,
        format: ::std::os::raw::c_int,
        data: *mut Tcl_Obj,
        level: ::std::os::raw::c_int,
        gzipHeaderDictObj: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ZlibInflate(
        interp: *mut Tcl_Interp,
        format: ::std::os::raw::c_int,
        data: *mut Tcl_Obj,
        buffersize: ::std::os::raw::c_int,
        gzipHeaderDictObj: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ZlibCRC32(
        crc: ::std::os::raw::c_uint,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Tcl_ZlibAdler32(
        adler: ::std::os::raw::c_uint,
        buf: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Tcl_ZlibStreamInit(
        interp: *mut Tcl_Interp,
        mode: ::std::os::raw::c_int,
        format: ::std::os::raw::c_int,
        level: ::std::os::raw::c_int,
        dictObj: *mut Tcl_Obj,
        zshandle: *mut Tcl_ZlibStream,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ZlibStreamGetCommandName(zshandle: Tcl_ZlibStream) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_ZlibStreamEof(zshandle: Tcl_ZlibStream) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ZlibStreamChecksum(zshandle: Tcl_ZlibStream) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ZlibStreamPut(
        zshandle: Tcl_ZlibStream,
        data: *mut Tcl_Obj,
        flush: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ZlibStreamGet(
        zshandle: Tcl_ZlibStream,
        data: *mut Tcl_Obj,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ZlibStreamClose(zshandle: Tcl_ZlibStream) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ZlibStreamReset(zshandle: Tcl_ZlibStream) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_SetStartupScript(path: *mut Tcl_Obj, encoding: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Tcl_GetStartupScript(encodingPtr: *mut *const ::std::os::raw::c_char) -> *mut Tcl_Obj;
}
extern "C" {
    pub fn Tcl_CloseEx(
        interp: *mut Tcl_Interp,
        chan: Tcl_Channel,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_NRExprObj(
        interp: *mut Tcl_Interp,
        objPtr: *mut Tcl_Obj,
        resultPtr: *mut Tcl_Obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_NRSubstObj(
        interp: *mut Tcl_Interp,
        objPtr: *mut Tcl_Obj,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_LoadFile(
        interp: *mut Tcl_Interp,
        pathPtr: *mut Tcl_Obj,
        symv: *const *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
        procPtrs: *mut ::std::os::raw::c_void,
        handlePtr: *mut Tcl_LoadHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_FindSymbol(
        interp: *mut Tcl_Interp,
        handle: Tcl_LoadHandle,
        symbol: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn Tcl_FSUnloadFile(
        interp: *mut Tcl_Interp,
        handlePtr: Tcl_LoadHandle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Tcl_ZlibStreamSetCompressionDictionary(
        zhandle: Tcl_ZlibStream,
        compressionDictionaryObj: *mut Tcl_Obj,
    );
}
extern "C" {
    pub fn TclUnusedStubEntry();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TclStubHooks {
    pub tclPlatStubs: *const TclPlatStubs,
    pub tclIntStubs: *mut TclIntStubs,
    pub tclIntPlatStubs: *mut TclIntPlatStubs,
}
#[test]
fn bindgen_test_layout_TclStubHooks() {
    assert_eq!(
        ::std::mem::size_of::<TclStubHooks>(),
        24usize,
        concat!("Size of: ", stringify!(TclStubHooks))
    );
    assert_eq!(
        ::std::mem::align_of::<TclStubHooks>(),
        8usize,
        concat!("Alignment of ", stringify!(TclStubHooks))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubHooks>())).tclPlatStubs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubHooks),
            "::",
            stringify!(tclPlatStubs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubHooks>())).tclIntStubs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubHooks),
            "::",
            stringify!(tclIntStubs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubHooks>())).tclIntPlatStubs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubHooks),
            "::",
            stringify!(tclIntPlatStubs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TclStubs {
    pub magic: ::std::os::raw::c_int,
    pub hooks: *const TclStubHooks,
    pub tcl_PkgProvideEx: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            name: *const ::std::os::raw::c_char,
            version: *const ::std::os::raw::c_char,
            clientData: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_PkgRequireEx: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            name: *const ::std::os::raw::c_char,
            version: *const ::std::os::raw::c_char,
            exact: ::std::os::raw::c_int,
            clientDataPtr: *mut ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_Panic:
        ::std::option::Option<unsafe extern "C" fn(format: *const ::std::os::raw::c_char, ...)>,
    pub tcl_Alloc: ::std::option::Option<
        unsafe extern "C" fn(size: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_char,
    >,
    pub tcl_Free: ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_char)>,
    pub tcl_Realloc: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_char,
            size: ::std::os::raw::c_uint,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub tcl_DbCkalloc: ::std::option::Option<
        unsafe extern "C" fn(
            size: ::std::os::raw::c_uint,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub tcl_DbCkfree: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_char,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
        ),
    >,
    pub tcl_DbCkrealloc: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_char,
            size: ::std::os::raw::c_uint,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub tcl_CreateFileHandler: ::std::option::Option<
        unsafe extern "C" fn(
            fd: ::std::os::raw::c_int,
            mask: ::std::os::raw::c_int,
            proc_: Tcl_FileProc,
            clientData: ClientData,
        ),
    >,
    pub tcl_DeleteFileHandler:
        ::std::option::Option<unsafe extern "C" fn(fd: ::std::os::raw::c_int)>,
    pub tcl_SetTimer: ::std::option::Option<unsafe extern "C" fn(timePtr: *const Tcl_Time)>,
    pub tcl_Sleep: ::std::option::Option<unsafe extern "C" fn(ms: ::std::os::raw::c_int)>,
    pub tcl_WaitForEvent: ::std::option::Option<
        unsafe extern "C" fn(timePtr: *const Tcl_Time) -> ::std::os::raw::c_int,
    >,
    pub tcl_AppendAllObjTypes: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objPtr: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_AppendStringsToObj:
        ::std::option::Option<unsafe extern "C" fn(objPtr: *mut Tcl_Obj, ...)>,
    pub tcl_AppendToObj: ::std::option::Option<
        unsafe extern "C" fn(
            objPtr: *mut Tcl_Obj,
            bytes: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_int,
        ),
    >,
    pub tcl_ConcatObj: ::std::option::Option<
        unsafe extern "C" fn(
            objc: ::std::os::raw::c_int,
            objv: *const *mut Tcl_Obj,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_ConvertToType: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objPtr: *mut Tcl_Obj,
            typePtr: *const Tcl_ObjType,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_DbDecrRefCount: ::std::option::Option<
        unsafe extern "C" fn(
            objPtr: *mut Tcl_Obj,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
        ),
    >,
    pub tcl_DbIncrRefCount: ::std::option::Option<
        unsafe extern "C" fn(
            objPtr: *mut Tcl_Obj,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
        ),
    >,
    pub tcl_DbIsShared: ::std::option::Option<
        unsafe extern "C" fn(
            objPtr: *mut Tcl_Obj,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_DbNewBooleanObj: ::std::option::Option<
        unsafe extern "C" fn(
            boolValue: ::std::os::raw::c_int,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_DbNewByteArrayObj: ::std::option::Option<
        unsafe extern "C" fn(
            bytes: *const ::std::os::raw::c_uchar,
            length: ::std::os::raw::c_int,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_DbNewDoubleObj: ::std::option::Option<
        unsafe extern "C" fn(
            doubleValue: f64,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_DbNewListObj: ::std::option::Option<
        unsafe extern "C" fn(
            objc: ::std::os::raw::c_int,
            objv: *const *mut Tcl_Obj,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_DbNewLongObj: ::std::option::Option<
        unsafe extern "C" fn(
            longValue: ::std::os::raw::c_long,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_DbNewObj: ::std::option::Option<
        unsafe extern "C" fn(
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_DbNewStringObj: ::std::option::Option<
        unsafe extern "C" fn(
            bytes: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_int,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_DuplicateObj:
        ::std::option::Option<unsafe extern "C" fn(objPtr: *mut Tcl_Obj) -> *mut Tcl_Obj>,
    pub tclFreeObj: ::std::option::Option<unsafe extern "C" fn(objPtr: *mut Tcl_Obj)>,
    pub tcl_GetBoolean: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            src: *const ::std::os::raw::c_char,
            boolPtr: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetBooleanFromObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objPtr: *mut Tcl_Obj,
            boolPtr: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetByteArrayFromObj: ::std::option::Option<
        unsafe extern "C" fn(
            objPtr: *mut Tcl_Obj,
            lengthPtr: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_uchar,
    >,
    pub tcl_GetDouble: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            src: *const ::std::os::raw::c_char,
            doublePtr: *mut f64,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetDoubleFromObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objPtr: *mut Tcl_Obj,
            doublePtr: *mut f64,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetIndexFromObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objPtr: *mut Tcl_Obj,
            tablePtr: *const *const ::std::os::raw::c_char,
            msg: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            indexPtr: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetInt: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            src: *const ::std::os::raw::c_char,
            intPtr: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetIntFromObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objPtr: *mut Tcl_Obj,
            intPtr: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetLongFromObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objPtr: *mut Tcl_Obj,
            longPtr: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetObjType: ::std::option::Option<
        unsafe extern "C" fn(typeName: *const ::std::os::raw::c_char) -> *const Tcl_ObjType,
    >,
    pub tcl_GetStringFromObj: ::std::option::Option<
        unsafe extern "C" fn(
            objPtr: *mut Tcl_Obj,
            lengthPtr: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub tcl_InvalidateStringRep: ::std::option::Option<unsafe extern "C" fn(objPtr: *mut Tcl_Obj)>,
    pub tcl_ListObjAppendList: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            listPtr: *mut Tcl_Obj,
            elemListPtr: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ListObjAppendElement: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            listPtr: *mut Tcl_Obj,
            objPtr: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ListObjGetElements: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            listPtr: *mut Tcl_Obj,
            objcPtr: *mut ::std::os::raw::c_int,
            objvPtr: *mut *mut *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ListObjIndex: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            listPtr: *mut Tcl_Obj,
            index: ::std::os::raw::c_int,
            objPtrPtr: *mut *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ListObjLength: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            listPtr: *mut Tcl_Obj,
            lengthPtr: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ListObjReplace: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            listPtr: *mut Tcl_Obj,
            first: ::std::os::raw::c_int,
            count: ::std::os::raw::c_int,
            objc: ::std::os::raw::c_int,
            objv: *const *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_NewBooleanObj: ::std::option::Option<
        unsafe extern "C" fn(boolValue: ::std::os::raw::c_int) -> *mut Tcl_Obj,
    >,
    pub tcl_NewByteArrayObj: ::std::option::Option<
        unsafe extern "C" fn(
            bytes: *const ::std::os::raw::c_uchar,
            length: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_NewDoubleObj:
        ::std::option::Option<unsafe extern "C" fn(doubleValue: f64) -> *mut Tcl_Obj>,
    pub tcl_NewIntObj: ::std::option::Option<
        unsafe extern "C" fn(intValue: ::std::os::raw::c_int) -> *mut Tcl_Obj,
    >,
    pub tcl_NewListObj: ::std::option::Option<
        unsafe extern "C" fn(
            objc: ::std::os::raw::c_int,
            objv: *const *mut Tcl_Obj,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_NewLongObj: ::std::option::Option<
        unsafe extern "C" fn(longValue: ::std::os::raw::c_long) -> *mut Tcl_Obj,
    >,
    pub tcl_NewObj: ::std::option::Option<unsafe extern "C" fn() -> *mut Tcl_Obj>,
    pub tcl_NewStringObj: ::std::option::Option<
        unsafe extern "C" fn(
            bytes: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_SetBooleanObj: ::std::option::Option<
        unsafe extern "C" fn(objPtr: *mut Tcl_Obj, boolValue: ::std::os::raw::c_int),
    >,
    pub tcl_SetByteArrayLength: ::std::option::Option<
        unsafe extern "C" fn(
            objPtr: *mut Tcl_Obj,
            length: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_uchar,
    >,
    pub tcl_SetByteArrayObj: ::std::option::Option<
        unsafe extern "C" fn(
            objPtr: *mut Tcl_Obj,
            bytes: *const ::std::os::raw::c_uchar,
            length: ::std::os::raw::c_int,
        ),
    >,
    pub tcl_SetDoubleObj:
        ::std::option::Option<unsafe extern "C" fn(objPtr: *mut Tcl_Obj, doubleValue: f64)>,
    pub tcl_SetIntObj: ::std::option::Option<
        unsafe extern "C" fn(objPtr: *mut Tcl_Obj, intValue: ::std::os::raw::c_int),
    >,
    pub tcl_SetListObj: ::std::option::Option<
        unsafe extern "C" fn(
            objPtr: *mut Tcl_Obj,
            objc: ::std::os::raw::c_int,
            objv: *const *mut Tcl_Obj,
        ),
    >,
    pub tcl_SetLongObj: ::std::option::Option<
        unsafe extern "C" fn(objPtr: *mut Tcl_Obj, longValue: ::std::os::raw::c_long),
    >,
    pub tcl_SetObjLength: ::std::option::Option<
        unsafe extern "C" fn(objPtr: *mut Tcl_Obj, length: ::std::os::raw::c_int),
    >,
    pub tcl_SetStringObj: ::std::option::Option<
        unsafe extern "C" fn(
            objPtr: *mut Tcl_Obj,
            bytes: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_int,
        ),
    >,
    pub tcl_AddErrorInfo: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, message: *const ::std::os::raw::c_char),
    >,
    pub tcl_AddObjErrorInfo: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            message: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_int,
        ),
    >,
    pub tcl_AllowExceptions: ::std::option::Option<unsafe extern "C" fn(interp: *mut Tcl_Interp)>,
    pub tcl_AppendElement: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, element: *const ::std::os::raw::c_char),
    >,
    pub tcl_AppendResult: ::std::option::Option<unsafe extern "C" fn(interp: *mut Tcl_Interp, ...)>,
    pub tcl_AsyncCreate: ::std::option::Option<
        unsafe extern "C" fn(proc_: Tcl_AsyncProc, clientData: ClientData) -> Tcl_AsyncHandler,
    >,
    pub tcl_AsyncDelete: ::std::option::Option<unsafe extern "C" fn(async_: Tcl_AsyncHandler)>,
    pub tcl_AsyncInvoke: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            code: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_AsyncMark: ::std::option::Option<unsafe extern "C" fn(async_: Tcl_AsyncHandler)>,
    pub tcl_AsyncReady: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub tcl_BackgroundError: ::std::option::Option<unsafe extern "C" fn(interp: *mut Tcl_Interp)>,
    pub tcl_Backslash: ::std::option::Option<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_char,
            readPtr: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_char,
    >,
    pub tcl_BadChannelOption: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            optionName: *const ::std::os::raw::c_char,
            optionList: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_CallWhenDeleted: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            proc_: Tcl_InterpDeleteProc,
            clientData: ClientData,
        ),
    >,
    pub tcl_CancelIdleCall:
        ::std::option::Option<unsafe extern "C" fn(idleProc: Tcl_IdleProc, clientData: ClientData)>,
    pub tcl_Close: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, chan: Tcl_Channel) -> ::std::os::raw::c_int,
    >,
    pub tcl_CommandComplete: ::std::option::Option<
        unsafe extern "C" fn(cmd: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub tcl_Concat: ::std::option::Option<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *const *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub tcl_ConvertElement: ::std::option::Option<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_char,
            dst: *mut ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ConvertCountedElement: ::std::option::Option<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_int,
            dst: *mut ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_CreateAlias: ::std::option::Option<
        unsafe extern "C" fn(
            childInterp: *mut Tcl_Interp,
            childCmd: *const ::std::os::raw::c_char,
            target: *mut Tcl_Interp,
            targetCmd: *const ::std::os::raw::c_char,
            argc: ::std::os::raw::c_int,
            argv: *const *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_CreateAliasObj: ::std::option::Option<
        unsafe extern "C" fn(
            childInterp: *mut Tcl_Interp,
            childCmd: *const ::std::os::raw::c_char,
            target: *mut Tcl_Interp,
            targetCmd: *const ::std::os::raw::c_char,
            objc: ::std::os::raw::c_int,
            objv: *const *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_CreateChannel: ::std::option::Option<
        unsafe extern "C" fn(
            typePtr: *const Tcl_ChannelType,
            chanName: *const ::std::os::raw::c_char,
            instanceData: ClientData,
            mask: ::std::os::raw::c_int,
        ) -> Tcl_Channel,
    >,
    pub tcl_CreateChannelHandler: ::std::option::Option<
        unsafe extern "C" fn(
            chan: Tcl_Channel,
            mask: ::std::os::raw::c_int,
            proc_: Tcl_ChannelProc,
            clientData: ClientData,
        ),
    >,
    pub tcl_CreateCloseHandler: ::std::option::Option<
        unsafe extern "C" fn(chan: Tcl_Channel, proc_: Tcl_CloseProc, clientData: ClientData),
    >,
    pub tcl_CreateCommand: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            cmdName: *const ::std::os::raw::c_char,
            proc_: Tcl_CmdProc,
            clientData: ClientData,
            deleteProc: Tcl_CmdDeleteProc,
        ) -> Tcl_Command,
    >,
    pub tcl_CreateEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            setupProc: Tcl_EventSetupProc,
            checkProc: Tcl_EventCheckProc,
            clientData: ClientData,
        ),
    >,
    pub tcl_CreateExitHandler:
        ::std::option::Option<unsafe extern "C" fn(proc_: Tcl_ExitProc, clientData: ClientData)>,
    pub tcl_CreateInterp: ::std::option::Option<unsafe extern "C" fn() -> *mut Tcl_Interp>,
    pub tcl_CreateMathFunc: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            name: *const ::std::os::raw::c_char,
            numArgs: ::std::os::raw::c_int,
            argTypes: *mut Tcl_ValueType,
            proc_: Tcl_MathProc,
            clientData: ClientData,
        ),
    >,
    pub tcl_CreateObjCommand: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            cmdName: *const ::std::os::raw::c_char,
            proc_: Tcl_ObjCmdProc,
            clientData: ClientData,
            deleteProc: Tcl_CmdDeleteProc,
        ) -> Tcl_Command,
    >,
    pub tcl_CreateSlave: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            name: *const ::std::os::raw::c_char,
            isSafe: ::std::os::raw::c_int,
        ) -> *mut Tcl_Interp,
    >,
    pub tcl_CreateTimerHandler: ::std::option::Option<
        unsafe extern "C" fn(
            milliseconds: ::std::os::raw::c_int,
            proc_: Tcl_TimerProc,
            clientData: ClientData,
        ) -> Tcl_TimerToken,
    >,
    pub tcl_CreateTrace: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            level: ::std::os::raw::c_int,
            proc_: Tcl_CmdTraceProc,
            clientData: ClientData,
        ) -> Tcl_Trace,
    >,
    pub tcl_DeleteAssocData: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, name: *const ::std::os::raw::c_char),
    >,
    pub tcl_DeleteChannelHandler: ::std::option::Option<
        unsafe extern "C" fn(chan: Tcl_Channel, proc_: Tcl_ChannelProc, clientData: ClientData),
    >,
    pub tcl_DeleteCloseHandler: ::std::option::Option<
        unsafe extern "C" fn(chan: Tcl_Channel, proc_: Tcl_CloseProc, clientData: ClientData),
    >,
    pub tcl_DeleteCommand: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            cmdName: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_DeleteCommandFromToken: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            command: Tcl_Command,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_DeleteEvents: ::std::option::Option<
        unsafe extern "C" fn(proc_: Tcl_EventDeleteProc, clientData: ClientData),
    >,
    pub tcl_DeleteEventSource: ::std::option::Option<
        unsafe extern "C" fn(
            setupProc: Tcl_EventSetupProc,
            checkProc: Tcl_EventCheckProc,
            clientData: ClientData,
        ),
    >,
    pub tcl_DeleteExitHandler:
        ::std::option::Option<unsafe extern "C" fn(proc_: Tcl_ExitProc, clientData: ClientData)>,
    pub tcl_DeleteHashEntry:
        ::std::option::Option<unsafe extern "C" fn(entryPtr: *mut Tcl_HashEntry)>,
    pub tcl_DeleteHashTable:
        ::std::option::Option<unsafe extern "C" fn(tablePtr: *mut Tcl_HashTable)>,
    pub tcl_DeleteInterp: ::std::option::Option<unsafe extern "C" fn(interp: *mut Tcl_Interp)>,
    pub tcl_DetachPids: ::std::option::Option<
        unsafe extern "C" fn(numPids: ::std::os::raw::c_int, pidPtr: *mut Tcl_Pid),
    >,
    pub tcl_DeleteTimerHandler: ::std::option::Option<unsafe extern "C" fn(token: Tcl_TimerToken)>,
    pub tcl_DeleteTrace:
        ::std::option::Option<unsafe extern "C" fn(interp: *mut Tcl_Interp, trace: Tcl_Trace)>,
    pub tcl_DontCallWhenDeleted: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            proc_: Tcl_InterpDeleteProc,
            clientData: ClientData,
        ),
    >,
    pub tcl_DoOneEvent: ::std::option::Option<
        unsafe extern "C" fn(flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub tcl_DoWhenIdle:
        ::std::option::Option<unsafe extern "C" fn(proc_: Tcl_IdleProc, clientData: ClientData)>,
    pub tcl_DStringAppend: ::std::option::Option<
        unsafe extern "C" fn(
            dsPtr: *mut Tcl_DString,
            bytes: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub tcl_DStringAppendElement: ::std::option::Option<
        unsafe extern "C" fn(
            dsPtr: *mut Tcl_DString,
            element: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub tcl_DStringEndSublist: ::std::option::Option<unsafe extern "C" fn(dsPtr: *mut Tcl_DString)>,
    pub tcl_DStringFree: ::std::option::Option<unsafe extern "C" fn(dsPtr: *mut Tcl_DString)>,
    pub tcl_DStringGetResult: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, dsPtr: *mut Tcl_DString),
    >,
    pub tcl_DStringInit: ::std::option::Option<unsafe extern "C" fn(dsPtr: *mut Tcl_DString)>,
    pub tcl_DStringResult: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, dsPtr: *mut Tcl_DString),
    >,
    pub tcl_DStringSetLength: ::std::option::Option<
        unsafe extern "C" fn(dsPtr: *mut Tcl_DString, length: ::std::os::raw::c_int),
    >,
    pub tcl_DStringStartSublist:
        ::std::option::Option<unsafe extern "C" fn(dsPtr: *mut Tcl_DString)>,
    pub tcl_Eof:
        ::std::option::Option<unsafe extern "C" fn(chan: Tcl_Channel) -> ::std::os::raw::c_int>,
    pub tcl_ErrnoId: ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub tcl_ErrnoMsg: ::std::option::Option<
        unsafe extern "C" fn(err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_Eval: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            script: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_EvalFile: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            fileName: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_EvalObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objPtr: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_EventuallyFree:
        ::std::option::Option<unsafe extern "C" fn(clientData: ClientData, freeProc: Tcl_FreeProc)>,
    pub tcl_Exit: ::std::option::Option<unsafe extern "C" fn(status: ::std::os::raw::c_int)>,
    pub tcl_ExposeCommand: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            hiddenCmdToken: *const ::std::os::raw::c_char,
            cmdName: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ExprBoolean: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            expr: *const ::std::os::raw::c_char,
            ptr: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ExprBooleanObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objPtr: *mut Tcl_Obj,
            ptr: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ExprDouble: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            expr: *const ::std::os::raw::c_char,
            ptr: *mut f64,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ExprDoubleObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objPtr: *mut Tcl_Obj,
            ptr: *mut f64,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ExprLong: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            expr: *const ::std::os::raw::c_char,
            ptr: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ExprLongObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objPtr: *mut Tcl_Obj,
            ptr: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ExprObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objPtr: *mut Tcl_Obj,
            resultPtrPtr: *mut *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ExprString: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            expr: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_Finalize: ::std::option::Option<unsafe extern "C" fn()>,
    pub tcl_FindExecutable:
        ::std::option::Option<unsafe extern "C" fn(argv0: *const ::std::os::raw::c_char)>,
    pub tcl_FirstHashEntry: ::std::option::Option<
        unsafe extern "C" fn(
            tablePtr: *mut Tcl_HashTable,
            searchPtr: *mut Tcl_HashSearch,
        ) -> *mut Tcl_HashEntry,
    >,
    pub tcl_Flush:
        ::std::option::Option<unsafe extern "C" fn(chan: Tcl_Channel) -> ::std::os::raw::c_int>,
    pub tcl_FreeResult: ::std::option::Option<unsafe extern "C" fn(interp: *mut Tcl_Interp)>,
    pub tcl_GetAlias: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            childCmd: *const ::std::os::raw::c_char,
            targetInterpPtr: *mut *mut Tcl_Interp,
            targetCmdPtr: *mut *const ::std::os::raw::c_char,
            argcPtr: *mut ::std::os::raw::c_int,
            argvPtr: *mut *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetAliasObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            childCmd: *const ::std::os::raw::c_char,
            targetInterpPtr: *mut *mut Tcl_Interp,
            targetCmdPtr: *mut *const ::std::os::raw::c_char,
            objcPtr: *mut ::std::os::raw::c_int,
            objv: *mut *mut *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetAssocData: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            name: *const ::std::os::raw::c_char,
            procPtr: *mut Tcl_InterpDeleteProc,
        ) -> ClientData,
    >,
    pub tcl_GetChannel: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            chanName: *const ::std::os::raw::c_char,
            modePtr: *mut ::std::os::raw::c_int,
        ) -> Tcl_Channel,
    >,
    pub tcl_GetChannelBufferSize:
        ::std::option::Option<unsafe extern "C" fn(chan: Tcl_Channel) -> ::std::os::raw::c_int>,
    pub tcl_GetChannelHandle: ::std::option::Option<
        unsafe extern "C" fn(
            chan: Tcl_Channel,
            direction: ::std::os::raw::c_int,
            handlePtr: *mut ClientData,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetChannelInstanceData:
        ::std::option::Option<unsafe extern "C" fn(chan: Tcl_Channel) -> ClientData>,
    pub tcl_GetChannelMode:
        ::std::option::Option<unsafe extern "C" fn(chan: Tcl_Channel) -> ::std::os::raw::c_int>,
    pub tcl_GetChannelName: ::std::option::Option<
        unsafe extern "C" fn(chan: Tcl_Channel) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_GetChannelOption: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            chan: Tcl_Channel,
            optionName: *const ::std::os::raw::c_char,
            dsPtr: *mut Tcl_DString,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetChannelType:
        ::std::option::Option<unsafe extern "C" fn(chan: Tcl_Channel) -> *const Tcl_ChannelType>,
    pub tcl_GetCommandInfo: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            cmdName: *const ::std::os::raw::c_char,
            infoPtr: *mut Tcl_CmdInfo,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetCommandName: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            command: Tcl_Command,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_GetErrno: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub tcl_GetHostName:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub tcl_GetInterpPath: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            childInterp: *mut Tcl_Interp,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetMaster:
        ::std::option::Option<unsafe extern "C" fn(interp: *mut Tcl_Interp) -> *mut Tcl_Interp>,
    pub tcl_GetNameOfExecutable:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub tcl_GetObjResult:
        ::std::option::Option<unsafe extern "C" fn(interp: *mut Tcl_Interp) -> *mut Tcl_Obj>,
    pub tcl_GetOpenFile: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            chanID: *const ::std::os::raw::c_char,
            forWriting: ::std::os::raw::c_int,
            checkUsage: ::std::os::raw::c_int,
            filePtr: *mut ClientData,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetPathType: ::std::option::Option<
        unsafe extern "C" fn(path: *const ::std::os::raw::c_char) -> Tcl_PathType,
    >,
    pub tcl_Gets: ::std::option::Option<
        unsafe extern "C" fn(chan: Tcl_Channel, dsPtr: *mut Tcl_DString) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetsObj: ::std::option::Option<
        unsafe extern "C" fn(chan: Tcl_Channel, objPtr: *mut Tcl_Obj) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetServiceMode: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub tcl_GetSlave: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            name: *const ::std::os::raw::c_char,
        ) -> *mut Tcl_Interp,
    >,
    pub tcl_GetStdChannel:
        ::std::option::Option<unsafe extern "C" fn(type_: ::std::os::raw::c_int) -> Tcl_Channel>,
    pub tcl_GetStringResult: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_GetVar: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            varName: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_GetVar2: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            part1: *const ::std::os::raw::c_char,
            part2: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_GlobalEval: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            command: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GlobalEvalObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objPtr: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_HideCommand: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            cmdName: *const ::std::os::raw::c_char,
            hiddenCmdToken: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_Init: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int,
    >,
    pub tcl_InitHashTable: ::std::option::Option<
        unsafe extern "C" fn(tablePtr: *mut Tcl_HashTable, keyType: ::std::os::raw::c_int),
    >,
    pub tcl_InputBlocked:
        ::std::option::Option<unsafe extern "C" fn(chan: Tcl_Channel) -> ::std::os::raw::c_int>,
    pub tcl_InputBuffered:
        ::std::option::Option<unsafe extern "C" fn(chan: Tcl_Channel) -> ::std::os::raw::c_int>,
    pub tcl_InterpDeleted: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int,
    >,
    pub tcl_IsSafe: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int,
    >,
    pub tcl_JoinPath: ::std::option::Option<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *const *const ::std::os::raw::c_char,
            resultPtr: *mut Tcl_DString,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub tcl_LinkVar: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            varName: *const ::std::os::raw::c_char,
            addr: *mut ::std::os::raw::c_char,
            type_: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub reserved188: ::std::option::Option<unsafe extern "C" fn()>,
    pub tcl_MakeFileChannel: ::std::option::Option<
        unsafe extern "C" fn(handle: ClientData, mode: ::std::os::raw::c_int) -> Tcl_Channel,
    >,
    pub tcl_MakeSafe: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int,
    >,
    pub tcl_MakeTcpClientChannel:
        ::std::option::Option<unsafe extern "C" fn(tcpSocket: ClientData) -> Tcl_Channel>,
    pub tcl_Merge: ::std::option::Option<
        unsafe extern "C" fn(
            argc: ::std::os::raw::c_int,
            argv: *const *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub tcl_NextHashEntry: ::std::option::Option<
        unsafe extern "C" fn(searchPtr: *mut Tcl_HashSearch) -> *mut Tcl_HashEntry,
    >,
    pub tcl_NotifyChannel: ::std::option::Option<
        unsafe extern "C" fn(channel: Tcl_Channel, mask: ::std::os::raw::c_int),
    >,
    pub tcl_ObjGetVar2: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            part1Ptr: *mut Tcl_Obj,
            part2Ptr: *mut Tcl_Obj,
            flags: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_ObjSetVar2: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            part1Ptr: *mut Tcl_Obj,
            part2Ptr: *mut Tcl_Obj,
            newValuePtr: *mut Tcl_Obj,
            flags: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_OpenCommandChannel: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            argc: ::std::os::raw::c_int,
            argv: *mut *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> Tcl_Channel,
    >,
    pub tcl_OpenFileChannel: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            fileName: *const ::std::os::raw::c_char,
            modeString: *const ::std::os::raw::c_char,
            permissions: ::std::os::raw::c_int,
        ) -> Tcl_Channel,
    >,
    pub tcl_OpenTcpClient: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            port: ::std::os::raw::c_int,
            address: *const ::std::os::raw::c_char,
            myaddr: *const ::std::os::raw::c_char,
            myport: ::std::os::raw::c_int,
            async_: ::std::os::raw::c_int,
        ) -> Tcl_Channel,
    >,
    pub tcl_OpenTcpServer: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            port: ::std::os::raw::c_int,
            host: *const ::std::os::raw::c_char,
            acceptProc: Tcl_TcpAcceptProc,
            callbackData: ClientData,
        ) -> Tcl_Channel,
    >,
    pub tcl_Preserve: ::std::option::Option<unsafe extern "C" fn(data: ClientData)>,
    pub tcl_PrintDouble: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, value: f64, dst: *mut ::std::os::raw::c_char),
    >,
    pub tcl_PutEnv: ::std::option::Option<
        unsafe extern "C" fn(assignment: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub tcl_PosixError: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_QueueEvent: ::std::option::Option<
        unsafe extern "C" fn(evPtr: *mut Tcl_Event, position: Tcl_QueuePosition),
    >,
    pub tcl_Read: ::std::option::Option<
        unsafe extern "C" fn(
            chan: Tcl_Channel,
            bufPtr: *mut ::std::os::raw::c_char,
            toRead: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ReapDetachedProcs: ::std::option::Option<unsafe extern "C" fn()>,
    pub tcl_RecordAndEval: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            cmd: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_RecordAndEvalObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            cmdPtr: *mut Tcl_Obj,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_RegisterChannel:
        ::std::option::Option<unsafe extern "C" fn(interp: *mut Tcl_Interp, chan: Tcl_Channel)>,
    pub tcl_RegisterObjType:
        ::std::option::Option<unsafe extern "C" fn(typePtr: *const Tcl_ObjType)>,
    pub tcl_RegExpCompile: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            pattern: *const ::std::os::raw::c_char,
        ) -> Tcl_RegExp,
    >,
    pub tcl_RegExpExec: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            regexp: Tcl_RegExp,
            text: *const ::std::os::raw::c_char,
            start: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_RegExpMatch: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            text: *const ::std::os::raw::c_char,
            pattern: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_RegExpRange: ::std::option::Option<
        unsafe extern "C" fn(
            regexp: Tcl_RegExp,
            index: ::std::os::raw::c_int,
            startPtr: *mut *const ::std::os::raw::c_char,
            endPtr: *mut *const ::std::os::raw::c_char,
        ),
    >,
    pub tcl_Release: ::std::option::Option<unsafe extern "C" fn(clientData: ClientData)>,
    pub tcl_ResetResult: ::std::option::Option<unsafe extern "C" fn(interp: *mut Tcl_Interp)>,
    pub tcl_ScanElement: ::std::option::Option<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_char,
            flagPtr: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ScanCountedElement: ::std::option::Option<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_int,
            flagPtr: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_SeekOld: ::std::option::Option<
        unsafe extern "C" fn(
            chan: Tcl_Channel,
            offset: ::std::os::raw::c_int,
            mode: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ServiceAll: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub tcl_ServiceEvent: ::std::option::Option<
        unsafe extern "C" fn(flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub tcl_SetAssocData: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            name: *const ::std::os::raw::c_char,
            proc_: Tcl_InterpDeleteProc,
            clientData: ClientData,
        ),
    >,
    pub tcl_SetChannelBufferSize:
        ::std::option::Option<unsafe extern "C" fn(chan: Tcl_Channel, sz: ::std::os::raw::c_int)>,
    pub tcl_SetChannelOption: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            chan: Tcl_Channel,
            optionName: *const ::std::os::raw::c_char,
            newValue: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_SetCommandInfo: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            cmdName: *const ::std::os::raw::c_char,
            infoPtr: *const Tcl_CmdInfo,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_SetErrno: ::std::option::Option<unsafe extern "C" fn(err: ::std::os::raw::c_int)>,
    pub tcl_SetErrorCode: ::std::option::Option<unsafe extern "C" fn(interp: *mut Tcl_Interp, ...)>,
    pub tcl_SetMaxBlockTime: ::std::option::Option<unsafe extern "C" fn(timePtr: *const Tcl_Time)>,
    pub tcl_SetPanicProc: ::std::option::Option<unsafe extern "C" fn(panicProc: Tcl_PanicProc)>,
    pub tcl_SetRecursionLimit: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            depth: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_SetResult: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            result: *mut ::std::os::raw::c_char,
            freeProc: Tcl_FreeProc,
        ),
    >,
    pub tcl_SetServiceMode: ::std::option::Option<
        unsafe extern "C" fn(mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub tcl_SetObjErrorCode: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, errorObjPtr: *mut Tcl_Obj),
    >,
    pub tcl_SetObjResult: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, resultObjPtr: *mut Tcl_Obj),
    >,
    pub tcl_SetStdChannel: ::std::option::Option<
        unsafe extern "C" fn(channel: Tcl_Channel, type_: ::std::os::raw::c_int),
    >,
    pub tcl_SetVar: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            varName: *const ::std::os::raw::c_char,
            newValue: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_SetVar2: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            part1: *const ::std::os::raw::c_char,
            part2: *const ::std::os::raw::c_char,
            newValue: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_SignalId: ::std::option::Option<
        unsafe extern "C" fn(sig: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_SignalMsg: ::std::option::Option<
        unsafe extern "C" fn(sig: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_SourceRCFile: ::std::option::Option<unsafe extern "C" fn(interp: *mut Tcl_Interp)>,
    pub tcl_SplitList: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            listStr: *const ::std::os::raw::c_char,
            argcPtr: *mut ::std::os::raw::c_int,
            argvPtr: *mut *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_SplitPath: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            argcPtr: *mut ::std::os::raw::c_int,
            argvPtr: *mut *mut *const ::std::os::raw::c_char,
        ),
    >,
    pub tcl_StaticPackage: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            prefix: *const ::std::os::raw::c_char,
            initProc: Tcl_PackageInitProc,
            safeInitProc: Tcl_PackageInitProc,
        ),
    >,
    pub tcl_StringMatch: ::std::option::Option<
        unsafe extern "C" fn(
            str_: *const ::std::os::raw::c_char,
            pattern: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_TellOld:
        ::std::option::Option<unsafe extern "C" fn(chan: Tcl_Channel) -> ::std::os::raw::c_int>,
    pub tcl_TraceVar: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            varName: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            proc_: Tcl_VarTraceProc,
            clientData: ClientData,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_TraceVar2: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            part1: *const ::std::os::raw::c_char,
            part2: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            proc_: Tcl_VarTraceProc,
            clientData: ClientData,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_TranslateFileName: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            name: *const ::std::os::raw::c_char,
            bufferPtr: *mut Tcl_DString,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub tcl_Ungets: ::std::option::Option<
        unsafe extern "C" fn(
            chan: Tcl_Channel,
            str_: *const ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
            atHead: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_UnlinkVar: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, varName: *const ::std::os::raw::c_char),
    >,
    pub tcl_UnregisterChannel: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, chan: Tcl_Channel) -> ::std::os::raw::c_int,
    >,
    pub tcl_UnsetVar: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            varName: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_UnsetVar2: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            part1: *const ::std::os::raw::c_char,
            part2: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_UntraceVar: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            varName: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            proc_: Tcl_VarTraceProc,
            clientData: ClientData,
        ),
    >,
    pub tcl_UntraceVar2: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            part1: *const ::std::os::raw::c_char,
            part2: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            proc_: Tcl_VarTraceProc,
            clientData: ClientData,
        ),
    >,
    pub tcl_UpdateLinkedVar: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, varName: *const ::std::os::raw::c_char),
    >,
    pub tcl_UpVar: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            frameName: *const ::std::os::raw::c_char,
            varName: *const ::std::os::raw::c_char,
            localName: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_UpVar2: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            frameName: *const ::std::os::raw::c_char,
            part1: *const ::std::os::raw::c_char,
            part2: *const ::std::os::raw::c_char,
            localName: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_VarEval: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, ...) -> ::std::os::raw::c_int,
    >,
    pub tcl_VarTraceInfo: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            varName: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            procPtr: Tcl_VarTraceProc,
            prevClientData: ClientData,
        ) -> ClientData,
    >,
    pub tcl_VarTraceInfo2: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            part1: *const ::std::os::raw::c_char,
            part2: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            procPtr: Tcl_VarTraceProc,
            prevClientData: ClientData,
        ) -> ClientData,
    >,
    pub tcl_Write: ::std::option::Option<
        unsafe extern "C" fn(
            chan: Tcl_Channel,
            s: *const ::std::os::raw::c_char,
            slen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_WrongNumArgs: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objc: ::std::os::raw::c_int,
            objv: *const *mut Tcl_Obj,
            message: *const ::std::os::raw::c_char,
        ),
    >,
    pub tcl_DumpActiveMemory: ::std::option::Option<
        unsafe extern "C" fn(fileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub tcl_ValidateAllMemory: ::std::option::Option<
        unsafe extern "C" fn(file: *const ::std::os::raw::c_char, line: ::std::os::raw::c_int),
    >,
    pub tcl_AppendResultVA: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, argList: *mut __va_list_tag),
    >,
    pub tcl_AppendStringsToObjVA: ::std::option::Option<
        unsafe extern "C" fn(objPtr: *mut Tcl_Obj, argList: *mut __va_list_tag),
    >,
    pub tcl_HashStats: ::std::option::Option<
        unsafe extern "C" fn(tablePtr: *mut Tcl_HashTable) -> *mut ::std::os::raw::c_char,
    >,
    pub tcl_ParseVar: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            start: *const ::std::os::raw::c_char,
            termPtr: *mut *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_PkgPresent: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            name: *const ::std::os::raw::c_char,
            version: *const ::std::os::raw::c_char,
            exact: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_PkgPresentEx: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            name: *const ::std::os::raw::c_char,
            version: *const ::std::os::raw::c_char,
            exact: ::std::os::raw::c_int,
            clientDataPtr: *mut ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_PkgProvide: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            name: *const ::std::os::raw::c_char,
            version: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_PkgRequire: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            name: *const ::std::os::raw::c_char,
            version: *const ::std::os::raw::c_char,
            exact: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_SetErrorCodeVA: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, argList: *mut __va_list_tag),
    >,
    pub tcl_VarEvalVA: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            argList: *mut __va_list_tag,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_WaitPid: ::std::option::Option<
        unsafe extern "C" fn(
            pid: Tcl_Pid,
            statPtr: *mut ::std::os::raw::c_int,
            options: ::std::os::raw::c_int,
        ) -> Tcl_Pid,
    >,
    pub tcl_PanicVA: ::std::option::Option<
        unsafe extern "C" fn(format: *const ::std::os::raw::c_char, argList: *mut __va_list_tag),
    >,
    pub tcl_GetVersion: ::std::option::Option<
        unsafe extern "C" fn(
            major: *mut ::std::os::raw::c_int,
            minor: *mut ::std::os::raw::c_int,
            patchLevel: *mut ::std::os::raw::c_int,
            type_: *mut ::std::os::raw::c_int,
        ),
    >,
    pub tcl_InitMemory: ::std::option::Option<unsafe extern "C" fn(interp: *mut Tcl_Interp)>,
    pub tcl_StackChannel: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            typePtr: *const Tcl_ChannelType,
            instanceData: ClientData,
            mask: ::std::os::raw::c_int,
            prevChan: Tcl_Channel,
        ) -> Tcl_Channel,
    >,
    pub tcl_UnstackChannel: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, chan: Tcl_Channel) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetStackedChannel:
        ::std::option::Option<unsafe extern "C" fn(chan: Tcl_Channel) -> Tcl_Channel>,
    pub tcl_SetMainLoop: ::std::option::Option<unsafe extern "C" fn(proc_: Tcl_MainLoopProc)>,
    pub reserved285: ::std::option::Option<unsafe extern "C" fn()>,
    pub tcl_AppendObjToObj: ::std::option::Option<
        unsafe extern "C" fn(objPtr: *mut Tcl_Obj, appendObjPtr: *mut Tcl_Obj),
    >,
    pub tcl_CreateEncoding: ::std::option::Option<
        unsafe extern "C" fn(typePtr: *const Tcl_EncodingType) -> Tcl_Encoding,
    >,
    pub tcl_CreateThreadExitHandler:
        ::std::option::Option<unsafe extern "C" fn(proc_: Tcl_ExitProc, clientData: ClientData)>,
    pub tcl_DeleteThreadExitHandler:
        ::std::option::Option<unsafe extern "C" fn(proc_: Tcl_ExitProc, clientData: ClientData)>,
    pub tcl_DiscardResult:
        ::std::option::Option<unsafe extern "C" fn(statePtr: *mut Tcl_SavedResult)>,
    pub tcl_EvalEx: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            script: *const ::std::os::raw::c_char,
            numBytes: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_EvalObjv: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objc: ::std::os::raw::c_int,
            objv: *const *mut Tcl_Obj,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_EvalObjEx: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objPtr: *mut Tcl_Obj,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ExitThread: ::std::option::Option<unsafe extern "C" fn(status: ::std::os::raw::c_int)>,
    pub tcl_ExternalToUtf: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            encoding: Tcl_Encoding,
            src: *const ::std::os::raw::c_char,
            srcLen: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
            statePtr: *mut Tcl_EncodingState,
            dst: *mut ::std::os::raw::c_char,
            dstLen: ::std::os::raw::c_int,
            srcReadPtr: *mut ::std::os::raw::c_int,
            dstWrotePtr: *mut ::std::os::raw::c_int,
            dstCharsPtr: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ExternalToUtfDString: ::std::option::Option<
        unsafe extern "C" fn(
            encoding: Tcl_Encoding,
            src: *const ::std::os::raw::c_char,
            srcLen: ::std::os::raw::c_int,
            dsPtr: *mut Tcl_DString,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub tcl_FinalizeThread: ::std::option::Option<unsafe extern "C" fn()>,
    pub tcl_FinalizeNotifier: ::std::option::Option<unsafe extern "C" fn(clientData: ClientData)>,
    pub tcl_FreeEncoding: ::std::option::Option<unsafe extern "C" fn(encoding: Tcl_Encoding)>,
    pub tcl_GetCurrentThread: ::std::option::Option<unsafe extern "C" fn() -> Tcl_ThreadId>,
    pub tcl_GetEncoding: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            name: *const ::std::os::raw::c_char,
        ) -> Tcl_Encoding,
    >,
    pub tcl_GetEncodingName: ::std::option::Option<
        unsafe extern "C" fn(encoding: Tcl_Encoding) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_GetEncodingNames: ::std::option::Option<unsafe extern "C" fn(interp: *mut Tcl_Interp)>,
    pub tcl_GetIndexFromObjStruct: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objPtr: *mut Tcl_Obj,
            tablePtr: *const ::std::os::raw::c_void,
            offset: ::std::os::raw::c_int,
            msg: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            indexPtr: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetThreadData: ::std::option::Option<
        unsafe extern "C" fn(
            keyPtr: *mut Tcl_ThreadDataKey,
            size: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub tcl_GetVar2Ex: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            part1: *const ::std::os::raw::c_char,
            part2: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_InitNotifier: ::std::option::Option<unsafe extern "C" fn() -> ClientData>,
    pub tcl_MutexLock: ::std::option::Option<unsafe extern "C" fn(mutexPtr: *mut Tcl_Mutex)>,
    pub tcl_MutexUnlock: ::std::option::Option<unsafe extern "C" fn(mutexPtr: *mut Tcl_Mutex)>,
    pub tcl_ConditionNotify:
        ::std::option::Option<unsafe extern "C" fn(condPtr: *mut Tcl_Condition)>,
    pub tcl_ConditionWait: ::std::option::Option<
        unsafe extern "C" fn(
            condPtr: *mut Tcl_Condition,
            mutexPtr: *mut Tcl_Mutex,
            timePtr: *const Tcl_Time,
        ),
    >,
    pub tcl_NumUtfChars: ::std::option::Option<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ReadChars: ::std::option::Option<
        unsafe extern "C" fn(
            channel: Tcl_Channel,
            objPtr: *mut Tcl_Obj,
            charsToRead: ::std::os::raw::c_int,
            appendFlag: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_RestoreResult: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, statePtr: *mut Tcl_SavedResult),
    >,
    pub tcl_SaveResult: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, statePtr: *mut Tcl_SavedResult),
    >,
    pub tcl_SetSystemEncoding: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_SetVar2Ex: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            part1: *const ::std::os::raw::c_char,
            part2: *const ::std::os::raw::c_char,
            newValuePtr: *mut Tcl_Obj,
            flags: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_ThreadAlert: ::std::option::Option<unsafe extern "C" fn(threadId: Tcl_ThreadId)>,
    pub tcl_ThreadQueueEvent: ::std::option::Option<
        unsafe extern "C" fn(
            threadId: Tcl_ThreadId,
            evPtr: *mut Tcl_Event,
            position: Tcl_QueuePosition,
        ),
    >,
    pub tcl_UniCharAtIndex: ::std::option::Option<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_char,
            index: ::std::os::raw::c_int,
        ) -> Tcl_UniChar,
    >,
    pub tcl_UniCharToLower:
        ::std::option::Option<unsafe extern "C" fn(ch: ::std::os::raw::c_int) -> Tcl_UniChar>,
    pub tcl_UniCharToTitle:
        ::std::option::Option<unsafe extern "C" fn(ch: ::std::os::raw::c_int) -> Tcl_UniChar>,
    pub tcl_UniCharToUpper:
        ::std::option::Option<unsafe extern "C" fn(ch: ::std::os::raw::c_int) -> Tcl_UniChar>,
    pub tcl_UniCharToUtf: ::std::option::Option<
        unsafe extern "C" fn(
            ch: ::std::os::raw::c_int,
            buf: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_UtfAtIndex: ::std::option::Option<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_char,
            index: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_UtfCharComplete: ::std::option::Option<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_UtfBackslash: ::std::option::Option<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_char,
            readPtr: *mut ::std::os::raw::c_int,
            dst: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_UtfFindFirst: ::std::option::Option<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_char,
            ch: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_UtfFindLast: ::std::option::Option<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_char,
            ch: ::std::os::raw::c_int,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_UtfNext: ::std::option::Option<
        unsafe extern "C" fn(src: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_UtfPrev: ::std::option::Option<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_char,
            start: *const ::std::os::raw::c_char,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_UtfToExternal: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            encoding: Tcl_Encoding,
            src: *const ::std::os::raw::c_char,
            srcLen: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
            statePtr: *mut Tcl_EncodingState,
            dst: *mut ::std::os::raw::c_char,
            dstLen: ::std::os::raw::c_int,
            srcReadPtr: *mut ::std::os::raw::c_int,
            dstWrotePtr: *mut ::std::os::raw::c_int,
            dstCharsPtr: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_UtfToExternalDString: ::std::option::Option<
        unsafe extern "C" fn(
            encoding: Tcl_Encoding,
            src: *const ::std::os::raw::c_char,
            srcLen: ::std::os::raw::c_int,
            dsPtr: *mut Tcl_DString,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub tcl_UtfToLower: ::std::option::Option<
        unsafe extern "C" fn(src: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub tcl_UtfToTitle: ::std::option::Option<
        unsafe extern "C" fn(src: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub tcl_UtfToUniChar: ::std::option::Option<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_char,
            chPtr: *mut Tcl_UniChar,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_UtfToUpper: ::std::option::Option<
        unsafe extern "C" fn(src: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub tcl_WriteChars: ::std::option::Option<
        unsafe extern "C" fn(
            chan: Tcl_Channel,
            src: *const ::std::os::raw::c_char,
            srcLen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_WriteObj: ::std::option::Option<
        unsafe extern "C" fn(chan: Tcl_Channel, objPtr: *mut Tcl_Obj) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetString: ::std::option::Option<
        unsafe extern "C" fn(objPtr: *mut Tcl_Obj) -> *mut ::std::os::raw::c_char,
    >,
    pub tcl_GetDefaultEncodingDir:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
    pub tcl_SetDefaultEncodingDir:
        ::std::option::Option<unsafe extern "C" fn(path: *const ::std::os::raw::c_char)>,
    pub tcl_AlertNotifier: ::std::option::Option<unsafe extern "C" fn(clientData: ClientData)>,
    pub tcl_ServiceModeHook:
        ::std::option::Option<unsafe extern "C" fn(mode: ::std::os::raw::c_int)>,
    pub tcl_UniCharIsAlnum: ::std::option::Option<
        unsafe extern "C" fn(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub tcl_UniCharIsAlpha: ::std::option::Option<
        unsafe extern "C" fn(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub tcl_UniCharIsDigit: ::std::option::Option<
        unsafe extern "C" fn(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub tcl_UniCharIsLower: ::std::option::Option<
        unsafe extern "C" fn(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub tcl_UniCharIsSpace: ::std::option::Option<
        unsafe extern "C" fn(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub tcl_UniCharIsUpper: ::std::option::Option<
        unsafe extern "C" fn(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub tcl_UniCharIsWordChar: ::std::option::Option<
        unsafe extern "C" fn(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub tcl_UniCharLen: ::std::option::Option<
        unsafe extern "C" fn(uniStr: *const Tcl_UniChar) -> ::std::os::raw::c_int,
    >,
    pub tcl_UniCharNcmp: ::std::option::Option<
        unsafe extern "C" fn(
            ucs: *const Tcl_UniChar,
            uct: *const Tcl_UniChar,
            numChars: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_UniCharToUtfDString: ::std::option::Option<
        unsafe extern "C" fn(
            uniStr: *const Tcl_UniChar,
            uniLength: ::std::os::raw::c_int,
            dsPtr: *mut Tcl_DString,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub tcl_UtfToUniCharDString: ::std::option::Option<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_int,
            dsPtr: *mut Tcl_DString,
        ) -> *mut Tcl_UniChar,
    >,
    pub tcl_GetRegExpFromObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            patObj: *mut Tcl_Obj,
            flags: ::std::os::raw::c_int,
        ) -> Tcl_RegExp,
    >,
    pub tcl_EvalTokens: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            tokenPtr: *mut Tcl_Token,
            count: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_FreeParse: ::std::option::Option<unsafe extern "C" fn(parsePtr: *mut Tcl_Parse)>,
    pub tcl_LogCommandInfo: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            script: *const ::std::os::raw::c_char,
            command: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_int,
        ),
    >,
    pub tcl_ParseBraces: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            start: *const ::std::os::raw::c_char,
            numBytes: ::std::os::raw::c_int,
            parsePtr: *mut Tcl_Parse,
            append: ::std::os::raw::c_int,
            termPtr: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ParseCommand: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            start: *const ::std::os::raw::c_char,
            numBytes: ::std::os::raw::c_int,
            nested: ::std::os::raw::c_int,
            parsePtr: *mut Tcl_Parse,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ParseExpr: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            start: *const ::std::os::raw::c_char,
            numBytes: ::std::os::raw::c_int,
            parsePtr: *mut Tcl_Parse,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ParseQuotedString: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            start: *const ::std::os::raw::c_char,
            numBytes: ::std::os::raw::c_int,
            parsePtr: *mut Tcl_Parse,
            append: ::std::os::raw::c_int,
            termPtr: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ParseVarName: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            start: *const ::std::os::raw::c_char,
            numBytes: ::std::os::raw::c_int,
            parsePtr: *mut Tcl_Parse,
            append: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetCwd: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            cwdPtr: *mut Tcl_DString,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub tcl_Chdir: ::std::option::Option<
        unsafe extern "C" fn(dirName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub tcl_Access: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            mode: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_Stat: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const ::std::os::raw::c_char,
            bufPtr: *mut stat,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_UtfNcmp: ::std::option::Option<
        unsafe extern "C" fn(
            s1: *const ::std::os::raw::c_char,
            s2: *const ::std::os::raw::c_char,
            n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_UtfNcasecmp: ::std::option::Option<
        unsafe extern "C" fn(
            s1: *const ::std::os::raw::c_char,
            s2: *const ::std::os::raw::c_char,
            n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_StringCaseMatch: ::std::option::Option<
        unsafe extern "C" fn(
            str_: *const ::std::os::raw::c_char,
            pattern: *const ::std::os::raw::c_char,
            nocase: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_UniCharIsControl: ::std::option::Option<
        unsafe extern "C" fn(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub tcl_UniCharIsGraph: ::std::option::Option<
        unsafe extern "C" fn(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub tcl_UniCharIsPrint: ::std::option::Option<
        unsafe extern "C" fn(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub tcl_UniCharIsPunct: ::std::option::Option<
        unsafe extern "C" fn(ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub tcl_RegExpExecObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            regexp: Tcl_RegExp,
            textObj: *mut Tcl_Obj,
            offset: ::std::os::raw::c_int,
            nmatches: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_RegExpGetInfo: ::std::option::Option<
        unsafe extern "C" fn(regexp: Tcl_RegExp, infoPtr: *mut Tcl_RegExpInfo),
    >,
    pub tcl_NewUnicodeObj: ::std::option::Option<
        unsafe extern "C" fn(
            unicode: *const Tcl_UniChar,
            numChars: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_SetUnicodeObj: ::std::option::Option<
        unsafe extern "C" fn(
            objPtr: *mut Tcl_Obj,
            unicode: *const Tcl_UniChar,
            numChars: ::std::os::raw::c_int,
        ),
    >,
    pub tcl_GetCharLength:
        ::std::option::Option<unsafe extern "C" fn(objPtr: *mut Tcl_Obj) -> ::std::os::raw::c_int>,
    pub tcl_GetUniChar: ::std::option::Option<
        unsafe extern "C" fn(objPtr: *mut Tcl_Obj, index: ::std::os::raw::c_int) -> Tcl_UniChar,
    >,
    pub tcl_GetUnicode:
        ::std::option::Option<unsafe extern "C" fn(objPtr: *mut Tcl_Obj) -> *mut Tcl_UniChar>,
    pub tcl_GetRange: ::std::option::Option<
        unsafe extern "C" fn(
            objPtr: *mut Tcl_Obj,
            first: ::std::os::raw::c_int,
            last: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_AppendUnicodeToObj: ::std::option::Option<
        unsafe extern "C" fn(
            objPtr: *mut Tcl_Obj,
            unicode: *const Tcl_UniChar,
            length: ::std::os::raw::c_int,
        ),
    >,
    pub tcl_RegExpMatchObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            textObj: *mut Tcl_Obj,
            patternObj: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_SetNotifier:
        ::std::option::Option<unsafe extern "C" fn(notifierProcPtr: *mut Tcl_NotifierProcs)>,
    pub tcl_GetAllocMutex: ::std::option::Option<unsafe extern "C" fn() -> *mut Tcl_Mutex>,
    pub tcl_GetChannelNames: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetChannelNamesEx: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            pattern: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ProcObjCmd: ::std::option::Option<
        unsafe extern "C" fn(
            clientData: ClientData,
            interp: *mut Tcl_Interp,
            objc: ::std::os::raw::c_int,
            objv: *const *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ConditionFinalize:
        ::std::option::Option<unsafe extern "C" fn(condPtr: *mut Tcl_Condition)>,
    pub tcl_MutexFinalize: ::std::option::Option<unsafe extern "C" fn(mutex: *mut Tcl_Mutex)>,
    pub tcl_CreateThread: ::std::option::Option<
        unsafe extern "C" fn(
            idPtr: *mut Tcl_ThreadId,
            proc_: Tcl_ThreadCreateProc,
            clientData: ClientData,
            stackSize: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ReadRaw: ::std::option::Option<
        unsafe extern "C" fn(
            chan: Tcl_Channel,
            dst: *mut ::std::os::raw::c_char,
            bytesToRead: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_WriteRaw: ::std::option::Option<
        unsafe extern "C" fn(
            chan: Tcl_Channel,
            src: *const ::std::os::raw::c_char,
            srcLen: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetTopChannel:
        ::std::option::Option<unsafe extern "C" fn(chan: Tcl_Channel) -> Tcl_Channel>,
    pub tcl_ChannelBuffered:
        ::std::option::Option<unsafe extern "C" fn(chan: Tcl_Channel) -> ::std::os::raw::c_int>,
    pub tcl_ChannelName: ::std::option::Option<
        unsafe extern "C" fn(chanTypePtr: *const Tcl_ChannelType) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_ChannelVersion: ::std::option::Option<
        unsafe extern "C" fn(chanTypePtr: *const Tcl_ChannelType) -> Tcl_ChannelTypeVersion,
    >,
    pub tcl_ChannelBlockModeProc: ::std::option::Option<
        unsafe extern "C" fn(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverBlockModeProc,
    >,
    pub tcl_ChannelCloseProc: ::std::option::Option<
        unsafe extern "C" fn(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverCloseProc,
    >,
    pub tcl_ChannelClose2Proc: ::std::option::Option<
        unsafe extern "C" fn(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverClose2Proc,
    >,
    pub tcl_ChannelInputProc: ::std::option::Option<
        unsafe extern "C" fn(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverInputProc,
    >,
    pub tcl_ChannelOutputProc: ::std::option::Option<
        unsafe extern "C" fn(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverOutputProc,
    >,
    pub tcl_ChannelSeekProc: ::std::option::Option<
        unsafe extern "C" fn(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverSeekProc,
    >,
    pub tcl_ChannelSetOptionProc: ::std::option::Option<
        unsafe extern "C" fn(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverSetOptionProc,
    >,
    pub tcl_ChannelGetOptionProc: ::std::option::Option<
        unsafe extern "C" fn(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverGetOptionProc,
    >,
    pub tcl_ChannelWatchProc: ::std::option::Option<
        unsafe extern "C" fn(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverWatchProc,
    >,
    pub tcl_ChannelGetHandleProc: ::std::option::Option<
        unsafe extern "C" fn(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverGetHandleProc,
    >,
    pub tcl_ChannelFlushProc: ::std::option::Option<
        unsafe extern "C" fn(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverFlushProc,
    >,
    pub tcl_ChannelHandlerProc: ::std::option::Option<
        unsafe extern "C" fn(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverHandlerProc,
    >,
    pub tcl_JoinThread: ::std::option::Option<
        unsafe extern "C" fn(
            threadId: Tcl_ThreadId,
            result: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_IsChannelShared:
        ::std::option::Option<unsafe extern "C" fn(channel: Tcl_Channel) -> ::std::os::raw::c_int>,
    pub tcl_IsChannelRegistered: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            channel: Tcl_Channel,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_CutChannel: ::std::option::Option<unsafe extern "C" fn(channel: Tcl_Channel)>,
    pub tcl_SpliceChannel: ::std::option::Option<unsafe extern "C" fn(channel: Tcl_Channel)>,
    pub tcl_ClearChannelHandlers: ::std::option::Option<unsafe extern "C" fn(channel: Tcl_Channel)>,
    pub tcl_IsChannelExisting: ::std::option::Option<
        unsafe extern "C" fn(channelName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub tcl_UniCharNcasecmp: ::std::option::Option<
        unsafe extern "C" fn(
            ucs: *const Tcl_UniChar,
            uct: *const Tcl_UniChar,
            numChars: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_UniCharCaseMatch: ::std::option::Option<
        unsafe extern "C" fn(
            uniStr: *const Tcl_UniChar,
            uniPattern: *const Tcl_UniChar,
            nocase: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_FindHashEntry: ::std::option::Option<
        unsafe extern "C" fn(
            tablePtr: *mut Tcl_HashTable,
            key: *const ::std::os::raw::c_void,
        ) -> *mut Tcl_HashEntry,
    >,
    pub tcl_CreateHashEntry: ::std::option::Option<
        unsafe extern "C" fn(
            tablePtr: *mut Tcl_HashTable,
            key: *const ::std::os::raw::c_void,
            newPtr: *mut ::std::os::raw::c_int,
        ) -> *mut Tcl_HashEntry,
    >,
    pub tcl_InitCustomHashTable: ::std::option::Option<
        unsafe extern "C" fn(
            tablePtr: *mut Tcl_HashTable,
            keyType: ::std::os::raw::c_int,
            typePtr: *const Tcl_HashKeyType,
        ),
    >,
    pub tcl_InitObjHashTable:
        ::std::option::Option<unsafe extern "C" fn(tablePtr: *mut Tcl_HashTable)>,
    pub tcl_CommandTraceInfo: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            varName: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            procPtr: Tcl_CommandTraceProc,
            prevClientData: ClientData,
        ) -> ClientData,
    >,
    pub tcl_TraceCommand: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            varName: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            proc_: Tcl_CommandTraceProc,
            clientData: ClientData,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_UntraceCommand: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            varName: *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            proc_: Tcl_CommandTraceProc,
            clientData: ClientData,
        ),
    >,
    pub tcl_AttemptAlloc: ::std::option::Option<
        unsafe extern "C" fn(size: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_char,
    >,
    pub tcl_AttemptDbCkalloc: ::std::option::Option<
        unsafe extern "C" fn(
            size: ::std::os::raw::c_uint,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub tcl_AttemptRealloc: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_char,
            size: ::std::os::raw::c_uint,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub tcl_AttemptDbCkrealloc: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut ::std::os::raw::c_char,
            size: ::std::os::raw::c_uint,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub tcl_AttemptSetObjLength: ::std::option::Option<
        unsafe extern "C" fn(
            objPtr: *mut Tcl_Obj,
            length: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetChannelThread:
        ::std::option::Option<unsafe extern "C" fn(channel: Tcl_Channel) -> Tcl_ThreadId>,
    pub tcl_GetUnicodeFromObj: ::std::option::Option<
        unsafe extern "C" fn(
            objPtr: *mut Tcl_Obj,
            lengthPtr: *mut ::std::os::raw::c_int,
        ) -> *mut Tcl_UniChar,
    >,
    pub tcl_GetMathFuncInfo: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            name: *const ::std::os::raw::c_char,
            numArgsPtr: *mut ::std::os::raw::c_int,
            argTypesPtr: *mut *mut Tcl_ValueType,
            procPtr: *mut Tcl_MathProc,
            clientDataPtr: *mut ClientData,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ListMathFuncs: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            pattern: *const ::std::os::raw::c_char,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_SubstObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objPtr: *mut Tcl_Obj,
            flags: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_DetachChannel: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            channel: Tcl_Channel,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_IsStandardChannel:
        ::std::option::Option<unsafe extern "C" fn(channel: Tcl_Channel) -> ::std::os::raw::c_int>,
    pub tcl_FSCopyFile: ::std::option::Option<
        unsafe extern "C" fn(
            srcPathPtr: *mut Tcl_Obj,
            destPathPtr: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_FSCopyDirectory: ::std::option::Option<
        unsafe extern "C" fn(
            srcPathPtr: *mut Tcl_Obj,
            destPathPtr: *mut Tcl_Obj,
            errorPtr: *mut *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_FSCreateDirectory:
        ::std::option::Option<unsafe extern "C" fn(pathPtr: *mut Tcl_Obj) -> ::std::os::raw::c_int>,
    pub tcl_FSDeleteFile:
        ::std::option::Option<unsafe extern "C" fn(pathPtr: *mut Tcl_Obj) -> ::std::os::raw::c_int>,
    pub tcl_FSLoadFile: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            pathPtr: *mut Tcl_Obj,
            sym1: *const ::std::os::raw::c_char,
            sym2: *const ::std::os::raw::c_char,
            proc1Ptr: *mut Tcl_PackageInitProc,
            proc2Ptr: *mut Tcl_PackageInitProc,
            handlePtr: *mut Tcl_LoadHandle,
            unloadProcPtr: *mut Tcl_FSUnloadFileProc,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_FSMatchInDirectory: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            result: *mut Tcl_Obj,
            pathPtr: *mut Tcl_Obj,
            pattern: *const ::std::os::raw::c_char,
            types: *mut Tcl_GlobTypeData,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_FSLink: ::std::option::Option<
        unsafe extern "C" fn(
            pathPtr: *mut Tcl_Obj,
            toPtr: *mut Tcl_Obj,
            linkAction: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_FSRemoveDirectory: ::std::option::Option<
        unsafe extern "C" fn(
            pathPtr: *mut Tcl_Obj,
            recursive: ::std::os::raw::c_int,
            errorPtr: *mut *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_FSRenameFile: ::std::option::Option<
        unsafe extern "C" fn(
            srcPathPtr: *mut Tcl_Obj,
            destPathPtr: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_FSLstat: ::std::option::Option<
        unsafe extern "C" fn(pathPtr: *mut Tcl_Obj, buf: *mut Tcl_StatBuf) -> ::std::os::raw::c_int,
    >,
    pub tcl_FSUtime: ::std::option::Option<
        unsafe extern "C" fn(pathPtr: *mut Tcl_Obj, tval: *mut utimbuf) -> ::std::os::raw::c_int,
    >,
    pub tcl_FSFileAttrsGet: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            index: ::std::os::raw::c_int,
            pathPtr: *mut Tcl_Obj,
            objPtrRef: *mut *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_FSFileAttrsSet: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            index: ::std::os::raw::c_int,
            pathPtr: *mut Tcl_Obj,
            objPtr: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_FSFileAttrStrings: ::std::option::Option<
        unsafe extern "C" fn(
            pathPtr: *mut Tcl_Obj,
            objPtrRef: *mut *mut Tcl_Obj,
        ) -> *const *const ::std::os::raw::c_char,
    >,
    pub tcl_FSStat: ::std::option::Option<
        unsafe extern "C" fn(pathPtr: *mut Tcl_Obj, buf: *mut Tcl_StatBuf) -> ::std::os::raw::c_int,
    >,
    pub tcl_FSAccess: ::std::option::Option<
        unsafe extern "C" fn(
            pathPtr: *mut Tcl_Obj,
            mode: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_FSOpenFileChannel: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            pathPtr: *mut Tcl_Obj,
            modeString: *const ::std::os::raw::c_char,
            permissions: ::std::os::raw::c_int,
        ) -> Tcl_Channel,
    >,
    pub tcl_FSGetCwd:
        ::std::option::Option<unsafe extern "C" fn(interp: *mut Tcl_Interp) -> *mut Tcl_Obj>,
    pub tcl_FSChdir:
        ::std::option::Option<unsafe extern "C" fn(pathPtr: *mut Tcl_Obj) -> ::std::os::raw::c_int>,
    pub tcl_FSConvertToPathType: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            pathPtr: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_FSJoinPath: ::std::option::Option<
        unsafe extern "C" fn(
            listObj: *mut Tcl_Obj,
            elements: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_FSSplitPath: ::std::option::Option<
        unsafe extern "C" fn(
            pathPtr: *mut Tcl_Obj,
            lenPtr: *mut ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_FSEqualPaths: ::std::option::Option<
        unsafe extern "C" fn(
            firstPtr: *mut Tcl_Obj,
            secondPtr: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_FSGetNormalizedPath: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, pathPtr: *mut Tcl_Obj) -> *mut Tcl_Obj,
    >,
    pub tcl_FSJoinToPath: ::std::option::Option<
        unsafe extern "C" fn(
            pathPtr: *mut Tcl_Obj,
            objc: ::std::os::raw::c_int,
            objv: *const *mut Tcl_Obj,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_FSGetInternalRep: ::std::option::Option<
        unsafe extern "C" fn(pathPtr: *mut Tcl_Obj, fsPtr: *const Tcl_Filesystem) -> ClientData,
    >,
    pub tcl_FSGetTranslatedPath: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, pathPtr: *mut Tcl_Obj) -> *mut Tcl_Obj,
    >,
    pub tcl_FSEvalFile: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            fileName: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_FSNewNativePath: ::std::option::Option<
        unsafe extern "C" fn(
            fromFilesystem: *const Tcl_Filesystem,
            clientData: ClientData,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_FSGetNativePath: ::std::option::Option<
        unsafe extern "C" fn(pathPtr: *mut Tcl_Obj) -> *const ::std::os::raw::c_void,
    >,
    pub tcl_FSFileSystemInfo:
        ::std::option::Option<unsafe extern "C" fn(pathPtr: *mut Tcl_Obj) -> *mut Tcl_Obj>,
    pub tcl_FSPathSeparator:
        ::std::option::Option<unsafe extern "C" fn(pathPtr: *mut Tcl_Obj) -> *mut Tcl_Obj>,
    pub tcl_FSListVolumes: ::std::option::Option<unsafe extern "C" fn() -> *mut Tcl_Obj>,
    pub tcl_FSRegister: ::std::option::Option<
        unsafe extern "C" fn(
            clientData: ClientData,
            fsPtr: *const Tcl_Filesystem,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_FSUnregister: ::std::option::Option<
        unsafe extern "C" fn(fsPtr: *const Tcl_Filesystem) -> ::std::os::raw::c_int,
    >,
    pub tcl_FSData:
        ::std::option::Option<unsafe extern "C" fn(fsPtr: *const Tcl_Filesystem) -> ClientData>,
    pub tcl_FSGetTranslatedStringPath: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            pathPtr: *mut Tcl_Obj,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_FSGetFileSystemForPath:
        ::std::option::Option<unsafe extern "C" fn(pathPtr: *mut Tcl_Obj) -> *const Tcl_Filesystem>,
    pub tcl_FSGetPathType:
        ::std::option::Option<unsafe extern "C" fn(pathPtr: *mut Tcl_Obj) -> Tcl_PathType>,
    pub tcl_OutputBuffered:
        ::std::option::Option<unsafe extern "C" fn(chan: Tcl_Channel) -> ::std::os::raw::c_int>,
    pub tcl_FSMountsChanged:
        ::std::option::Option<unsafe extern "C" fn(fsPtr: *const Tcl_Filesystem)>,
    pub tcl_EvalTokensStandard: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            tokenPtr: *mut Tcl_Token,
            count: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetTime: ::std::option::Option<unsafe extern "C" fn(timeBuf: *mut Tcl_Time)>,
    pub tcl_CreateObjTrace: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            level: ::std::os::raw::c_int,
            flags: ::std::os::raw::c_int,
            objProc: Tcl_CmdObjTraceProc,
            clientData: ClientData,
            delProc: Tcl_CmdObjTraceDeleteProc,
        ) -> Tcl_Trace,
    >,
    pub tcl_GetCommandInfoFromToken: ::std::option::Option<
        unsafe extern "C" fn(
            token: Tcl_Command,
            infoPtr: *mut Tcl_CmdInfo,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_SetCommandInfoFromToken: ::std::option::Option<
        unsafe extern "C" fn(
            token: Tcl_Command,
            infoPtr: *const Tcl_CmdInfo,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_DbNewWideIntObj: ::std::option::Option<
        unsafe extern "C" fn(
            wideValue: Tcl_WideInt,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_GetWideIntFromObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objPtr: *mut Tcl_Obj,
            widePtr: *mut Tcl_WideInt,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_NewWideIntObj:
        ::std::option::Option<unsafe extern "C" fn(wideValue: Tcl_WideInt) -> *mut Tcl_Obj>,
    pub tcl_SetWideIntObj:
        ::std::option::Option<unsafe extern "C" fn(objPtr: *mut Tcl_Obj, wideValue: Tcl_WideInt)>,
    pub tcl_AllocStatBuf: ::std::option::Option<unsafe extern "C" fn() -> *mut Tcl_StatBuf>,
    pub tcl_Seek: ::std::option::Option<
        unsafe extern "C" fn(
            chan: Tcl_Channel,
            offset: Tcl_WideInt,
            mode: ::std::os::raw::c_int,
        ) -> Tcl_WideInt,
    >,
    pub tcl_Tell: ::std::option::Option<unsafe extern "C" fn(chan: Tcl_Channel) -> Tcl_WideInt>,
    pub tcl_ChannelWideSeekProc: ::std::option::Option<
        unsafe extern "C" fn(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverWideSeekProc,
    >,
    pub tcl_DictObjPut: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            dictPtr: *mut Tcl_Obj,
            keyPtr: *mut Tcl_Obj,
            valuePtr: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_DictObjGet: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            dictPtr: *mut Tcl_Obj,
            keyPtr: *mut Tcl_Obj,
            valuePtrPtr: *mut *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_DictObjRemove: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            dictPtr: *mut Tcl_Obj,
            keyPtr: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_DictObjSize: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            dictPtr: *mut Tcl_Obj,
            sizePtr: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_DictObjFirst: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            dictPtr: *mut Tcl_Obj,
            searchPtr: *mut Tcl_DictSearch,
            keyPtrPtr: *mut *mut Tcl_Obj,
            valuePtrPtr: *mut *mut Tcl_Obj,
            donePtr: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_DictObjNext: ::std::option::Option<
        unsafe extern "C" fn(
            searchPtr: *mut Tcl_DictSearch,
            keyPtrPtr: *mut *mut Tcl_Obj,
            valuePtrPtr: *mut *mut Tcl_Obj,
            donePtr: *mut ::std::os::raw::c_int,
        ),
    >,
    pub tcl_DictObjDone:
        ::std::option::Option<unsafe extern "C" fn(searchPtr: *mut Tcl_DictSearch)>,
    pub tcl_DictObjPutKeyList: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            dictPtr: *mut Tcl_Obj,
            keyc: ::std::os::raw::c_int,
            keyv: *const *mut Tcl_Obj,
            valuePtr: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_DictObjRemoveKeyList: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            dictPtr: *mut Tcl_Obj,
            keyc: ::std::os::raw::c_int,
            keyv: *const *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_NewDictObj: ::std::option::Option<unsafe extern "C" fn() -> *mut Tcl_Obj>,
    pub tcl_DbNewDictObj: ::std::option::Option<
        unsafe extern "C" fn(
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_RegisterConfig: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            pkgName: *const ::std::os::raw::c_char,
            configuration: *const Tcl_Config,
            valEncoding: *const ::std::os::raw::c_char,
        ),
    >,
    pub tcl_CreateNamespace: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            name: *const ::std::os::raw::c_char,
            clientData: ClientData,
            deleteProc: Tcl_NamespaceDeleteProc,
        ) -> *mut Tcl_Namespace,
    >,
    pub tcl_DeleteNamespace: ::std::option::Option<unsafe extern "C" fn(nsPtr: *mut Tcl_Namespace)>,
    pub tcl_AppendExportList: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            nsPtr: *mut Tcl_Namespace,
            objPtr: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_Export: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            nsPtr: *mut Tcl_Namespace,
            pattern: *const ::std::os::raw::c_char,
            resetListFirst: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_Import: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            nsPtr: *mut Tcl_Namespace,
            pattern: *const ::std::os::raw::c_char,
            allowOverwrite: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ForgetImport: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            nsPtr: *mut Tcl_Namespace,
            pattern: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetCurrentNamespace:
        ::std::option::Option<unsafe extern "C" fn(interp: *mut Tcl_Interp) -> *mut Tcl_Namespace>,
    pub tcl_GetGlobalNamespace:
        ::std::option::Option<unsafe extern "C" fn(interp: *mut Tcl_Interp) -> *mut Tcl_Namespace>,
    pub tcl_FindNamespace: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            name: *const ::std::os::raw::c_char,
            contextNsPtr: *mut Tcl_Namespace,
            flags: ::std::os::raw::c_int,
        ) -> *mut Tcl_Namespace,
    >,
    pub tcl_FindCommand: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            name: *const ::std::os::raw::c_char,
            contextNsPtr: *mut Tcl_Namespace,
            flags: ::std::os::raw::c_int,
        ) -> Tcl_Command,
    >,
    pub tcl_GetCommandFromObj: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, objPtr: *mut Tcl_Obj) -> Tcl_Command,
    >,
    pub tcl_GetCommandFullName: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, command: Tcl_Command, objPtr: *mut Tcl_Obj),
    >,
    pub tcl_FSEvalFileEx: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            fileName: *mut Tcl_Obj,
            encodingName: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_SetExitProc:
        ::std::option::Option<unsafe extern "C" fn(proc_: Tcl_ExitProc) -> Tcl_ExitProc>,
    pub tcl_LimitAddHandler: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            type_: ::std::os::raw::c_int,
            handlerProc: Tcl_LimitHandlerProc,
            clientData: ClientData,
            deleteProc: Tcl_LimitHandlerDeleteProc,
        ),
    >,
    pub tcl_LimitRemoveHandler: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            type_: ::std::os::raw::c_int,
            handlerProc: Tcl_LimitHandlerProc,
            clientData: ClientData,
        ),
    >,
    pub tcl_LimitReady: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int,
    >,
    pub tcl_LimitCheck: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int,
    >,
    pub tcl_LimitExceeded: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int,
    >,
    pub tcl_LimitSetCommands: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, commandLimit: ::std::os::raw::c_int),
    >,
    pub tcl_LimitSetTime: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, timeLimitPtr: *mut Tcl_Time),
    >,
    pub tcl_LimitSetGranularity: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            type_: ::std::os::raw::c_int,
            granularity: ::std::os::raw::c_int,
        ),
    >,
    pub tcl_LimitTypeEnabled: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            type_: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_LimitTypeExceeded: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            type_: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_LimitTypeSet: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, type_: ::std::os::raw::c_int),
    >,
    pub tcl_LimitTypeReset: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, type_: ::std::os::raw::c_int),
    >,
    pub tcl_LimitGetCommands: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int,
    >,
    pub tcl_LimitGetTime: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, timeLimitPtr: *mut Tcl_Time),
    >,
    pub tcl_LimitGetGranularity: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            type_: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_SaveInterpState: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            status: ::std::os::raw::c_int,
        ) -> Tcl_InterpState,
    >,
    pub tcl_RestoreInterpState: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            state: Tcl_InterpState,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_DiscardInterpState: ::std::option::Option<unsafe extern "C" fn(state: Tcl_InterpState)>,
    pub tcl_SetReturnOptions: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            options: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetReturnOptions: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            result: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_IsEnsemble:
        ::std::option::Option<unsafe extern "C" fn(token: Tcl_Command) -> ::std::os::raw::c_int>,
    pub tcl_CreateEnsemble: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            name: *const ::std::os::raw::c_char,
            namespacePtr: *mut Tcl_Namespace,
            flags: ::std::os::raw::c_int,
        ) -> Tcl_Command,
    >,
    pub tcl_FindEnsemble: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            cmdNameObj: *mut Tcl_Obj,
            flags: ::std::os::raw::c_int,
        ) -> Tcl_Command,
    >,
    pub tcl_SetEnsembleSubcommandList: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            token: Tcl_Command,
            subcmdList: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_SetEnsembleMappingDict: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            token: Tcl_Command,
            mapDict: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_SetEnsembleUnknownHandler: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            token: Tcl_Command,
            unknownList: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_SetEnsembleFlags: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            token: Tcl_Command,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetEnsembleSubcommandList: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            token: Tcl_Command,
            subcmdListPtr: *mut *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetEnsembleMappingDict: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            token: Tcl_Command,
            mapDictPtr: *mut *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetEnsembleUnknownHandler: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            token: Tcl_Command,
            unknownListPtr: *mut *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetEnsembleFlags: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            token: Tcl_Command,
            flagsPtr: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetEnsembleNamespace: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            token: Tcl_Command,
            namespacePtrPtr: *mut *mut Tcl_Namespace,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_SetTimeProc: ::std::option::Option<
        unsafe extern "C" fn(
            getProc: Tcl_GetTimeProc,
            scaleProc: Tcl_ScaleTimeProc,
            clientData: ClientData,
        ),
    >,
    pub tcl_QueryTimeProc: ::std::option::Option<
        unsafe extern "C" fn(
            getProc: *mut Tcl_GetTimeProc,
            scaleProc: *mut Tcl_ScaleTimeProc,
            clientData: *mut ClientData,
        ),
    >,
    pub tcl_ChannelThreadActionProc: ::std::option::Option<
        unsafe extern "C" fn(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverThreadActionProc,
    >,
    pub tcl_NewBignumObj:
        ::std::option::Option<unsafe extern "C" fn(value: *mut mp_int) -> *mut Tcl_Obj>,
    pub tcl_DbNewBignumObj: ::std::option::Option<
        unsafe extern "C" fn(
            value: *mut mp_int,
            file: *const ::std::os::raw::c_char,
            line: ::std::os::raw::c_int,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_SetBignumObj:
        ::std::option::Option<unsafe extern "C" fn(obj: *mut Tcl_Obj, value: *mut mp_int)>,
    pub tcl_GetBignumFromObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            obj: *mut Tcl_Obj,
            value: *mut mp_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_TakeBignumFromObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            obj: *mut Tcl_Obj,
            value: *mut mp_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_TruncateChannel: ::std::option::Option<
        unsafe extern "C" fn(chan: Tcl_Channel, length: Tcl_WideInt) -> ::std::os::raw::c_int,
    >,
    pub tcl_ChannelTruncateProc: ::std::option::Option<
        unsafe extern "C" fn(chanTypePtr: *const Tcl_ChannelType) -> Tcl_DriverTruncateProc,
    >,
    pub tcl_SetChannelErrorInterp:
        ::std::option::Option<unsafe extern "C" fn(interp: *mut Tcl_Interp, msg: *mut Tcl_Obj)>,
    pub tcl_GetChannelErrorInterp: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, msg: *mut *mut Tcl_Obj),
    >,
    pub tcl_SetChannelError:
        ::std::option::Option<unsafe extern "C" fn(chan: Tcl_Channel, msg: *mut Tcl_Obj)>,
    pub tcl_GetChannelError:
        ::std::option::Option<unsafe extern "C" fn(chan: Tcl_Channel, msg: *mut *mut Tcl_Obj)>,
    pub tcl_InitBignumFromDouble: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            initval: f64,
            toInit: *mut mp_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetNamespaceUnknownHandler: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, nsPtr: *mut Tcl_Namespace) -> *mut Tcl_Obj,
    >,
    pub tcl_SetNamespaceUnknownHandler: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            nsPtr: *mut Tcl_Namespace,
            handlerPtr: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetEncodingFromObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objPtr: *mut Tcl_Obj,
            encodingPtr: *mut Tcl_Encoding,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetEncodingSearchPath: ::std::option::Option<unsafe extern "C" fn() -> *mut Tcl_Obj>,
    pub tcl_SetEncodingSearchPath: ::std::option::Option<
        unsafe extern "C" fn(searchPath: *mut Tcl_Obj) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetEncodingNameFromEnvironment: ::std::option::Option<
        unsafe extern "C" fn(bufPtr: *mut Tcl_DString) -> *const ::std::os::raw::c_char,
    >,
    pub tcl_PkgRequireProc: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            name: *const ::std::os::raw::c_char,
            objc: ::std::os::raw::c_int,
            objv: *const *mut Tcl_Obj,
            clientDataPtr: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_AppendObjToErrorInfo:
        ::std::option::Option<unsafe extern "C" fn(interp: *mut Tcl_Interp, objPtr: *mut Tcl_Obj)>,
    pub tcl_AppendLimitedToObj: ::std::option::Option<
        unsafe extern "C" fn(
            objPtr: *mut Tcl_Obj,
            bytes: *const ::std::os::raw::c_char,
            length: ::std::os::raw::c_int,
            limit: ::std::os::raw::c_int,
            ellipsis: *const ::std::os::raw::c_char,
        ),
    >,
    pub tcl_Format: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            format: *const ::std::os::raw::c_char,
            objc: ::std::os::raw::c_int,
            objv: *const *mut Tcl_Obj,
        ) -> *mut Tcl_Obj,
    >,
    pub tcl_AppendFormatToObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objPtr: *mut Tcl_Obj,
            format: *const ::std::os::raw::c_char,
            objc: ::std::os::raw::c_int,
            objv: *const *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ObjPrintf: ::std::option::Option<
        unsafe extern "C" fn(format: *const ::std::os::raw::c_char, ...) -> *mut Tcl_Obj,
    >,
    pub tcl_AppendPrintfToObj: ::std::option::Option<
        unsafe extern "C" fn(objPtr: *mut Tcl_Obj, format: *const ::std::os::raw::c_char, ...),
    >,
    pub tcl_CancelEval: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            resultObjPtr: *mut Tcl_Obj,
            clientData: ClientData,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_Canceled: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_CreatePipe: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            rchan: *mut Tcl_Channel,
            wchan: *mut Tcl_Channel,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_NRCreateCommand: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            cmdName: *const ::std::os::raw::c_char,
            proc_: Tcl_ObjCmdProc,
            nreProc: Tcl_ObjCmdProc,
            clientData: ClientData,
            deleteProc: Tcl_CmdDeleteProc,
        ) -> Tcl_Command,
    >,
    pub tcl_NREvalObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objPtr: *mut Tcl_Obj,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_NREvalObjv: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objc: ::std::os::raw::c_int,
            objv: *const *mut Tcl_Obj,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_NRCmdSwap: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            cmd: Tcl_Command,
            objc: ::std::os::raw::c_int,
            objv: *const *mut Tcl_Obj,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_NRAddCallback: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            postProcPtr: Tcl_NRPostProc,
            data0: ClientData,
            data1: ClientData,
            data2: ClientData,
            data3: ClientData,
        ),
    >,
    pub tcl_NRCallObjProc: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objProc: Tcl_ObjCmdProc,
            clientData: ClientData,
            objc: ::std::os::raw::c_int,
            objv: *const *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetFSDeviceFromStat: ::std::option::Option<
        unsafe extern "C" fn(statPtr: *const Tcl_StatBuf) -> ::std::os::raw::c_uint,
    >,
    pub tcl_GetFSInodeFromStat: ::std::option::Option<
        unsafe extern "C" fn(statPtr: *const Tcl_StatBuf) -> ::std::os::raw::c_uint,
    >,
    pub tcl_GetModeFromStat: ::std::option::Option<
        unsafe extern "C" fn(statPtr: *const Tcl_StatBuf) -> ::std::os::raw::c_uint,
    >,
    pub tcl_GetLinkCountFromStat: ::std::option::Option<
        unsafe extern "C" fn(statPtr: *const Tcl_StatBuf) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetUserIdFromStat: ::std::option::Option<
        unsafe extern "C" fn(statPtr: *const Tcl_StatBuf) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetGroupIdFromStat: ::std::option::Option<
        unsafe extern "C" fn(statPtr: *const Tcl_StatBuf) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetDeviceTypeFromStat: ::std::option::Option<
        unsafe extern "C" fn(statPtr: *const Tcl_StatBuf) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetAccessTimeFromStat:
        ::std::option::Option<unsafe extern "C" fn(statPtr: *const Tcl_StatBuf) -> Tcl_WideInt>,
    pub tcl_GetModificationTimeFromStat:
        ::std::option::Option<unsafe extern "C" fn(statPtr: *const Tcl_StatBuf) -> Tcl_WideInt>,
    pub tcl_GetChangeTimeFromStat:
        ::std::option::Option<unsafe extern "C" fn(statPtr: *const Tcl_StatBuf) -> Tcl_WideInt>,
    pub tcl_GetSizeFromStat:
        ::std::option::Option<unsafe extern "C" fn(statPtr: *const Tcl_StatBuf) -> Tcl_WideUInt>,
    pub tcl_GetBlocksFromStat:
        ::std::option::Option<unsafe extern "C" fn(statPtr: *const Tcl_StatBuf) -> Tcl_WideUInt>,
    pub tcl_GetBlockSizeFromStat: ::std::option::Option<
        unsafe extern "C" fn(statPtr: *const Tcl_StatBuf) -> ::std::os::raw::c_uint,
    >,
    pub tcl_SetEnsembleParameterList: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            token: Tcl_Command,
            paramList: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetEnsembleParameterList: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            token: Tcl_Command,
            paramListPtr: *mut *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ParseArgsObjv: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            argTable: *const Tcl_ArgvInfo,
            objcPtr: *mut ::std::os::raw::c_int,
            objv: *const *mut Tcl_Obj,
            remObjv: *mut *mut *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_GetErrorLine: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int,
    >,
    pub tcl_SetErrorLine: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, lineNum: ::std::os::raw::c_int),
    >,
    pub tcl_TransferResult: ::std::option::Option<
        unsafe extern "C" fn(
            sourceInterp: *mut Tcl_Interp,
            code: ::std::os::raw::c_int,
            targetInterp: *mut Tcl_Interp,
        ),
    >,
    pub tcl_InterpActive: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int,
    >,
    pub tcl_BackgroundException: ::std::option::Option<
        unsafe extern "C" fn(interp: *mut Tcl_Interp, code: ::std::os::raw::c_int),
    >,
    pub tcl_ZlibDeflate: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            format: ::std::os::raw::c_int,
            data: *mut Tcl_Obj,
            level: ::std::os::raw::c_int,
            gzipHeaderDictObj: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ZlibInflate: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            format: ::std::os::raw::c_int,
            data: *mut Tcl_Obj,
            buffersize: ::std::os::raw::c_int,
            gzipHeaderDictObj: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ZlibCRC32: ::std::option::Option<
        unsafe extern "C" fn(
            crc: ::std::os::raw::c_uint,
            buf: *const ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_uint,
    >,
    pub tcl_ZlibAdler32: ::std::option::Option<
        unsafe extern "C" fn(
            adler: ::std::os::raw::c_uint,
            buf: *const ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_uint,
    >,
    pub tcl_ZlibStreamInit: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            mode: ::std::os::raw::c_int,
            format: ::std::os::raw::c_int,
            level: ::std::os::raw::c_int,
            dictObj: *mut Tcl_Obj,
            zshandle: *mut Tcl_ZlibStream,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ZlibStreamGetCommandName:
        ::std::option::Option<unsafe extern "C" fn(zshandle: Tcl_ZlibStream) -> *mut Tcl_Obj>,
    pub tcl_ZlibStreamEof: ::std::option::Option<
        unsafe extern "C" fn(zshandle: Tcl_ZlibStream) -> ::std::os::raw::c_int,
    >,
    pub tcl_ZlibStreamChecksum: ::std::option::Option<
        unsafe extern "C" fn(zshandle: Tcl_ZlibStream) -> ::std::os::raw::c_int,
    >,
    pub tcl_ZlibStreamPut: ::std::option::Option<
        unsafe extern "C" fn(
            zshandle: Tcl_ZlibStream,
            data: *mut Tcl_Obj,
            flush: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ZlibStreamGet: ::std::option::Option<
        unsafe extern "C" fn(
            zshandle: Tcl_ZlibStream,
            data: *mut Tcl_Obj,
            count: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ZlibStreamClose: ::std::option::Option<
        unsafe extern "C" fn(zshandle: Tcl_ZlibStream) -> ::std::os::raw::c_int,
    >,
    pub tcl_ZlibStreamReset: ::std::option::Option<
        unsafe extern "C" fn(zshandle: Tcl_ZlibStream) -> ::std::os::raw::c_int,
    >,
    pub tcl_SetStartupScript: ::std::option::Option<
        unsafe extern "C" fn(path: *mut Tcl_Obj, encoding: *const ::std::os::raw::c_char),
    >,
    pub tcl_GetStartupScript: ::std::option::Option<
        unsafe extern "C" fn(encodingPtr: *mut *const ::std::os::raw::c_char) -> *mut Tcl_Obj,
    >,
    pub tcl_CloseEx: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            chan: Tcl_Channel,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_NRExprObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objPtr: *mut Tcl_Obj,
            resultPtr: *mut Tcl_Obj,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_NRSubstObj: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            objPtr: *mut Tcl_Obj,
            flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_LoadFile: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            pathPtr: *mut Tcl_Obj,
            symv: *const *const ::std::os::raw::c_char,
            flags: ::std::os::raw::c_int,
            procPtrs: *mut ::std::os::raw::c_void,
            handlePtr: *mut Tcl_LoadHandle,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_FindSymbol: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            handle: Tcl_LoadHandle,
            symbol: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub tcl_FSUnloadFile: ::std::option::Option<
        unsafe extern "C" fn(
            interp: *mut Tcl_Interp,
            handlePtr: Tcl_LoadHandle,
        ) -> ::std::os::raw::c_int,
    >,
    pub tcl_ZlibStreamSetCompressionDictionary: ::std::option::Option<
        unsafe extern "C" fn(zhandle: Tcl_ZlibStream, compressionDictionaryObj: *mut Tcl_Obj),
    >,
    pub reserved631: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved632: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved633: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved634: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved635: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved636: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved637: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved638: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved639: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved640: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved641: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved642: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved643: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved644: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved645: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved646: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved647: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved648: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved649: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved650: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved651: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved652: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved653: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved654: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved655: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved656: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved657: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved658: ::std::option::Option<unsafe extern "C" fn()>,
    pub reserved659: ::std::option::Option<unsafe extern "C" fn()>,
    pub tclUnusedStubEntry: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_TclStubs() {
    assert_eq!(
        ::std::mem::size_of::<TclStubs>(),
        5304usize,
        concat!("Size of: ", stringify!(TclStubs))
    );
    assert_eq!(
        ::std::mem::align_of::<TclStubs>(),
        8usize,
        concat!("Alignment of ", stringify!(TclStubs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).hooks as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(hooks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_PkgProvideEx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_PkgProvideEx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_PkgRequireEx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_PkgRequireEx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Panic as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Panic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Alloc as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Free as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Realloc as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Realloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DbCkalloc as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DbCkalloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DbCkfree as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DbCkfree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DbCkrealloc as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DbCkrealloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CreateFileHandler as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreateFileHandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DeleteFileHandler as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DeleteFileHandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetTimer as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetTimer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Sleep as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Sleep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_WaitForEvent as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_WaitForEvent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AppendAllObjTypes as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AppendAllObjTypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AppendStringsToObj as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AppendStringsToObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AppendToObj as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AppendToObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ConcatObj as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ConcatObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ConvertToType as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ConvertToType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DbDecrRefCount as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DbDecrRefCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DbIncrRefCount as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DbIncrRefCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DbIsShared as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DbIsShared)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DbNewBooleanObj as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DbNewBooleanObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DbNewByteArrayObj as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DbNewByteArrayObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DbNewDoubleObj as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DbNewDoubleObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DbNewListObj as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DbNewListObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DbNewLongObj as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DbNewLongObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DbNewObj as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DbNewObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DbNewStringObj as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DbNewStringObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DuplicateObj as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DuplicateObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tclFreeObj as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tclFreeObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetBoolean as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetBoolean)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetBooleanFromObj as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetBooleanFromObj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetByteArrayFromObj as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetByteArrayFromObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetDouble as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetDouble)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetDoubleFromObj as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetDoubleFromObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetIndexFromObj as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetIndexFromObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetInt as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetInt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetIntFromObj as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetIntFromObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetLongFromObj as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetLongFromObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetObjType as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetObjType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetStringFromObj as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetStringFromObj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_InvalidateStringRep as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_InvalidateStringRep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ListObjAppendList as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ListObjAppendList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_ListObjAppendElement as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ListObjAppendElement)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ListObjGetElements as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ListObjGetElements)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ListObjIndex as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ListObjIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ListObjLength as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ListObjLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ListObjReplace as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ListObjReplace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NewBooleanObj as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NewBooleanObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NewByteArrayObj as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NewByteArrayObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NewDoubleObj as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NewDoubleObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NewIntObj as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NewIntObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NewListObj as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NewListObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NewLongObj as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NewLongObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NewObj as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NewObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NewStringObj as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NewStringObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetBooleanObj as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetBooleanObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetByteArrayLength as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetByteArrayLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetByteArrayObj as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetByteArrayObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetDoubleObj as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetDoubleObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetIntObj as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetIntObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetListObj as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetListObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetLongObj as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetLongObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetObjLength as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetObjLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetStringObj as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetStringObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AddErrorInfo as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AddErrorInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AddObjErrorInfo as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AddObjErrorInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AllowExceptions as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AllowExceptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AppendElement as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AppendElement)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AppendResult as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AppendResult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AsyncCreate as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AsyncCreate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AsyncDelete as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AsyncDelete)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AsyncInvoke as *const _ as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AsyncInvoke)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AsyncMark as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AsyncMark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AsyncReady as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AsyncReady)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_BackgroundError as *const _ as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_BackgroundError)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Backslash as *const _ as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Backslash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_BadChannelOption as *const _ as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_BadChannelOption)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CallWhenDeleted as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CallWhenDeleted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CancelIdleCall as *const _ as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CancelIdleCall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Close as *const _ as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CommandComplete as *const _ as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CommandComplete)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Concat as *const _ as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Concat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ConvertElement as *const _ as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ConvertElement)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_ConvertCountedElement as *const _ as usize
        },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ConvertCountedElement)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CreateAlias as *const _ as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreateAlias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CreateAliasObj as *const _ as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreateAliasObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CreateChannel as *const _ as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreateChannel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_CreateChannelHandler as *const _ as usize
        },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreateChannelHandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CreateCloseHandler as *const _ as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreateCloseHandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CreateCommand as *const _ as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreateCommand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CreateEventSource as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreateEventSource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CreateExitHandler as *const _ as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreateExitHandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CreateInterp as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreateInterp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CreateMathFunc as *const _ as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreateMathFunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CreateObjCommand as *const _ as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreateObjCommand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CreateSlave as *const _ as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreateSlave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CreateTimerHandler as *const _ as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreateTimerHandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CreateTrace as *const _ as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreateTrace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DeleteAssocData as *const _ as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DeleteAssocData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_DeleteChannelHandler as *const _ as usize
        },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DeleteChannelHandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DeleteCloseHandler as *const _ as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DeleteCloseHandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DeleteCommand as *const _ as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DeleteCommand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_DeleteCommandFromToken as *const _ as usize
        },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DeleteCommandFromToken)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DeleteEvents as *const _ as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DeleteEvents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DeleteEventSource as *const _ as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DeleteEventSource)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DeleteExitHandler as *const _ as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DeleteExitHandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DeleteHashEntry as *const _ as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DeleteHashEntry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DeleteHashTable as *const _ as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DeleteHashTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DeleteInterp as *const _ as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DeleteInterp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DetachPids as *const _ as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DetachPids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DeleteTimerHandler as *const _ as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DeleteTimerHandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DeleteTrace as *const _ as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DeleteTrace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_DontCallWhenDeleted as *const _ as usize
        },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DontCallWhenDeleted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DoOneEvent as *const _ as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DoOneEvent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DoWhenIdle as *const _ as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DoWhenIdle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DStringAppend as *const _ as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DStringAppend)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_DStringAppendElement as *const _ as usize
        },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DStringAppendElement)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DStringEndSublist as *const _ as usize },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DStringEndSublist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DStringFree as *const _ as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DStringFree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DStringGetResult as *const _ as usize },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DStringGetResult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DStringInit as *const _ as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DStringInit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DStringResult as *const _ as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DStringResult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DStringSetLength as *const _ as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DStringSetLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_DStringStartSublist as *const _ as usize
        },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DStringStartSublist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Eof as *const _ as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Eof)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ErrnoId as *const _ as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ErrnoId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ErrnoMsg as *const _ as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ErrnoMsg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Eval as *const _ as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Eval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_EvalFile as *const _ as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_EvalFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_EvalObj as *const _ as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_EvalObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_EventuallyFree as *const _ as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_EventuallyFree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Exit as *const _ as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Exit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ExposeCommand as *const _ as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ExposeCommand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ExprBoolean as *const _ as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ExprBoolean)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ExprBooleanObj as *const _ as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ExprBooleanObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ExprDouble as *const _ as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ExprDouble)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ExprDoubleObj as *const _ as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ExprDoubleObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ExprLong as *const _ as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ExprLong)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ExprLongObj as *const _ as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ExprLongObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ExprObj as *const _ as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ExprObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ExprString as *const _ as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ExprString)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Finalize as *const _ as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Finalize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FindExecutable as *const _ as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FindExecutable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FirstHashEntry as *const _ as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FirstHashEntry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Flush as *const _ as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Flush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FreeResult as *const _ as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FreeResult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetAlias as *const _ as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetAlias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetAliasObj as *const _ as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetAliasObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetAssocData as *const _ as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetAssocData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetChannel as *const _ as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetChannel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetChannelBufferSize as *const _ as usize
        },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetChannelBufferSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetChannelHandle as *const _ as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetChannelHandle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetChannelInstanceData as *const _ as usize
        },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetChannelInstanceData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetChannelMode as *const _ as usize },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetChannelMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetChannelName as *const _ as usize },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetChannelName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetChannelOption as *const _ as usize },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetChannelOption)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetChannelType as *const _ as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetChannelType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetCommandInfo as *const _ as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetCommandInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetCommandName as *const _ as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetCommandName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetErrno as *const _ as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetErrno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetHostName as *const _ as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetHostName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetInterpPath as *const _ as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetInterpPath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetMaster as *const _ as usize },
        1328usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetMaster)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetNameOfExecutable as *const _ as usize
        },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetNameOfExecutable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetObjResult as *const _ as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetObjResult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetOpenFile as *const _ as usize },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetOpenFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetPathType as *const _ as usize },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetPathType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Gets as *const _ as usize },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Gets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetsObj as *const _ as usize },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetsObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetServiceMode as *const _ as usize },
        1384usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetServiceMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetSlave as *const _ as usize },
        1392usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetSlave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetStdChannel as *const _ as usize },
        1400usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetStdChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetStringResult as *const _ as usize },
        1408usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetStringResult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetVar as *const _ as usize },
        1416usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetVar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetVar2 as *const _ as usize },
        1424usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetVar2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GlobalEval as *const _ as usize },
        1432usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GlobalEval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GlobalEvalObj as *const _ as usize },
        1440usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GlobalEvalObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_HideCommand as *const _ as usize },
        1448usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_HideCommand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Init as *const _ as usize },
        1456usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_InitHashTable as *const _ as usize },
        1464usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_InitHashTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_InputBlocked as *const _ as usize },
        1472usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_InputBlocked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_InputBuffered as *const _ as usize },
        1480usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_InputBuffered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_InterpDeleted as *const _ as usize },
        1488usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_InterpDeleted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_IsSafe as *const _ as usize },
        1496usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_IsSafe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_JoinPath as *const _ as usize },
        1504usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_JoinPath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_LinkVar as *const _ as usize },
        1512usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_LinkVar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved188 as *const _ as usize },
        1520usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved188)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_MakeFileChannel as *const _ as usize },
        1528usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_MakeFileChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_MakeSafe as *const _ as usize },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_MakeSafe)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_MakeTcpClientChannel as *const _ as usize
        },
        1544usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_MakeTcpClientChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Merge as *const _ as usize },
        1552usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Merge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NextHashEntry as *const _ as usize },
        1560usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NextHashEntry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NotifyChannel as *const _ as usize },
        1568usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NotifyChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ObjGetVar2 as *const _ as usize },
        1576usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ObjGetVar2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ObjSetVar2 as *const _ as usize },
        1584usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ObjSetVar2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_OpenCommandChannel as *const _ as usize },
        1592usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_OpenCommandChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_OpenFileChannel as *const _ as usize },
        1600usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_OpenFileChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_OpenTcpClient as *const _ as usize },
        1608usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_OpenTcpClient)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_OpenTcpServer as *const _ as usize },
        1616usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_OpenTcpServer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Preserve as *const _ as usize },
        1624usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Preserve)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_PrintDouble as *const _ as usize },
        1632usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_PrintDouble)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_PutEnv as *const _ as usize },
        1640usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_PutEnv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_PosixError as *const _ as usize },
        1648usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_PosixError)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_QueueEvent as *const _ as usize },
        1656usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_QueueEvent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Read as *const _ as usize },
        1664usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ReapDetachedProcs as *const _ as usize },
        1672usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ReapDetachedProcs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_RecordAndEval as *const _ as usize },
        1680usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_RecordAndEval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_RecordAndEvalObj as *const _ as usize },
        1688usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_RecordAndEvalObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_RegisterChannel as *const _ as usize },
        1696usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_RegisterChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_RegisterObjType as *const _ as usize },
        1704usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_RegisterObjType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_RegExpCompile as *const _ as usize },
        1712usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_RegExpCompile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_RegExpExec as *const _ as usize },
        1720usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_RegExpExec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_RegExpMatch as *const _ as usize },
        1728usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_RegExpMatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_RegExpRange as *const _ as usize },
        1736usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_RegExpRange)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Release as *const _ as usize },
        1744usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ResetResult as *const _ as usize },
        1752usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ResetResult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ScanElement as *const _ as usize },
        1760usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ScanElement)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ScanCountedElement as *const _ as usize },
        1768usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ScanCountedElement)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SeekOld as *const _ as usize },
        1776usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SeekOld)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ServiceAll as *const _ as usize },
        1784usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ServiceAll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ServiceEvent as *const _ as usize },
        1792usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ServiceEvent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetAssocData as *const _ as usize },
        1800usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetAssocData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_SetChannelBufferSize as *const _ as usize
        },
        1808usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetChannelBufferSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetChannelOption as *const _ as usize },
        1816usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetChannelOption)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetCommandInfo as *const _ as usize },
        1824usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetCommandInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetErrno as *const _ as usize },
        1832usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetErrno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetErrorCode as *const _ as usize },
        1840usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetErrorCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetMaxBlockTime as *const _ as usize },
        1848usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetMaxBlockTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetPanicProc as *const _ as usize },
        1856usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetPanicProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetRecursionLimit as *const _ as usize },
        1864usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetRecursionLimit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetResult as *const _ as usize },
        1872usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetResult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetServiceMode as *const _ as usize },
        1880usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetServiceMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetObjErrorCode as *const _ as usize },
        1888usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetObjErrorCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetObjResult as *const _ as usize },
        1896usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetObjResult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetStdChannel as *const _ as usize },
        1904usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetStdChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetVar as *const _ as usize },
        1912usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetVar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetVar2 as *const _ as usize },
        1920usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetVar2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SignalId as *const _ as usize },
        1928usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SignalId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SignalMsg as *const _ as usize },
        1936usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SignalMsg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SourceRCFile as *const _ as usize },
        1944usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SourceRCFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SplitList as *const _ as usize },
        1952usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SplitList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SplitPath as *const _ as usize },
        1960usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SplitPath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_StaticPackage as *const _ as usize },
        1968usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_StaticPackage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_StringMatch as *const _ as usize },
        1976usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_StringMatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_TellOld as *const _ as usize },
        1984usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_TellOld)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_TraceVar as *const _ as usize },
        1992usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_TraceVar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_TraceVar2 as *const _ as usize },
        2000usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_TraceVar2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_TranslateFileName as *const _ as usize },
        2008usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_TranslateFileName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Ungets as *const _ as usize },
        2016usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Ungets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UnlinkVar as *const _ as usize },
        2024usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UnlinkVar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UnregisterChannel as *const _ as usize },
        2032usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UnregisterChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UnsetVar as *const _ as usize },
        2040usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UnsetVar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UnsetVar2 as *const _ as usize },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UnsetVar2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UntraceVar as *const _ as usize },
        2056usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UntraceVar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UntraceVar2 as *const _ as usize },
        2064usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UntraceVar2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UpdateLinkedVar as *const _ as usize },
        2072usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UpdateLinkedVar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UpVar as *const _ as usize },
        2080usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UpVar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UpVar2 as *const _ as usize },
        2088usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UpVar2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_VarEval as *const _ as usize },
        2096usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_VarEval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_VarTraceInfo as *const _ as usize },
        2104usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_VarTraceInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_VarTraceInfo2 as *const _ as usize },
        2112usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_VarTraceInfo2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Write as *const _ as usize },
        2120usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_WrongNumArgs as *const _ as usize },
        2128usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_WrongNumArgs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DumpActiveMemory as *const _ as usize },
        2136usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DumpActiveMemory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ValidateAllMemory as *const _ as usize },
        2144usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ValidateAllMemory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AppendResultVA as *const _ as usize },
        2152usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AppendResultVA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_AppendStringsToObjVA as *const _ as usize
        },
        2160usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AppendStringsToObjVA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_HashStats as *const _ as usize },
        2168usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_HashStats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ParseVar as *const _ as usize },
        2176usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ParseVar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_PkgPresent as *const _ as usize },
        2184usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_PkgPresent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_PkgPresentEx as *const _ as usize },
        2192usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_PkgPresentEx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_PkgProvide as *const _ as usize },
        2200usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_PkgProvide)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_PkgRequire as *const _ as usize },
        2208usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_PkgRequire)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetErrorCodeVA as *const _ as usize },
        2216usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetErrorCodeVA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_VarEvalVA as *const _ as usize },
        2224usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_VarEvalVA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_WaitPid as *const _ as usize },
        2232usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_WaitPid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_PanicVA as *const _ as usize },
        2240usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_PanicVA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetVersion as *const _ as usize },
        2248usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_InitMemory as *const _ as usize },
        2256usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_InitMemory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_StackChannel as *const _ as usize },
        2264usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_StackChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UnstackChannel as *const _ as usize },
        2272usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UnstackChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetStackedChannel as *const _ as usize },
        2280usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetStackedChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetMainLoop as *const _ as usize },
        2288usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetMainLoop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved285 as *const _ as usize },
        2296usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved285)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AppendObjToObj as *const _ as usize },
        2304usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AppendObjToObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CreateEncoding as *const _ as usize },
        2312usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreateEncoding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_CreateThreadExitHandler as *const _ as usize
        },
        2320usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreateThreadExitHandler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_DeleteThreadExitHandler as *const _ as usize
        },
        2328usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DeleteThreadExitHandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DiscardResult as *const _ as usize },
        2336usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DiscardResult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_EvalEx as *const _ as usize },
        2344usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_EvalEx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_EvalObjv as *const _ as usize },
        2352usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_EvalObjv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_EvalObjEx as *const _ as usize },
        2360usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_EvalObjEx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ExitThread as *const _ as usize },
        2368usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ExitThread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ExternalToUtf as *const _ as usize },
        2376usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ExternalToUtf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_ExternalToUtfDString as *const _ as usize
        },
        2384usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ExternalToUtfDString)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FinalizeThread as *const _ as usize },
        2392usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FinalizeThread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FinalizeNotifier as *const _ as usize },
        2400usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FinalizeNotifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FreeEncoding as *const _ as usize },
        2408usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FreeEncoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetCurrentThread as *const _ as usize },
        2416usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetCurrentThread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetEncoding as *const _ as usize },
        2424usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetEncoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetEncodingName as *const _ as usize },
        2432usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetEncodingName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetEncodingNames as *const _ as usize },
        2440usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetEncodingNames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetIndexFromObjStruct as *const _ as usize
        },
        2448usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetIndexFromObjStruct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetThreadData as *const _ as usize },
        2456usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetThreadData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetVar2Ex as *const _ as usize },
        2464usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetVar2Ex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_InitNotifier as *const _ as usize },
        2472usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_InitNotifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_MutexLock as *const _ as usize },
        2480usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_MutexLock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_MutexUnlock as *const _ as usize },
        2488usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_MutexUnlock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ConditionNotify as *const _ as usize },
        2496usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ConditionNotify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ConditionWait as *const _ as usize },
        2504usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ConditionWait)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NumUtfChars as *const _ as usize },
        2512usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NumUtfChars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ReadChars as *const _ as usize },
        2520usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ReadChars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_RestoreResult as *const _ as usize },
        2528usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_RestoreResult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SaveResult as *const _ as usize },
        2536usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SaveResult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetSystemEncoding as *const _ as usize },
        2544usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetSystemEncoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetVar2Ex as *const _ as usize },
        2552usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetVar2Ex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ThreadAlert as *const _ as usize },
        2560usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ThreadAlert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ThreadQueueEvent as *const _ as usize },
        2568usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ThreadQueueEvent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UniCharAtIndex as *const _ as usize },
        2576usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UniCharAtIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UniCharToLower as *const _ as usize },
        2584usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UniCharToLower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UniCharToTitle as *const _ as usize },
        2592usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UniCharToTitle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UniCharToUpper as *const _ as usize },
        2600usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UniCharToUpper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UniCharToUtf as *const _ as usize },
        2608usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UniCharToUtf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UtfAtIndex as *const _ as usize },
        2616usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UtfAtIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UtfCharComplete as *const _ as usize },
        2624usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UtfCharComplete)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UtfBackslash as *const _ as usize },
        2632usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UtfBackslash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UtfFindFirst as *const _ as usize },
        2640usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UtfFindFirst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UtfFindLast as *const _ as usize },
        2648usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UtfFindLast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UtfNext as *const _ as usize },
        2656usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UtfNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UtfPrev as *const _ as usize },
        2664usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UtfPrev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UtfToExternal as *const _ as usize },
        2672usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UtfToExternal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_UtfToExternalDString as *const _ as usize
        },
        2680usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UtfToExternalDString)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UtfToLower as *const _ as usize },
        2688usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UtfToLower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UtfToTitle as *const _ as usize },
        2696usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UtfToTitle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UtfToUniChar as *const _ as usize },
        2704usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UtfToUniChar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UtfToUpper as *const _ as usize },
        2712usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UtfToUpper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_WriteChars as *const _ as usize },
        2720usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_WriteChars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_WriteObj as *const _ as usize },
        2728usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_WriteObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetString as *const _ as usize },
        2736usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetString)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetDefaultEncodingDir as *const _ as usize
        },
        2744usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetDefaultEncodingDir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_SetDefaultEncodingDir as *const _ as usize
        },
        2752usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetDefaultEncodingDir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AlertNotifier as *const _ as usize },
        2760usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AlertNotifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ServiceModeHook as *const _ as usize },
        2768usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ServiceModeHook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UniCharIsAlnum as *const _ as usize },
        2776usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UniCharIsAlnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UniCharIsAlpha as *const _ as usize },
        2784usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UniCharIsAlpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UniCharIsDigit as *const _ as usize },
        2792usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UniCharIsDigit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UniCharIsLower as *const _ as usize },
        2800usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UniCharIsLower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UniCharIsSpace as *const _ as usize },
        2808usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UniCharIsSpace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UniCharIsUpper as *const _ as usize },
        2816usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UniCharIsUpper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UniCharIsWordChar as *const _ as usize },
        2824usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UniCharIsWordChar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UniCharLen as *const _ as usize },
        2832usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UniCharLen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UniCharNcmp as *const _ as usize },
        2840usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UniCharNcmp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_UniCharToUtfDString as *const _ as usize
        },
        2848usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UniCharToUtfDString)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_UtfToUniCharDString as *const _ as usize
        },
        2856usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UtfToUniCharDString)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetRegExpFromObj as *const _ as usize },
        2864usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetRegExpFromObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_EvalTokens as *const _ as usize },
        2872usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_EvalTokens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FreeParse as *const _ as usize },
        2880usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FreeParse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_LogCommandInfo as *const _ as usize },
        2888usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_LogCommandInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ParseBraces as *const _ as usize },
        2896usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ParseBraces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ParseCommand as *const _ as usize },
        2904usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ParseCommand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ParseExpr as *const _ as usize },
        2912usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ParseExpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ParseQuotedString as *const _ as usize },
        2920usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ParseQuotedString)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ParseVarName as *const _ as usize },
        2928usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ParseVarName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetCwd as *const _ as usize },
        2936usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetCwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Chdir as *const _ as usize },
        2944usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Chdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Access as *const _ as usize },
        2952usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Stat as *const _ as usize },
        2960usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Stat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UtfNcmp as *const _ as usize },
        2968usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UtfNcmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UtfNcasecmp as *const _ as usize },
        2976usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UtfNcasecmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_StringCaseMatch as *const _ as usize },
        2984usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_StringCaseMatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UniCharIsControl as *const _ as usize },
        2992usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UniCharIsControl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UniCharIsGraph as *const _ as usize },
        3000usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UniCharIsGraph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UniCharIsPrint as *const _ as usize },
        3008usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UniCharIsPrint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UniCharIsPunct as *const _ as usize },
        3016usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UniCharIsPunct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_RegExpExecObj as *const _ as usize },
        3024usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_RegExpExecObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_RegExpGetInfo as *const _ as usize },
        3032usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_RegExpGetInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NewUnicodeObj as *const _ as usize },
        3040usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NewUnicodeObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetUnicodeObj as *const _ as usize },
        3048usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetUnicodeObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetCharLength as *const _ as usize },
        3056usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetCharLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetUniChar as *const _ as usize },
        3064usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetUniChar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetUnicode as *const _ as usize },
        3072usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetUnicode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetRange as *const _ as usize },
        3080usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetRange)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AppendUnicodeToObj as *const _ as usize },
        3088usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AppendUnicodeToObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_RegExpMatchObj as *const _ as usize },
        3096usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_RegExpMatchObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetNotifier as *const _ as usize },
        3104usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetNotifier)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetAllocMutex as *const _ as usize },
        3112usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetAllocMutex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetChannelNames as *const _ as usize },
        3120usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetChannelNames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetChannelNamesEx as *const _ as usize },
        3128usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetChannelNamesEx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ProcObjCmd as *const _ as usize },
        3136usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ProcObjCmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ConditionFinalize as *const _ as usize },
        3144usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ConditionFinalize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_MutexFinalize as *const _ as usize },
        3152usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_MutexFinalize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CreateThread as *const _ as usize },
        3160usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreateThread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ReadRaw as *const _ as usize },
        3168usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ReadRaw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_WriteRaw as *const _ as usize },
        3176usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_WriteRaw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetTopChannel as *const _ as usize },
        3184usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetTopChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ChannelBuffered as *const _ as usize },
        3192usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ChannelBuffered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ChannelName as *const _ as usize },
        3200usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ChannelName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ChannelVersion as *const _ as usize },
        3208usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ChannelVersion)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_ChannelBlockModeProc as *const _ as usize
        },
        3216usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ChannelBlockModeProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ChannelCloseProc as *const _ as usize },
        3224usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ChannelCloseProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ChannelClose2Proc as *const _ as usize },
        3232usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ChannelClose2Proc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ChannelInputProc as *const _ as usize },
        3240usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ChannelInputProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ChannelOutputProc as *const _ as usize },
        3248usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ChannelOutputProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ChannelSeekProc as *const _ as usize },
        3256usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ChannelSeekProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_ChannelSetOptionProc as *const _ as usize
        },
        3264usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ChannelSetOptionProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_ChannelGetOptionProc as *const _ as usize
        },
        3272usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ChannelGetOptionProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ChannelWatchProc as *const _ as usize },
        3280usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ChannelWatchProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_ChannelGetHandleProc as *const _ as usize
        },
        3288usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ChannelGetHandleProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ChannelFlushProc as *const _ as usize },
        3296usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ChannelFlushProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ChannelHandlerProc as *const _ as usize },
        3304usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ChannelHandlerProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_JoinThread as *const _ as usize },
        3312usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_JoinThread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_IsChannelShared as *const _ as usize },
        3320usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_IsChannelShared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_IsChannelRegistered as *const _ as usize
        },
        3328usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_IsChannelRegistered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CutChannel as *const _ as usize },
        3336usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CutChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SpliceChannel as *const _ as usize },
        3344usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SpliceChannel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_ClearChannelHandlers as *const _ as usize
        },
        3352usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ClearChannelHandlers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_IsChannelExisting as *const _ as usize },
        3360usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_IsChannelExisting)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UniCharNcasecmp as *const _ as usize },
        3368usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UniCharNcasecmp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UniCharCaseMatch as *const _ as usize },
        3376usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UniCharCaseMatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FindHashEntry as *const _ as usize },
        3384usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FindHashEntry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CreateHashEntry as *const _ as usize },
        3392usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreateHashEntry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_InitCustomHashTable as *const _ as usize
        },
        3400usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_InitCustomHashTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_InitObjHashTable as *const _ as usize },
        3408usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_InitObjHashTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CommandTraceInfo as *const _ as usize },
        3416usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CommandTraceInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_TraceCommand as *const _ as usize },
        3424usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_TraceCommand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_UntraceCommand as *const _ as usize },
        3432usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_UntraceCommand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AttemptAlloc as *const _ as usize },
        3440usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AttemptAlloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AttemptDbCkalloc as *const _ as usize },
        3448usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AttemptDbCkalloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AttemptRealloc as *const _ as usize },
        3456usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AttemptRealloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AttemptDbCkrealloc as *const _ as usize },
        3464usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AttemptDbCkrealloc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_AttemptSetObjLength as *const _ as usize
        },
        3472usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AttemptSetObjLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetChannelThread as *const _ as usize },
        3480usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetChannelThread)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetUnicodeFromObj as *const _ as usize },
        3488usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetUnicodeFromObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetMathFuncInfo as *const _ as usize },
        3496usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetMathFuncInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ListMathFuncs as *const _ as usize },
        3504usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ListMathFuncs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SubstObj as *const _ as usize },
        3512usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SubstObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DetachChannel as *const _ as usize },
        3520usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DetachChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_IsStandardChannel as *const _ as usize },
        3528usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_IsStandardChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSCopyFile as *const _ as usize },
        3536usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSCopyFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSCopyDirectory as *const _ as usize },
        3544usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSCopyDirectory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSCreateDirectory as *const _ as usize },
        3552usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSCreateDirectory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSDeleteFile as *const _ as usize },
        3560usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSDeleteFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSLoadFile as *const _ as usize },
        3568usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSLoadFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSMatchInDirectory as *const _ as usize },
        3576usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSMatchInDirectory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSLink as *const _ as usize },
        3584usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSLink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSRemoveDirectory as *const _ as usize },
        3592usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSRemoveDirectory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSRenameFile as *const _ as usize },
        3600usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSRenameFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSLstat as *const _ as usize },
        3608usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSLstat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSUtime as *const _ as usize },
        3616usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSUtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSFileAttrsGet as *const _ as usize },
        3624usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSFileAttrsGet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSFileAttrsSet as *const _ as usize },
        3632usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSFileAttrsSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSFileAttrStrings as *const _ as usize },
        3640usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSFileAttrStrings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSStat as *const _ as usize },
        3648usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSStat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSAccess as *const _ as usize },
        3656usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSAccess)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSOpenFileChannel as *const _ as usize },
        3664usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSOpenFileChannel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSGetCwd as *const _ as usize },
        3672usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSGetCwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSChdir as *const _ as usize },
        3680usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSChdir)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_FSConvertToPathType as *const _ as usize
        },
        3688usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSConvertToPathType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSJoinPath as *const _ as usize },
        3696usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSJoinPath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSSplitPath as *const _ as usize },
        3704usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSSplitPath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSEqualPaths as *const _ as usize },
        3712usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSEqualPaths)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_FSGetNormalizedPath as *const _ as usize
        },
        3720usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSGetNormalizedPath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSJoinToPath as *const _ as usize },
        3728usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSJoinToPath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSGetInternalRep as *const _ as usize },
        3736usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSGetInternalRep)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_FSGetTranslatedPath as *const _ as usize
        },
        3744usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSGetTranslatedPath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSEvalFile as *const _ as usize },
        3752usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSEvalFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSNewNativePath as *const _ as usize },
        3760usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSNewNativePath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSGetNativePath as *const _ as usize },
        3768usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSGetNativePath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSFileSystemInfo as *const _ as usize },
        3776usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSFileSystemInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSPathSeparator as *const _ as usize },
        3784usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSPathSeparator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSListVolumes as *const _ as usize },
        3792usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSListVolumes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSRegister as *const _ as usize },
        3800usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSRegister)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSUnregister as *const _ as usize },
        3808usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSUnregister)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSData as *const _ as usize },
        3816usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_FSGetTranslatedStringPath as *const _ as usize
        },
        3824usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSGetTranslatedStringPath)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_FSGetFileSystemForPath as *const _ as usize
        },
        3832usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSGetFileSystemForPath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSGetPathType as *const _ as usize },
        3840usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSGetPathType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_OutputBuffered as *const _ as usize },
        3848usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_OutputBuffered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSMountsChanged as *const _ as usize },
        3856usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSMountsChanged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_EvalTokensStandard as *const _ as usize },
        3864usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_EvalTokensStandard)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetTime as *const _ as usize },
        3872usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CreateObjTrace as *const _ as usize },
        3880usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreateObjTrace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetCommandInfoFromToken as *const _ as usize
        },
        3888usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetCommandInfoFromToken)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_SetCommandInfoFromToken as *const _ as usize
        },
        3896usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetCommandInfoFromToken)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DbNewWideIntObj as *const _ as usize },
        3904usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DbNewWideIntObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetWideIntFromObj as *const _ as usize },
        3912usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetWideIntFromObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NewWideIntObj as *const _ as usize },
        3920usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NewWideIntObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetWideIntObj as *const _ as usize },
        3928usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetWideIntObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AllocStatBuf as *const _ as usize },
        3936usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AllocStatBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Seek as *const _ as usize },
        3944usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Tell as *const _ as usize },
        3952usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Tell)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_ChannelWideSeekProc as *const _ as usize
        },
        3960usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ChannelWideSeekProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DictObjPut as *const _ as usize },
        3968usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DictObjPut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DictObjGet as *const _ as usize },
        3976usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DictObjGet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DictObjRemove as *const _ as usize },
        3984usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DictObjRemove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DictObjSize as *const _ as usize },
        3992usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DictObjSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DictObjFirst as *const _ as usize },
        4000usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DictObjFirst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DictObjNext as *const _ as usize },
        4008usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DictObjNext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DictObjDone as *const _ as usize },
        4016usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DictObjDone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DictObjPutKeyList as *const _ as usize },
        4024usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DictObjPutKeyList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_DictObjRemoveKeyList as *const _ as usize
        },
        4032usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DictObjRemoveKeyList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NewDictObj as *const _ as usize },
        4040usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NewDictObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DbNewDictObj as *const _ as usize },
        4048usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DbNewDictObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_RegisterConfig as *const _ as usize },
        4056usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_RegisterConfig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CreateNamespace as *const _ as usize },
        4064usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreateNamespace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DeleteNamespace as *const _ as usize },
        4072usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DeleteNamespace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AppendExportList as *const _ as usize },
        4080usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AppendExportList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Export as *const _ as usize },
        4088usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Export)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Import as *const _ as usize },
        4096usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Import)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ForgetImport as *const _ as usize },
        4104usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ForgetImport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetCurrentNamespace as *const _ as usize
        },
        4112usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetCurrentNamespace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetGlobalNamespace as *const _ as usize },
        4120usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetGlobalNamespace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FindNamespace as *const _ as usize },
        4128usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FindNamespace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FindCommand as *const _ as usize },
        4136usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FindCommand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetCommandFromObj as *const _ as usize },
        4144usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetCommandFromObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetCommandFullName as *const _ as usize },
        4152usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetCommandFullName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSEvalFileEx as *const _ as usize },
        4160usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSEvalFileEx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetExitProc as *const _ as usize },
        4168usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetExitProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_LimitAddHandler as *const _ as usize },
        4176usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_LimitAddHandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_LimitRemoveHandler as *const _ as usize },
        4184usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_LimitRemoveHandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_LimitReady as *const _ as usize },
        4192usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_LimitReady)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_LimitCheck as *const _ as usize },
        4200usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_LimitCheck)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_LimitExceeded as *const _ as usize },
        4208usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_LimitExceeded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_LimitSetCommands as *const _ as usize },
        4216usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_LimitSetCommands)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_LimitSetTime as *const _ as usize },
        4224usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_LimitSetTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_LimitSetGranularity as *const _ as usize
        },
        4232usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_LimitSetGranularity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_LimitTypeEnabled as *const _ as usize },
        4240usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_LimitTypeEnabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_LimitTypeExceeded as *const _ as usize },
        4248usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_LimitTypeExceeded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_LimitTypeSet as *const _ as usize },
        4256usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_LimitTypeSet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_LimitTypeReset as *const _ as usize },
        4264usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_LimitTypeReset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_LimitGetCommands as *const _ as usize },
        4272usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_LimitGetCommands)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_LimitGetTime as *const _ as usize },
        4280usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_LimitGetTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_LimitGetGranularity as *const _ as usize
        },
        4288usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_LimitGetGranularity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SaveInterpState as *const _ as usize },
        4296usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SaveInterpState)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_RestoreInterpState as *const _ as usize },
        4304usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_RestoreInterpState)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DiscardInterpState as *const _ as usize },
        4312usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DiscardInterpState)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetReturnOptions as *const _ as usize },
        4320usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetReturnOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetReturnOptions as *const _ as usize },
        4328usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetReturnOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_IsEnsemble as *const _ as usize },
        4336usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_IsEnsemble)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CreateEnsemble as *const _ as usize },
        4344usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreateEnsemble)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FindEnsemble as *const _ as usize },
        4352usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FindEnsemble)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_SetEnsembleSubcommandList as *const _ as usize
        },
        4360usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetEnsembleSubcommandList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_SetEnsembleMappingDict as *const _ as usize
        },
        4368usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetEnsembleMappingDict)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_SetEnsembleUnknownHandler as *const _ as usize
        },
        4376usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetEnsembleUnknownHandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetEnsembleFlags as *const _ as usize },
        4384usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetEnsembleFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetEnsembleSubcommandList as *const _ as usize
        },
        4392usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetEnsembleSubcommandList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetEnsembleMappingDict as *const _ as usize
        },
        4400usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetEnsembleMappingDict)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetEnsembleUnknownHandler as *const _ as usize
        },
        4408usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetEnsembleUnknownHandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetEnsembleFlags as *const _ as usize },
        4416usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetEnsembleFlags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetEnsembleNamespace as *const _ as usize
        },
        4424usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetEnsembleNamespace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetTimeProc as *const _ as usize },
        4432usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetTimeProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_QueryTimeProc as *const _ as usize },
        4440usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_QueryTimeProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_ChannelThreadActionProc as *const _ as usize
        },
        4448usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ChannelThreadActionProc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NewBignumObj as *const _ as usize },
        4456usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NewBignumObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_DbNewBignumObj as *const _ as usize },
        4464usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_DbNewBignumObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetBignumObj as *const _ as usize },
        4472usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetBignumObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetBignumFromObj as *const _ as usize },
        4480usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetBignumFromObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_TakeBignumFromObj as *const _ as usize },
        4488usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_TakeBignumFromObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_TruncateChannel as *const _ as usize },
        4496usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_TruncateChannel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_ChannelTruncateProc as *const _ as usize
        },
        4504usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ChannelTruncateProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_SetChannelErrorInterp as *const _ as usize
        },
        4512usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetChannelErrorInterp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetChannelErrorInterp as *const _ as usize
        },
        4520usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetChannelErrorInterp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetChannelError as *const _ as usize },
        4528usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetChannelError)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetChannelError as *const _ as usize },
        4536usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetChannelError)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_InitBignumFromDouble as *const _ as usize
        },
        4544usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_InitBignumFromDouble)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetNamespaceUnknownHandler as *const _ as usize
        },
        4552usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetNamespaceUnknownHandler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_SetNamespaceUnknownHandler as *const _ as usize
        },
        4560usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetNamespaceUnknownHandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetEncodingFromObj as *const _ as usize },
        4568usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetEncodingFromObj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetEncodingSearchPath as *const _ as usize
        },
        4576usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetEncodingSearchPath)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_SetEncodingSearchPath as *const _ as usize
        },
        4584usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetEncodingSearchPath)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetEncodingNameFromEnvironment as *const _
                as usize
        },
        4592usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetEncodingNameFromEnvironment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_PkgRequireProc as *const _ as usize },
        4600usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_PkgRequireProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_AppendObjToErrorInfo as *const _ as usize
        },
        4608usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AppendObjToErrorInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AppendLimitedToObj as *const _ as usize },
        4616usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AppendLimitedToObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Format as *const _ as usize },
        4624usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AppendFormatToObj as *const _ as usize },
        4632usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AppendFormatToObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ObjPrintf as *const _ as usize },
        4640usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ObjPrintf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_AppendPrintfToObj as *const _ as usize },
        4648usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_AppendPrintfToObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CancelEval as *const _ as usize },
        4656usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CancelEval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_Canceled as *const _ as usize },
        4664usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_Canceled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CreatePipe as *const _ as usize },
        4672usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CreatePipe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NRCreateCommand as *const _ as usize },
        4680usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NRCreateCommand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NREvalObj as *const _ as usize },
        4688usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NREvalObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NREvalObjv as *const _ as usize },
        4696usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NREvalObjv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NRCmdSwap as *const _ as usize },
        4704usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NRCmdSwap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NRAddCallback as *const _ as usize },
        4712usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NRAddCallback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NRCallObjProc as *const _ as usize },
        4720usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NRCallObjProc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetFSDeviceFromStat as *const _ as usize
        },
        4728usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetFSDeviceFromStat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetFSInodeFromStat as *const _ as usize },
        4736usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetFSInodeFromStat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetModeFromStat as *const _ as usize },
        4744usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetModeFromStat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetLinkCountFromStat as *const _ as usize
        },
        4752usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetLinkCountFromStat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetUserIdFromStat as *const _ as usize },
        4760usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetUserIdFromStat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetGroupIdFromStat as *const _ as usize },
        4768usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetGroupIdFromStat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetDeviceTypeFromStat as *const _ as usize
        },
        4776usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetDeviceTypeFromStat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetAccessTimeFromStat as *const _ as usize
        },
        4784usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetAccessTimeFromStat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetModificationTimeFromStat as *const _
                as usize
        },
        4792usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetModificationTimeFromStat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetChangeTimeFromStat as *const _ as usize
        },
        4800usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetChangeTimeFromStat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetSizeFromStat as *const _ as usize },
        4808usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetSizeFromStat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetBlocksFromStat as *const _ as usize },
        4816usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetBlocksFromStat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetBlockSizeFromStat as *const _ as usize
        },
        4824usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetBlockSizeFromStat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_SetEnsembleParameterList as *const _ as usize
        },
        4832usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetEnsembleParameterList)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_GetEnsembleParameterList as *const _ as usize
        },
        4840usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetEnsembleParameterList)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ParseArgsObjv as *const _ as usize },
        4848usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ParseArgsObjv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetErrorLine as *const _ as usize },
        4856usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetErrorLine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetErrorLine as *const _ as usize },
        4864usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetErrorLine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_TransferResult as *const _ as usize },
        4872usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_TransferResult)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_InterpActive as *const _ as usize },
        4880usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_InterpActive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_BackgroundException as *const _ as usize
        },
        4888usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_BackgroundException)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ZlibDeflate as *const _ as usize },
        4896usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ZlibDeflate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ZlibInflate as *const _ as usize },
        4904usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ZlibInflate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ZlibCRC32 as *const _ as usize },
        4912usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ZlibCRC32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ZlibAdler32 as *const _ as usize },
        4920usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ZlibAdler32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ZlibStreamInit as *const _ as usize },
        4928usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ZlibStreamInit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_ZlibStreamGetCommandName as *const _ as usize
        },
        4936usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ZlibStreamGetCommandName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ZlibStreamEof as *const _ as usize },
        4944usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ZlibStreamEof)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ZlibStreamChecksum as *const _ as usize },
        4952usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ZlibStreamChecksum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ZlibStreamPut as *const _ as usize },
        4960usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ZlibStreamPut)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ZlibStreamGet as *const _ as usize },
        4968usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ZlibStreamGet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ZlibStreamClose as *const _ as usize },
        4976usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ZlibStreamClose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_ZlibStreamReset as *const _ as usize },
        4984usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ZlibStreamReset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_SetStartupScript as *const _ as usize },
        4992usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_SetStartupScript)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_GetStartupScript as *const _ as usize },
        5000usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_GetStartupScript)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_CloseEx as *const _ as usize },
        5008usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_CloseEx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NRExprObj as *const _ as usize },
        5016usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NRExprObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_NRSubstObj as *const _ as usize },
        5024usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_NRSubstObj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_LoadFile as *const _ as usize },
        5032usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_LoadFile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FindSymbol as *const _ as usize },
        5040usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FindSymbol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tcl_FSUnloadFile as *const _ as usize },
        5048usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_FSUnloadFile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<TclStubs>())).tcl_ZlibStreamSetCompressionDictionary as *const _
                as usize
        },
        5056usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tcl_ZlibStreamSetCompressionDictionary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved631 as *const _ as usize },
        5064usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved631)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved632 as *const _ as usize },
        5072usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved632)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved633 as *const _ as usize },
        5080usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved633)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved634 as *const _ as usize },
        5088usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved634)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved635 as *const _ as usize },
        5096usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved635)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved636 as *const _ as usize },
        5104usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved636)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved637 as *const _ as usize },
        5112usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved637)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved638 as *const _ as usize },
        5120usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved638)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved639 as *const _ as usize },
        5128usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved639)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved640 as *const _ as usize },
        5136usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved640)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved641 as *const _ as usize },
        5144usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved641)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved642 as *const _ as usize },
        5152usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved642)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved643 as *const _ as usize },
        5160usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved643)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved644 as *const _ as usize },
        5168usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved644)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved645 as *const _ as usize },
        5176usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved645)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved646 as *const _ as usize },
        5184usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved646)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved647 as *const _ as usize },
        5192usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved647)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved648 as *const _ as usize },
        5200usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved648)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved649 as *const _ as usize },
        5208usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved649)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved650 as *const _ as usize },
        5216usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved650)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved651 as *const _ as usize },
        5224usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved651)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved652 as *const _ as usize },
        5232usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved652)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved653 as *const _ as usize },
        5240usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved653)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved654 as *const _ as usize },
        5248usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved654)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved655 as *const _ as usize },
        5256usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved655)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved656 as *const _ as usize },
        5264usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved656)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved657 as *const _ as usize },
        5272usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved657)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved658 as *const _ as usize },
        5280usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved658)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).reserved659 as *const _ as usize },
        5288usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(reserved659)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclStubs>())).tclUnusedStubEntry as *const _ as usize },
        5296usize,
        concat!(
            "Offset of field: ",
            stringify!(TclStubs),
            "::",
            stringify!(tclUnusedStubEntry)
        )
    );
}
extern "C" {
    pub static mut tclStubsPtr: *const TclStubs;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TclPlatStubs {
    pub magic: ::std::os::raw::c_int,
    pub hooks: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_TclPlatStubs() {
    assert_eq!(
        ::std::mem::size_of::<TclPlatStubs>(),
        16usize,
        concat!("Size of: ", stringify!(TclPlatStubs))
    );
    assert_eq!(
        ::std::mem::align_of::<TclPlatStubs>(),
        8usize,
        concat!("Alignment of ", stringify!(TclPlatStubs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclPlatStubs>())).magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TclPlatStubs),
            "::",
            stringify!(magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TclPlatStubs>())).hooks as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TclPlatStubs),
            "::",
            stringify!(hooks)
        )
    );
}
extern "C" {
    pub static mut tclPlatStubsPtr: *const TclPlatStubs;
}
extern "C" {
    pub fn Tcl_AppInit(interp: *mut Tcl_Interp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copyfile(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copyfilef(arg1: *mut ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcopyfile(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn movefile(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn file_readable(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub const _ISupper: ::std::os::raw::c_uint = 256;
pub const _ISlower: ::std::os::raw::c_uint = 512;
pub const _ISalpha: ::std::os::raw::c_uint = 1024;
pub const _ISdigit: ::std::os::raw::c_uint = 2048;
pub const _ISxdigit: ::std::os::raw::c_uint = 4096;
pub const _ISspace: ::std::os::raw::c_uint = 8192;
pub const _ISprint: ::std::os::raw::c_uint = 16384;
pub const _ISgraph: ::std::os::raw::c_uint = 32768;
pub const _ISblank: ::std::os::raw::c_uint = 1;
pub const _IScntrl: ::std::os::raw::c_uint = 2;
pub const _ISpunct: ::std::os::raw::c_uint = 4;
pub const _ISalnum: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
pub type IntFunc = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: size_t,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__once_flag>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = ::std::os::raw::c_uint;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_padding as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_align as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
pub const MSG_OOB: ::std::os::raw::c_uint = 1;
pub const MSG_PEEK: ::std::os::raw::c_uint = 2;
pub const MSG_DONTROUTE: ::std::os::raw::c_uint = 4;
pub const MSG_CTRUNC: ::std::os::raw::c_uint = 8;
pub const MSG_PROXY: ::std::os::raw::c_uint = 16;
pub const MSG_TRUNC: ::std::os::raw::c_uint = 32;
pub const MSG_DONTWAIT: ::std::os::raw::c_uint = 64;
pub const MSG_EOR: ::std::os::raw::c_uint = 128;
pub const MSG_WAITALL: ::std::os::raw::c_uint = 256;
pub const MSG_FIN: ::std::os::raw::c_uint = 512;
pub const MSG_SYN: ::std::os::raw::c_uint = 1024;
pub const MSG_CONFIRM: ::std::os::raw::c_uint = 2048;
pub const MSG_RST: ::std::os::raw::c_uint = 4096;
pub const MSG_ERRQUEUE: ::std::os::raw::c_uint = 8192;
pub const MSG_NOSIGNAL: ::std::os::raw::c_uint = 16384;
pub const MSG_MORE: ::std::os::raw::c_uint = 32768;
pub const MSG_WAITFORONE: ::std::os::raw::c_uint = 65536;
pub const MSG_BATCH: ::std::os::raw::c_uint = 262144;
pub const MSG_ZEROCOPY: ::std::os::raw::c_uint = 67108864;
pub const MSG_FASTOPEN: ::std::os::raw::c_uint = 536870912;
pub const MSG_CMSG_CLOEXEC: ::std::os::raw::c_uint = 1073741824;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: size_t,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: size_t,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_namelen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iov as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iovlen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_control as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_controllen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: size_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).cmsg_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).cmsg_level as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).cmsg_type as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmsghdr>())).__cmsg_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(__cmsg_data)
        )
    );
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_onoff as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_linger as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    assert_eq!(
        ::std::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub const SHUT_RD: ::std::os::raw::c_uint = 0;
pub const SHUT_WR: ::std::os::raw::c_uint = 1;
pub const SHUT_RDWR: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    assert_eq!(
        ::std::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_addr>())).s_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout_ip_opts() {
    assert_eq!(
        ::std::mem::size_of::<ip_opts>(),
        44usize,
        concat!("Size of: ", stringify!(ip_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_opts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_dst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_opts as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_opts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ip_mreqn() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreqn>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreqn))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreqn>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreqn))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_address as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_ifindex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[test]
fn bindgen_test_layout_in_pktinfo() {
    assert_eq!(
        ::std::mem::size_of::<in_pktinfo>(),
        12usize,
        concat!("Size of: ", stringify!(in_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<in_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in_pktinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_ifindex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_ifindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_spec_dst as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_spec_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_addr)
        )
    );
}
pub const IPPROTO_IP: ::std::os::raw::c_uint = 0;
pub const IPPROTO_ICMP: ::std::os::raw::c_uint = 1;
pub const IPPROTO_IGMP: ::std::os::raw::c_uint = 2;
pub const IPPROTO_IPIP: ::std::os::raw::c_uint = 4;
pub const IPPROTO_TCP: ::std::os::raw::c_uint = 6;
pub const IPPROTO_EGP: ::std::os::raw::c_uint = 8;
pub const IPPROTO_PUP: ::std::os::raw::c_uint = 12;
pub const IPPROTO_UDP: ::std::os::raw::c_uint = 17;
pub const IPPROTO_IDP: ::std::os::raw::c_uint = 22;
pub const IPPROTO_TP: ::std::os::raw::c_uint = 29;
pub const IPPROTO_DCCP: ::std::os::raw::c_uint = 33;
pub const IPPROTO_IPV6: ::std::os::raw::c_uint = 41;
pub const IPPROTO_RSVP: ::std::os::raw::c_uint = 46;
pub const IPPROTO_GRE: ::std::os::raw::c_uint = 47;
pub const IPPROTO_ESP: ::std::os::raw::c_uint = 50;
pub const IPPROTO_AH: ::std::os::raw::c_uint = 51;
pub const IPPROTO_MTP: ::std::os::raw::c_uint = 92;
pub const IPPROTO_BEETPH: ::std::os::raw::c_uint = 94;
pub const IPPROTO_ENCAP: ::std::os::raw::c_uint = 98;
pub const IPPROTO_PIM: ::std::os::raw::c_uint = 103;
pub const IPPROTO_COMP: ::std::os::raw::c_uint = 108;
pub const IPPROTO_SCTP: ::std::os::raw::c_uint = 132;
pub const IPPROTO_UDPLITE: ::std::os::raw::c_uint = 136;
pub const IPPROTO_MPLS: ::std::os::raw::c_uint = 137;
pub const IPPROTO_ETHERNET: ::std::os::raw::c_uint = 143;
pub const IPPROTO_RAW: ::std::os::raw::c_uint = 255;
pub const IPPROTO_MPTCP: ::std::os::raw::c_uint = 262;
pub const IPPROTO_MAX: ::std::os::raw::c_uint = 263;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const IPPROTO_HOPOPTS: ::std::os::raw::c_uint = 0;
pub const IPPROTO_ROUTING: ::std::os::raw::c_uint = 43;
pub const IPPROTO_FRAGMENT: ::std::os::raw::c_uint = 44;
pub const IPPROTO_ICMPV6: ::std::os::raw::c_uint = 58;
pub const IPPROTO_NONE: ::std::os::raw::c_uint = 59;
pub const IPPROTO_DSTOPTS: ::std::os::raw::c_uint = 60;
pub const IPPROTO_MH: ::std::os::raw::c_uint = 135;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub type in_port_t = u16;
pub const IPPORT_ECHO: ::std::os::raw::c_uint = 7;
pub const IPPORT_DISCARD: ::std::os::raw::c_uint = 9;
pub const IPPORT_SYSTAT: ::std::os::raw::c_uint = 11;
pub const IPPORT_DAYTIME: ::std::os::raw::c_uint = 13;
pub const IPPORT_NETSTAT: ::std::os::raw::c_uint = 15;
pub const IPPORT_FTP: ::std::os::raw::c_uint = 21;
pub const IPPORT_TELNET: ::std::os::raw::c_uint = 23;
pub const IPPORT_SMTP: ::std::os::raw::c_uint = 25;
pub const IPPORT_TIMESERVER: ::std::os::raw::c_uint = 37;
pub const IPPORT_NAMESERVER: ::std::os::raw::c_uint = 42;
pub const IPPORT_WHOIS: ::std::os::raw::c_uint = 43;
pub const IPPORT_MTP: ::std::os::raw::c_uint = 57;
pub const IPPORT_TFTP: ::std::os::raw::c_uint = 69;
pub const IPPORT_RJE: ::std::os::raw::c_uint = 77;
pub const IPPORT_FINGER: ::std::os::raw::c_uint = 79;
pub const IPPORT_TTYLINK: ::std::os::raw::c_uint = 87;
pub const IPPORT_SUPDUP: ::std::os::raw::c_uint = 95;
pub const IPPORT_EXECSERVER: ::std::os::raw::c_uint = 512;
pub const IPPORT_LOGINSERVER: ::std::os::raw::c_uint = 513;
pub const IPPORT_CMDSERVER: ::std::os::raw::c_uint = 514;
pub const IPPORT_EFSSERVER: ::std::os::raw::c_uint = 520;
pub const IPPORT_BIFFUDP: ::std::os::raw::c_uint = 512;
pub const IPPORT_WHOSERVER: ::std::os::raw::c_uint = 513;
pub const IPPORT_ROUTESERVER: ::std::os::raw::c_uint = 520;
pub const IPPORT_RESERVED: ::std::os::raw::c_uint = 1024;
pub const IPPORT_USERRESERVED: ::std::os::raw::c_uint = 5000;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr8 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr16 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr32)
        )
    );
}
#[test]
fn bindgen_test_layout_in6_addr() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in6_addr>())).__in6_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr),
            "::",
            stringify!(__in6_u)
        )
    );
}
extern "C" {
    pub static in6addr_any: in6_addr;
}
extern "C" {
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_zero as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_zero)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[test]
fn bindgen_test_layout_sockaddr_in6() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in6>(),
        28usize,
        concat!("Size of: ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in6>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_flowinfo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_flowinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_scope_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_scope_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq>(),
        8usize,
        concat!("Size of: ", stringify!(ip_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq_source() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq_source>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq_source>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_sourceaddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_sourceaddr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ipv6_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ipv6_mreq>(),
        20usize,
        concat!("Size of: ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ipv6_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_interface as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_req() {
    assert_eq!(
        ::std::mem::size_of::<group_req>(),
        136usize,
        concat!("Size of: ", stringify!(group_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_req>())).gr_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_req>())).gr_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_group)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_source_req() {
    assert_eq!(
        ::std::mem::size_of::<group_source_req>(),
        264usize,
        concat!("Size of: ", stringify!(group_source_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_source_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_source_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_source as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_source)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[test]
fn bindgen_test_layout_ip_msfilter() {
    assert_eq!(
        ::std::mem::size_of::<ip_msfilter>(),
        20usize,
        concat!("Size of: ", stringify!(ip_msfilter))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_msfilter>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_msfilter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_fmode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_fmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_numsrc as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_numsrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_slist as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_slist)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[test]
fn bindgen_test_layout_group_filter() {
    assert_eq!(
        ::std::mem::size_of::<group_filter>(),
        272usize,
        concat!("Size of: ", stringify!(group_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<group_filter>(),
        8usize,
        concat!("Alignment of ", stringify!(group_filter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_fmode as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_fmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_numsrc as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_numsrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_slist as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_slist)
        )
    );
}
extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
extern "C" {
    pub fn bindresvport(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindresvport6(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in6,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockname_t {
    pub family: ::std::os::raw::c_int,
    pub addrlen: socklen_t,
    pub addr: sockname_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sockname_t__bindgen_ty_1 {
    pub sa: sockaddr,
    pub s4: sockaddr_in,
}
#[test]
fn bindgen_test_layout_sockname_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sockname_t__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(sockname_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sockname_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(sockname_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockname_t__bindgen_ty_1>())).sa as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockname_t__bindgen_ty_1),
            "::",
            stringify!(sa)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockname_t__bindgen_ty_1>())).s4 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockname_t__bindgen_ty_1),
            "::",
            stringify!(s4)
        )
    );
}
#[test]
fn bindgen_test_layout_sockname_t() {
    assert_eq!(
        ::std::mem::size_of::<sockname_t>(),
        24usize,
        concat!("Size of: ", stringify!(sockname_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sockname_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sockname_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockname_t>())).family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockname_t),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockname_t>())).addrlen as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockname_t),
            "::",
            stringify!(addrlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockname_t>())).addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockname_t),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct portmap {
    pub realport: ::std::os::raw::c_int,
    pub mappedto: ::std::os::raw::c_int,
    pub next: *mut portmap,
}
#[test]
fn bindgen_test_layout_portmap() {
    assert_eq!(
        ::std::mem::size_of::<portmap>(),
        16usize,
        concat!("Size of: ", stringify!(portmap))
    );
    assert_eq!(
        ::std::mem::align_of::<portmap>(),
        8usize,
        concat!("Alignment of ", stringify!(portmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<portmap>())).realport as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(portmap),
            "::",
            stringify!(realport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<portmap>())).mappedto as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(portmap),
            "::",
            stringify!(mappedto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<portmap>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(portmap),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dcc_table {
    pub name: *mut ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_int,
    pub eof: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub activity: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ),
    >,
    pub timeout_val: *mut ::std::os::raw::c_int,
    pub timeout: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub display: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: *mut ::std::os::raw::c_char),
    >,
    pub expmem: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub kill: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: *mut ::std::os::raw::c_void),
    >,
    pub output: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut ::std::os::raw::c_char,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
    pub outdone: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
}
#[test]
fn bindgen_test_layout_dcc_table() {
    assert_eq!(
        ::std::mem::size_of::<dcc_table>(),
        88usize,
        concat!("Size of: ", stringify!(dcc_table))
    );
    assert_eq!(
        ::std::mem::align_of::<dcc_table>(),
        8usize,
        concat!("Alignment of ", stringify!(dcc_table))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_table>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_table),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_table>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_table),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_table>())).eof as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_table),
            "::",
            stringify!(eof)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_table>())).activity as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_table),
            "::",
            stringify!(activity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_table>())).timeout_val as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_table),
            "::",
            stringify!(timeout_val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_table>())).timeout as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_table),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_table>())).display as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_table),
            "::",
            stringify!(display)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_table>())).expmem as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_table),
            "::",
            stringify!(expmem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_table>())).kill as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_table),
            "::",
            stringify!(kill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_table>())).output as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_table),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_table>())).outdone as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_table),
            "::",
            stringify!(outdone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct userrec {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dcc_t {
    pub sock: ::std::os::raw::c_long,
    pub addr: ::std::os::raw::c_int,
    pub sockname: sockname_t,
    pub port: ::std::os::raw::c_uint,
    pub user: *mut userrec,
    pub nick: [::std::os::raw::c_char; 33usize],
    pub host: [::std::os::raw::c_char; 324usize],
    pub type_: *mut dcc_table,
    pub timeval: time_t,
    pub status: ::std::os::raw::c_ulong,
    pub u: dcc_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union dcc_t__bindgen_ty_1 {
    pub chat: *mut chat_info,
    pub file: *mut file_info,
    pub edit: *mut edit_info,
    pub xfer: *mut xfer_info,
    pub bot: *mut bot_info,
    pub relay: *mut relay_info,
    pub script: *mut script_info,
    pub dns: *mut dns_info,
    pub dupwait: *mut dupwait_info,
    pub ident_sock: ::std::os::raw::c_int,
    pub other: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_dcc_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<dcc_t__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(dcc_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<dcc_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(dcc_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_t__bindgen_ty_1>())).chat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_t__bindgen_ty_1),
            "::",
            stringify!(chat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_t__bindgen_ty_1>())).file as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_t__bindgen_ty_1),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_t__bindgen_ty_1>())).edit as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_t__bindgen_ty_1),
            "::",
            stringify!(edit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_t__bindgen_ty_1>())).xfer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_t__bindgen_ty_1),
            "::",
            stringify!(xfer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_t__bindgen_ty_1>())).bot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_t__bindgen_ty_1),
            "::",
            stringify!(bot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_t__bindgen_ty_1>())).relay as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_t__bindgen_ty_1),
            "::",
            stringify!(relay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_t__bindgen_ty_1>())).script as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_t__bindgen_ty_1),
            "::",
            stringify!(script)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_t__bindgen_ty_1>())).dns as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_t__bindgen_ty_1),
            "::",
            stringify!(dns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_t__bindgen_ty_1>())).dupwait as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_t__bindgen_ty_1),
            "::",
            stringify!(dupwait)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_t__bindgen_ty_1>())).ident_sock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_t__bindgen_ty_1),
            "::",
            stringify!(ident_sock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_t__bindgen_ty_1>())).other as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_t__bindgen_ty_1),
            "::",
            stringify!(other)
        )
    );
}
#[test]
fn bindgen_test_layout_dcc_t() {
    assert_eq!(
        ::std::mem::size_of::<dcc_t>(),
        440usize,
        concat!("Size of: ", stringify!(dcc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<dcc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(dcc_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_t>())).sock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_t),
            "::",
            stringify!(sock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_t>())).addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_t),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_t>())).sockname as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_t),
            "::",
            stringify!(sockname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_t>())).port as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_t),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_t>())).user as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_t),
            "::",
            stringify!(user)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_t>())).nick as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_t),
            "::",
            stringify!(nick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_t>())).host as *const _ as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_t),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_t>())).type_ as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_t>())).timeval as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_t),
            "::",
            stringify!(timeval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_t>())).status as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(dcc_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dcc_t>())).u as *const _ as usize },
        432usize,
        concat!("Offset of field: ", stringify!(dcc_t), "::", stringify!(u))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct chat_info {
    pub away: *mut ::std::os::raw::c_char,
    pub msgs_per_sec: ::std::os::raw::c_int,
    pub con_flags: ::std::os::raw::c_int,
    pub strip_flags: ::std::os::raw::c_int,
    pub con_chan: [::std::os::raw::c_char; 81usize],
    pub channel: ::std::os::raw::c_int,
    pub buffer: *mut msgq,
    pub max_line: ::std::os::raw::c_int,
    pub line_count: ::std::os::raw::c_int,
    pub current_lines: ::std::os::raw::c_int,
    pub su_nick: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_chat_info() {
    assert_eq!(
        ::std::mem::size_of::<chat_info>(),
        144usize,
        concat!("Size of: ", stringify!(chat_info))
    );
    assert_eq!(
        ::std::mem::align_of::<chat_info>(),
        8usize,
        concat!("Alignment of ", stringify!(chat_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chat_info>())).away as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(chat_info),
            "::",
            stringify!(away)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chat_info>())).msgs_per_sec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(chat_info),
            "::",
            stringify!(msgs_per_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chat_info>())).con_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(chat_info),
            "::",
            stringify!(con_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chat_info>())).strip_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(chat_info),
            "::",
            stringify!(strip_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chat_info>())).con_chan as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(chat_info),
            "::",
            stringify!(con_chan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chat_info>())).channel as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(chat_info),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chat_info>())).buffer as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(chat_info),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chat_info>())).max_line as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(chat_info),
            "::",
            stringify!(max_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chat_info>())).line_count as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(chat_info),
            "::",
            stringify!(line_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chat_info>())).current_lines as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(chat_info),
            "::",
            stringify!(current_lines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<chat_info>())).su_nick as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(chat_info),
            "::",
            stringify!(su_nick)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct file_info {
    pub chat: *mut chat_info,
    pub dir: [::std::os::raw::c_char; 161usize],
}
#[test]
fn bindgen_test_layout_file_info() {
    assert_eq!(
        ::std::mem::size_of::<file_info>(),
        176usize,
        concat!("Size of: ", stringify!(file_info))
    );
    assert_eq!(
        ::std::mem::align_of::<file_info>(),
        8usize,
        concat!("Alignment of ", stringify!(file_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_info>())).chat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(file_info),
            "::",
            stringify!(chat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_info>())).dir as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(file_info),
            "::",
            stringify!(dir)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xfer_info {
    pub filename: *mut ::std::os::raw::c_char,
    pub origname: *mut ::std::os::raw::c_char,
    pub dir: [::std::os::raw::c_char; 513usize],
    pub length: ::std::os::raw::c_ulong,
    pub acked: ::std::os::raw::c_ulong,
    pub buf: [::std::os::raw::c_char; 4usize],
    pub sofar: ::std::os::raw::c_uchar,
    pub from: [::std::os::raw::c_char; 33usize],
    pub f: *mut FILE,
    pub type_: ::std::os::raw::c_uint,
    pub ack_type: ::std::os::raw::c_ushort,
    pub offset: ::std::os::raw::c_ulong,
    pub block_pending: ::std::os::raw::c_ulong,
    pub start_time: time_t,
}
#[test]
fn bindgen_test_layout_xfer_info() {
    assert_eq!(
        ::std::mem::size_of::<xfer_info>(),
        632usize,
        concat!("Size of: ", stringify!(xfer_info))
    );
    assert_eq!(
        ::std::mem::align_of::<xfer_info>(),
        8usize,
        concat!("Alignment of ", stringify!(xfer_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xfer_info>())).filename as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xfer_info),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xfer_info>())).origname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xfer_info),
            "::",
            stringify!(origname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xfer_info>())).dir as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xfer_info),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xfer_info>())).length as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(xfer_info),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xfer_info>())).acked as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(xfer_info),
            "::",
            stringify!(acked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xfer_info>())).buf as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(xfer_info),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xfer_info>())).sofar as *const _ as usize },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(xfer_info),
            "::",
            stringify!(sofar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xfer_info>())).from as *const _ as usize },
        557usize,
        concat!(
            "Offset of field: ",
            stringify!(xfer_info),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xfer_info>())).f as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(xfer_info),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xfer_info>())).type_ as *const _ as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(xfer_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xfer_info>())).ack_type as *const _ as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(xfer_info),
            "::",
            stringify!(ack_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xfer_info>())).offset as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(xfer_info),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xfer_info>())).block_pending as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(xfer_info),
            "::",
            stringify!(block_pending)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xfer_info>())).start_time as *const _ as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(xfer_info),
            "::",
            stringify!(start_time)
        )
    );
}
pub const XFER_SEND: ::std::os::raw::c_uint = 0;
pub const XFER_RESEND: ::std::os::raw::c_uint = 1;
pub const XFER_RESEND_PEND: ::std::os::raw::c_uint = 2;
pub const XFER_RESUME: ::std::os::raw::c_uint = 3;
pub const XFER_RESUME_PEND: ::std::os::raw::c_uint = 4;
pub const XFER_GET: ::std::os::raw::c_uint = 5;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub const XFER_ACK_UNKNOWN: ::std::os::raw::c_uint = 0;
pub const XFER_ACK_WITH_OFFSET: ::std::os::raw::c_uint = 1;
pub const XFER_ACK_WITHOUT_OFFSET: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bot_info {
    pub version: [::std::os::raw::c_char; 121usize],
    pub linker: [::std::os::raw::c_char; 66usize],
    pub numver: ::std::os::raw::c_int,
    pub port: ::std::os::raw::c_int,
    pub uff_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_bot_info() {
    assert_eq!(
        ::std::mem::size_of::<bot_info>(),
        200usize,
        concat!("Size of: ", stringify!(bot_info))
    );
    assert_eq!(
        ::std::mem::align_of::<bot_info>(),
        4usize,
        concat!("Alignment of ", stringify!(bot_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bot_info>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bot_info),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bot_info>())).linker as *const _ as usize },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(bot_info),
            "::",
            stringify!(linker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bot_info>())).numver as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(bot_info),
            "::",
            stringify!(numver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bot_info>())).port as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(bot_info),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bot_info>())).uff_flags as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(bot_info),
            "::",
            stringify!(uff_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct relay_info {
    pub chat: *mut chat_info,
    pub sock: ::std::os::raw::c_int,
    pub port: ::std::os::raw::c_int,
    pub old_status: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_relay_info() {
    assert_eq!(
        ::std::mem::size_of::<relay_info>(),
        24usize,
        concat!("Size of: ", stringify!(relay_info))
    );
    assert_eq!(
        ::std::mem::align_of::<relay_info>(),
        8usize,
        concat!("Alignment of ", stringify!(relay_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relay_info>())).chat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(relay_info),
            "::",
            stringify!(chat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relay_info>())).sock as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(relay_info),
            "::",
            stringify!(sock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relay_info>())).port as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(relay_info),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<relay_info>())).old_status as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(relay_info),
            "::",
            stringify!(old_status)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct script_info {
    pub type_: *mut dcc_table,
    pub u: script_info__bindgen_ty_1,
    pub command: [::std::os::raw::c_char; 121usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union script_info__bindgen_ty_1 {
    pub chat: *mut chat_info,
    pub file: *mut file_info,
    pub other: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_script_info__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<script_info__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(script_info__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<script_info__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(script_info__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<script_info__bindgen_ty_1>())).chat as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(script_info__bindgen_ty_1),
            "::",
            stringify!(chat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<script_info__bindgen_ty_1>())).file as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(script_info__bindgen_ty_1),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<script_info__bindgen_ty_1>())).other as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(script_info__bindgen_ty_1),
            "::",
            stringify!(other)
        )
    );
}
#[test]
fn bindgen_test_layout_script_info() {
    assert_eq!(
        ::std::mem::size_of::<script_info>(),
        144usize,
        concat!("Size of: ", stringify!(script_info))
    );
    assert_eq!(
        ::std::mem::align_of::<script_info>(),
        8usize,
        concat!("Alignment of ", stringify!(script_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<script_info>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(script_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<script_info>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(script_info),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<script_info>())).command as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(script_info),
            "::",
            stringify!(command)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dns_info {
    pub dns_success: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub dns_failure: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub host: *mut ::std::os::raw::c_char,
    pub cbuf: *mut ::std::os::raw::c_char,
    pub cptr: *mut ::std::os::raw::c_char,
    pub ip: *mut sockname_t,
    pub ibuf: ::std::os::raw::c_int,
    pub dns_type: ::std::os::raw::c_char,
    pub type_: *mut dcc_table,
}
#[test]
fn bindgen_test_layout_dns_info() {
    assert_eq!(
        ::std::mem::size_of::<dns_info>(),
        64usize,
        concat!("Size of: ", stringify!(dns_info))
    );
    assert_eq!(
        ::std::mem::align_of::<dns_info>(),
        8usize,
        concat!("Alignment of ", stringify!(dns_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dns_info>())).dns_success as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dns_info),
            "::",
            stringify!(dns_success)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dns_info>())).dns_failure as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dns_info),
            "::",
            stringify!(dns_failure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dns_info>())).host as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dns_info),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dns_info>())).cbuf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dns_info),
            "::",
            stringify!(cbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dns_info>())).cptr as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dns_info),
            "::",
            stringify!(cptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dns_info>())).ip as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(dns_info),
            "::",
            stringify!(ip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dns_info>())).ibuf as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(dns_info),
            "::",
            stringify!(ibuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dns_info>())).dns_type as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(dns_info),
            "::",
            stringify!(dns_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dns_info>())).type_ as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(dns_info),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dupwait_info {
    pub atr: ::std::os::raw::c_int,
    pub chat: *mut chat_info,
}
#[test]
fn bindgen_test_layout_dupwait_info() {
    assert_eq!(
        ::std::mem::size_of::<dupwait_info>(),
        16usize,
        concat!("Size of: ", stringify!(dupwait_info))
    );
    assert_eq!(
        ::std::mem::align_of::<dupwait_info>(),
        8usize,
        concat!("Alignment of ", stringify!(dupwait_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dupwait_info>())).atr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dupwait_info),
            "::",
            stringify!(atr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dupwait_info>())).chat as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dupwait_info),
            "::",
            stringify!(chat)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct log_t {
    pub filename: *mut ::std::os::raw::c_char,
    pub mask: ::std::os::raw::c_uint,
    pub chname: *mut ::std::os::raw::c_char,
    pub szlast: [::std::os::raw::c_char; 9001usize],
    pub repeats: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_uint,
    pub f: *mut FILE,
}
#[test]
fn bindgen_test_layout_log_t() {
    assert_eq!(
        ::std::mem::size_of::<log_t>(),
        9048usize,
        concat!("Size of: ", stringify!(log_t))
    );
    assert_eq!(
        ::std::mem::align_of::<log_t>(),
        8usize,
        concat!("Alignment of ", stringify!(log_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<log_t>())).filename as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(log_t),
            "::",
            stringify!(filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<log_t>())).mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(log_t),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<log_t>())).chname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(log_t),
            "::",
            stringify!(chname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<log_t>())).szlast as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(log_t),
            "::",
            stringify!(szlast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<log_t>())).repeats as *const _ as usize },
        9028usize,
        concat!(
            "Offset of field: ",
            stringify!(log_t),
            "::",
            stringify!(repeats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<log_t>())).flags as *const _ as usize },
        9032usize,
        concat!(
            "Offset of field: ",
            stringify!(log_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<log_t>())).f as *const _ as usize },
        9040usize,
        concat!("Offset of field: ", stringify!(log_t), "::", stringify!(f))
    );
}
pub const SOCK_DATA_OUTGOING: ::std::os::raw::c_uint = 0;
pub const SOCK_DATA_INCOMING: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sock_handler {
    pub inbuf: *mut ::std::os::raw::c_char,
    pub outbuf: *mut ::std::os::raw::c_char,
    pub outbuflen: ::std::os::raw::c_ulong,
    pub inbuflen: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sock_handler() {
    assert_eq!(
        ::std::mem::size_of::<sock_handler>(),
        32usize,
        concat!("Size of: ", stringify!(sock_handler))
    );
    assert_eq!(
        ::std::mem::align_of::<sock_handler>(),
        8usize,
        concat!("Alignment of ", stringify!(sock_handler))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sock_handler>())).inbuf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sock_handler),
            "::",
            stringify!(inbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sock_handler>())).outbuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sock_handler),
            "::",
            stringify!(outbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sock_handler>())).outbuflen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sock_handler),
            "::",
            stringify!(outbuflen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sock_handler>())).inbuflen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sock_handler),
            "::",
            stringify!(inbuflen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tclsock_handler {
    pub mask: ::std::os::raw::c_int,
    pub proc_: Tcl_FileProc,
    pub cd: ClientData,
}
#[test]
fn bindgen_test_layout_tclsock_handler() {
    assert_eq!(
        ::std::mem::size_of::<tclsock_handler>(),
        24usize,
        concat!("Size of: ", stringify!(tclsock_handler))
    );
    assert_eq!(
        ::std::mem::align_of::<tclsock_handler>(),
        8usize,
        concat!("Alignment of ", stringify!(tclsock_handler))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tclsock_handler>())).mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tclsock_handler),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tclsock_handler>())).proc_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tclsock_handler),
            "::",
            stringify!(proc_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tclsock_handler>())).cd as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tclsock_handler),
            "::",
            stringify!(cd)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sock_list {
    pub sock: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_short,
    pub handler: sock_list__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sock_list__bindgen_ty_1 {
    pub sock: sock_handler,
    pub tclsock: tclsock_handler,
}
#[test]
fn bindgen_test_layout_sock_list__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sock_list__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(sock_list__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sock_list__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sock_list__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sock_list__bindgen_ty_1>())).sock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sock_list__bindgen_ty_1),
            "::",
            stringify!(sock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sock_list__bindgen_ty_1>())).tclsock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sock_list__bindgen_ty_1),
            "::",
            stringify!(tclsock)
        )
    );
}
#[test]
fn bindgen_test_layout_sock_list() {
    assert_eq!(
        ::std::mem::size_of::<sock_list>(),
        40usize,
        concat!("Size of: ", stringify!(sock_list))
    );
    assert_eq!(
        ::std::mem::align_of::<sock_list>(),
        8usize,
        concat!("Alignment of ", stringify!(sock_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sock_list>())).sock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sock_list),
            "::",
            stringify!(sock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sock_list>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sock_list),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sock_list>())).handler as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sock_list),
            "::",
            stringify!(handler)
        )
    );
}
pub const EGG_OPTION_SET: ::std::os::raw::c_uint = 1;
pub const EGG_OPTION_UNSET: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct chanset_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct maskrec {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct igrec {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flag_record {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct list_type {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tand_t_struct {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut encrypt_pass: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_char, arg2: *mut ::std::os::raw::c_char),
    >;
}
extern "C" {
    pub static mut encrypt_pass2: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut verify_pass2: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut encrypt_string: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut decrypt_string: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
    >;
}
extern "C" {
    pub static mut rfc_casecmp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut rfc_ncasecmp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut rfc_toupper: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut rfc_tolower: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub static mut match_noterej: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut userrec,
            arg2: *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >;
}
extern "C" {
    pub fn bot_share(arg1: ::std::os::raw::c_int, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn base64_to_int(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_botnetnick(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn answer_local_whom(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lastbot(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn nextbot(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn in_chain(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tell_bots(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn tell_bottree(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn botlink(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn botunlink(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dump_links(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn addbot(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn updatebot(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rembot(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn findbot(arg1: *mut ::std::os::raw::c_char) -> *mut tand_t_struct;
}
extern "C" {
    pub fn unvia(arg1: ::std::os::raw::c_int, arg2: *mut tand_t_struct);
}
extern "C" {
    pub fn check_botnet_pings();
}
extern "C" {
    pub fn partysock(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addparty(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_char,
        arg7: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remparty(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn partystat(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn partynick(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn partyidle(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn partysetidle(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn partyaway(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn zapfbot(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn tandem_relay(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn getparty(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_note(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn int_to_base10(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn unsigned_int_to_base10(arg1: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn int_to_base64(arg1: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tell_verbose_uptime(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn tell_verbose_status(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn tell_settings(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn logmodes(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isowner(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn masktype(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn maskname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn reaffirm_owners();
}
extern "C" {
    pub fn add_hq_user();
}
extern "C" {
    pub fn rehash();
}
extern "C" {
    pub fn reload();
}
extern "C" {
    pub fn chanprog();
}
extern "C" {
    pub fn check_timers();
}
extern "C" {
    pub fn check_utimers();
}
extern "C" {
    pub fn rmspace(s: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn set_chanlist(host: *const ::std::os::raw::c_char, rec: *mut userrec);
}
extern "C" {
    pub fn clear_chanlist();
}
extern "C" {
    pub fn clear_chanlist_member(nick: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn getcputime() -> f32;
}
extern "C" {
    pub fn check_dcc_attrs(
        arg1: *mut userrec,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_dcc_chanattrs(
        arg1: *mut userrec,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_int_range(
        value: *mut ::std::os::raw::c_char,
        min: ::std::os::raw::c_int,
        max: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stripmodes(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stripmasktype(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn check_validpass(
        arg1: *mut userrec,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn failed_link(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn strip_mirc_codes(arg1: ::std::os::raw::c_int, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn check_ansi(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dupwait_notify(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn increase_socks_max() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn findidx(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn findanyidx(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_cr(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dprint(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub static mut shareout: ::std::option::Option<unsafe extern "C" fn()>;
}
extern "C" {
    pub static mut sharein: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: *mut ::std::os::raw::c_char),
    >;
}
extern "C" {
    pub fn dcc_chatter(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lostdcc(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn killtransfer(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn removedcc(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn makepass(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn tell_dcc(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn not_away(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_away(arg1: ::std::os::raw::c_int, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _get_data_ptr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn dcc_remove_lost();
}
extern "C" {
    pub fn do_boot(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn detect_dcc_flood(
        arg1: *mut time_t,
        arg2: *mut chat_info,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flush_lines(arg1: ::std::os::raw::c_int, arg2: *mut chat_info);
}
extern "C" {
    pub fn find_idx(arg1: ::std::os::raw::c_int) -> *mut dcc_t;
}
extern "C" {
    pub fn new_dcc(arg1: *mut dcc_table, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn del_dcc(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn changeover_dcc(
        arg1: ::std::os::raw::c_int,
        arg2: *mut dcc_table,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub static mut dns_hostbyip: ::std::option::Option<unsafe extern "C" fn(arg1: *mut sockname_t)>;
}
extern "C" {
    pub fn core_dns_hostbyip(arg1: *mut sockname_t);
}
extern "C" {
    pub fn call_hostbyip(
        arg1: *mut sockname_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn call_ipbyhost(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut sockname_t,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn dcc_dnshostbyip(arg1: *mut sockname_t);
}
extern "C" {
    pub static mut dns_ipbyhost:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_char)>;
}
extern "C" {
    pub fn core_dns_ipbyhost(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn dcc_dnsipbyhost(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn get_language(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cmd_loadlanguage(
        arg1: *mut userrec,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_lang_section(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn del_lang_section(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exist_lang_section(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fatal(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn expected_memory() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eggContext(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn eggContextNote(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn eggAssert(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn backup_userfile();
}
extern "C" {
    pub fn mainloop(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn casecharcmp(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn charcmp(
        arg1: ::std::os::raw::c_uchar,
        arg2: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wild_match(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wild_match_per(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_uchar,
                arg2: ::std::os::raw::c_uchar,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_uchar,
                arg2: ::std::os::raw::c_uchar,
            ) -> ::std::os::raw::c_int,
        >,
        arg5: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addr_match(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mask_match(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cidr_match(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cron_match(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn n_malloc(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn n_realloc(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn n_free(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn tell_mem_status(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn tell_mem_status_dcc(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn debug_mem_to_dcc(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn egg_strcatn(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn my_strcpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushlogs();
}
extern "C" {
    pub fn check_logsize();
}
extern "C" {
    pub fn splitc(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn splitcn(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
        arg4: size_t,
    );
}
extern "C" {
    pub fn remove_crlf(arg1: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn newsplit(arg1: *mut *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn splitnick(arg1: *mut *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stridx(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn dumplots(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn daysago(arg1: time_t, arg2: time_t, arg3: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn days(arg1: time_t, arg2: time_t, arg3: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn daysdur(arg1: time_t, arg2: time_t, arg3: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn egg_uname() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn help_subst(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut flag_record,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn sub_lang(arg1: ::std::os::raw::c_int, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn show_motd(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn tellhelp(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut flag_record,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn tellwildhelp(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut flag_record,
    );
}
extern "C" {
    pub fn tellallhelp(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut flag_record,
    );
}
extern "C" {
    pub fn showhelp(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut flag_record,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn rem_help_reference(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn add_help_reference(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn debug_help(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn reload_help_data();
}
extern "C" {
    pub fn extracthostname(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn show_banner(i: ::std::os::raw::c_int);
}
extern "C" {
    pub fn make_rand_str_from_chars(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn make_rand_str(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn oatoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_file(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn logsuffix_change(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn str_escape(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr_unescape(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn str_unescape(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_char);
}
extern "C" {
    pub fn str_isdigit(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kill_bot(arg1: *mut ::std::os::raw::c_char, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn maskaddr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn crypto_verify(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsock(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn allocsock(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alloctclsock(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: Tcl_FileProc,
        arg4: ClientData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsock(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killsock(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn killtclsock(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn open_listen(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getvhost(arg1: *mut sockname_t, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setsockname(
        arg1: *mut sockname_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open_address_listen(arg1: *mut sockname_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open_telnet_raw(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockname_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open_telnet(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn answer(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockname_t,
        arg3: *mut u16,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdccaddr(
        arg1: *mut sockname_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdccfamilyaddr(
        arg1: *mut sockname_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: size_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tputs(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn dequeue_sockets();
}
extern "C" {
    pub fn sockread(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut sock_list,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tell_netdebug(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sanitycheck_dcc(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hostsanitycheck_dcc(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut sockname_t,
        arg4: *mut ::std::os::raw::c_char,
        arg5: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iptostr(arg1: *mut sockaddr) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sock_has_data(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockoptions(
        sock: ::std::os::raw::c_int,
        operation: ::std::os::raw::c_int,
        sock_options: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flush_inbuf(idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn findsock(sock: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn safe_write(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: size_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct threaddata {
    _unused: [u8; 0],
}
extern "C" {
    pub fn threaddata() -> *mut threaddata;
}
extern "C" {
    pub fn init_threaddata(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn protect_tcl();
}
extern "C" {
    pub fn unprotect_tcl();
}
extern "C" {
    pub fn do_tcl(arg1: *mut ::std::os::raw::c_char, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn readtclprog(fname: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_type_kill(arg1: *mut list_type);
}
extern "C" {
    pub fn list_type_expmem(arg1: *mut list_type) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xtra_set() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adduser(
        arg1: *mut userrec,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> *mut userrec;
}
extern "C" {
    pub fn addhost_by_handle(arg1: *mut ::std::os::raw::c_char, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn clear_masks(arg1: *mut maskrec);
}
extern "C" {
    pub fn clear_userlist(arg1: *mut userrec);
}
extern "C" {
    pub fn u_pass_match(
        arg1: *mut userrec,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn delhost_by_handle(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ishost_for_handle(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn count_users(arg1: *mut userrec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deluser(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freeuser(arg1: *mut userrec);
}
extern "C" {
    pub fn change_handle(
        arg1: *mut userrec,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn correct_handle(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn write_user(
        arg1: *mut userrec,
        arg2: *mut FILE,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_ignores(f: *mut FILE, arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_userfile(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn check_dcclist_hand(arg1: *mut ::std::os::raw::c_char) -> *mut userrec;
}
extern "C" {
    pub fn touch_laston(arg1: *mut userrec, arg2: *mut ::std::os::raw::c_char, arg3: time_t);
}
extern "C" {
    pub fn user_del_chan(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn check_conflags(fr: *mut flag_record, md: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addignore(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: time_t,
    );
}
extern "C" {
    pub fn delignore(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tell_ignores(arg1: ::std::os::raw::c_int, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn match_ignore(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_expired_ignores();
}
extern "C" {
    pub fn autolink_cycle(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn tell_file_stats(arg1: ::std::os::raw::c_int, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn tell_user_ident(arg1: ::std::os::raw::c_int, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn tell_users_match(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn readuserfile(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *mut userrec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _rfc_casecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _rfc_ncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _rfc_toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _rfc_tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TclIntStubs {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TclIntPlatStubs {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct edit_info {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msgq {
    pub _address: u8,
}
